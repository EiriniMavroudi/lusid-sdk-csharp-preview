/* 
 * LUSID API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.10.1380
 * Contact: info@finbourne.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp.Portable;
using Lusid.Sdk.Client;
using Lusid.Sdk.Model;

namespace Lusid.Sdk.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IAggregationApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// [EXPERIMENTAL] Aggregate data in a portfolio group
        /// </summary>
        /// <remarks>
        /// Aggregate data sourced from the specified portfolio group
        /// </remarks>
        /// <exception cref="Lusid.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scope">The scope of the portfolio group</param>
        /// <param name="code">The code of the portfolio group</param>
        /// <param name="sortBy">Optional. Order the results by these fields. Use use the &#39;-&#39; sign to denote descending order e.g. -MyFieldName (optional)</param>
        /// <param name="start">Optional. When paginating, skip this number of results (optional)</param>
        /// <param name="limit">Optional. When paginating, limit the number of returned results to this many. (optional)</param>
        /// <param name="request">The request specifying the parameters of the aggregation (optional)</param>
        /// <returns>ListAggregationResponse</returns>
        ListAggregationResponse GetAggregationByGroup (string scope, string code, List<string> sortBy = null, int? start = null, int? limit = null, AggregationRequest request = null);

        /// <summary>
        /// [EXPERIMENTAL] Aggregate data in a portfolio group
        /// </summary>
        /// <remarks>
        /// Aggregate data sourced from the specified portfolio group
        /// </remarks>
        /// <exception cref="Lusid.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scope">The scope of the portfolio group</param>
        /// <param name="code">The code of the portfolio group</param>
        /// <param name="sortBy">Optional. Order the results by these fields. Use use the &#39;-&#39; sign to denote descending order e.g. -MyFieldName (optional)</param>
        /// <param name="start">Optional. When paginating, skip this number of results (optional)</param>
        /// <param name="limit">Optional. When paginating, limit the number of returned results to this many. (optional)</param>
        /// <param name="request">The request specifying the parameters of the aggregation (optional)</param>
        /// <returns>ApiResponse of ListAggregationResponse</returns>
        ApiResponse<ListAggregationResponse> GetAggregationByGroupWithHttpInfo (string scope, string code, List<string> sortBy = null, int? start = null, int? limit = null, AggregationRequest request = null);
        /// <summary>
        /// [EXPERIMENTAL] Aggregate data in a portfolio
        /// </summary>
        /// <remarks>
        /// Aggregate data sourced from the specified portfolio
        /// </remarks>
        /// <exception cref="Lusid.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scope">The scope of the portfolio</param>
        /// <param name="code">The code of the portfolio</param>
        /// <param name="sortBy">Optional. Order the results by these fields. Use use the &#39;-&#39; sign to denote descending order e.g. -MyFieldName (optional)</param>
        /// <param name="start">Optional. When paginating, skip this number of results (optional)</param>
        /// <param name="limit">Optional. When paginating, limit the number of returned results to this many. (optional)</param>
        /// <param name="request">The request specifying the parameters of the aggregation (optional)</param>
        /// <returns>ListAggregationResponse</returns>
        ListAggregationResponse GetAggregationByPortfolio (string scope, string code, List<string> sortBy = null, int? start = null, int? limit = null, AggregationRequest request = null);

        /// <summary>
        /// [EXPERIMENTAL] Aggregate data in a portfolio
        /// </summary>
        /// <remarks>
        /// Aggregate data sourced from the specified portfolio
        /// </remarks>
        /// <exception cref="Lusid.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scope">The scope of the portfolio</param>
        /// <param name="code">The code of the portfolio</param>
        /// <param name="sortBy">Optional. Order the results by these fields. Use use the &#39;-&#39; sign to denote descending order e.g. -MyFieldName (optional)</param>
        /// <param name="start">Optional. When paginating, skip this number of results (optional)</param>
        /// <param name="limit">Optional. When paginating, limit the number of returned results to this many. (optional)</param>
        /// <param name="request">The request specifying the parameters of the aggregation (optional)</param>
        /// <returns>ApiResponse of ListAggregationResponse</returns>
        ApiResponse<ListAggregationResponse> GetAggregationByPortfolioWithHttpInfo (string scope, string code, List<string> sortBy = null, int? start = null, int? limit = null, AggregationRequest request = null);
        /// <summary>
        /// [EXPERIMENTAL] Aggregate using result data
        /// </summary>
        /// <remarks>
        /// Aggregate data from a previously-run Result data set into a flat row of results
        /// </remarks>
        /// <exception cref="Lusid.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scope">The scope of the Result data set</param>
        /// <param name="resultsKey">The key of the Result data set</param>
        /// <param name="sortBy">Optional. Order the results by these fields. Use use the &#39;-&#39; sign to denote descending order e.g. -MyFieldName (optional)</param>
        /// <param name="start">Optional. When paginating, skip this number of results (optional)</param>
        /// <param name="limit">Optional. When paginating, limit the number of returned results to this many. (optional)</param>
        /// <param name="request">The request specifying the parameters of the aggregation (optional)</param>
        /// <returns>ListAggregationResponse</returns>
        ListAggregationResponse GetAggregationByResultSet (string scope, string resultsKey, List<string> sortBy = null, int? start = null, int? limit = null, AggregationRequest request = null);

        /// <summary>
        /// [EXPERIMENTAL] Aggregate using result data
        /// </summary>
        /// <remarks>
        /// Aggregate data from a previously-run Result data set into a flat row of results
        /// </remarks>
        /// <exception cref="Lusid.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scope">The scope of the Result data set</param>
        /// <param name="resultsKey">The key of the Result data set</param>
        /// <param name="sortBy">Optional. Order the results by these fields. Use use the &#39;-&#39; sign to denote descending order e.g. -MyFieldName (optional)</param>
        /// <param name="start">Optional. When paginating, skip this number of results (optional)</param>
        /// <param name="limit">Optional. When paginating, limit the number of returned results to this many. (optional)</param>
        /// <param name="request">The request specifying the parameters of the aggregation (optional)</param>
        /// <returns>ApiResponse of ListAggregationResponse</returns>
        ApiResponse<ListAggregationResponse> GetAggregationByResultSetWithHttpInfo (string scope, string resultsKey, List<string> sortBy = null, int? start = null, int? limit = null, AggregationRequest request = null);
        /// <summary>
        /// [EXPERIMENTAL] Aggregate data in an inlined portfolio
        /// </summary>
        /// <remarks>
        /// Aggregate data sourced from the portfolio that is defined by the weighted set of instruments passed to the request.
        /// </remarks>
        /// <exception cref="Lusid.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scope">The scope of the instruments should that be required</param>
        /// <param name="sortBy">Optional. Order the results by these fields. Use use the &#39;-&#39; sign to denote descending order e.g. -MyFieldName (optional)</param>
        /// <param name="start">Optional. When paginating, skip this number of results (optional)</param>
        /// <param name="limit">Optional. When paginating, limit the number of returned results to this many. (optional)</param>
        /// <param name="inlineRequest">The request specifying the parameters of the aggregation and the inlined set of instruments to aggregate over. (optional)</param>
        /// <returns>ListAggregationResponse</returns>
        ListAggregationResponse GetAggregationOfWeightedInstruments (string scope, List<string> sortBy = null, int? start = null, int? limit = null, InlineAggregationRequest inlineRequest = null);

        /// <summary>
        /// [EXPERIMENTAL] Aggregate data in an inlined portfolio
        /// </summary>
        /// <remarks>
        /// Aggregate data sourced from the portfolio that is defined by the weighted set of instruments passed to the request.
        /// </remarks>
        /// <exception cref="Lusid.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scope">The scope of the instruments should that be required</param>
        /// <param name="sortBy">Optional. Order the results by these fields. Use use the &#39;-&#39; sign to denote descending order e.g. -MyFieldName (optional)</param>
        /// <param name="start">Optional. When paginating, skip this number of results (optional)</param>
        /// <param name="limit">Optional. When paginating, limit the number of returned results to this many. (optional)</param>
        /// <param name="inlineRequest">The request specifying the parameters of the aggregation and the inlined set of instruments to aggregate over. (optional)</param>
        /// <returns>ApiResponse of ListAggregationResponse</returns>
        ApiResponse<ListAggregationResponse> GetAggregationOfWeightedInstrumentsWithHttpInfo (string scope, List<string> sortBy = null, int? start = null, int? limit = null, InlineAggregationRequest inlineRequest = null);
        /// <summary>
        /// [EXPERIMENTAL] Aggregate data in a portfolio group, as nested
        /// </summary>
        /// <remarks>
        /// Obsolete - Aggregate data sourced from the specified portfolio group into a nested structure. Data is nested following the group-by specifications.
        /// </remarks>
        /// <exception cref="Lusid.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scope">The scope of the portfolio group</param>
        /// <param name="code">The code of the portfolio group</param>
        /// <param name="request">The request specifying the parameters of the aggregation (optional)</param>
        /// <returns>NestedAggregationResponse</returns>
        NestedAggregationResponse GetNestedAggregationByGroup (string scope, string code, AggregationRequest request = null);

        /// <summary>
        /// [EXPERIMENTAL] Aggregate data in a portfolio group, as nested
        /// </summary>
        /// <remarks>
        /// Obsolete - Aggregate data sourced from the specified portfolio group into a nested structure. Data is nested following the group-by specifications.
        /// </remarks>
        /// <exception cref="Lusid.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scope">The scope of the portfolio group</param>
        /// <param name="code">The code of the portfolio group</param>
        /// <param name="request">The request specifying the parameters of the aggregation (optional)</param>
        /// <returns>ApiResponse of NestedAggregationResponse</returns>
        ApiResponse<NestedAggregationResponse> GetNestedAggregationByGroupWithHttpInfo (string scope, string code, AggregationRequest request = null);
        /// <summary>
        /// [EXPERIMENTAL] 
        /// </summary>
        /// <remarks>
        /// Aggregate data in a portfolio, as nested
        /// </remarks>
        /// <exception cref="Lusid.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scope">The scope of the portfolio</param>
        /// <param name="code">The code of the portfolio</param>
        /// <param name="request">The request specifying the parameters of the aggregation (optional)</param>
        /// <returns>NestedAggregationResponse</returns>
        NestedAggregationResponse GetNestedAggregationByPortfolio (string scope, string code, AggregationRequest request = null);

        /// <summary>
        /// [EXPERIMENTAL] 
        /// </summary>
        /// <remarks>
        /// Aggregate data in a portfolio, as nested
        /// </remarks>
        /// <exception cref="Lusid.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scope">The scope of the portfolio</param>
        /// <param name="code">The code of the portfolio</param>
        /// <param name="request">The request specifying the parameters of the aggregation (optional)</param>
        /// <returns>ApiResponse of NestedAggregationResponse</returns>
        ApiResponse<NestedAggregationResponse> GetNestedAggregationByPortfolioWithHttpInfo (string scope, string code, AggregationRequest request = null);
        /// <summary>
        /// [EXPERIMENTAL] Query the set of supported \&quot;addresses\&quot; that can be queried from the aggregation endpoint.
        /// </summary>
        /// <remarks>
        /// When a request is made for aggregation, the user needs to know what keys can be passed to it for queryable data. This endpoint allows to queries to provide the set of keys,  what they are and what they return.
        /// </remarks>
        /// <exception cref="Lusid.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pagination">The pagination token to use to continue listing quotes from a previous call to list quotes.              This value is returned from the previous call. (optional)</param>
        /// <param name="start">When paginating, skip this number of results. (optional)</param>
        /// <param name="limit">When paginating, limit the number of returned results to this many. (optional)</param>
        /// <param name="filter">Expression to filter the result set.              Read more about filtering results from LUSID here https://support.lusid.com/filtering-results-from-lusid. (optional)</param>
        /// <returns>QueryableEntitiesResponse</returns>
        QueryableEntitiesResponse GetQueryableKeys (string pagination = null, int? start = null, int? limit = null, string filter = null);

        /// <summary>
        /// [EXPERIMENTAL] Query the set of supported \&quot;addresses\&quot; that can be queried from the aggregation endpoint.
        /// </summary>
        /// <remarks>
        /// When a request is made for aggregation, the user needs to know what keys can be passed to it for queryable data. This endpoint allows to queries to provide the set of keys,  what they are and what they return.
        /// </remarks>
        /// <exception cref="Lusid.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pagination">The pagination token to use to continue listing quotes from a previous call to list quotes.              This value is returned from the previous call. (optional)</param>
        /// <param name="start">When paginating, skip this number of results. (optional)</param>
        /// <param name="limit">When paginating, limit the number of returned results to this many. (optional)</param>
        /// <param name="filter">Expression to filter the result set.              Read more about filtering results from LUSID here https://support.lusid.com/filtering-results-from-lusid. (optional)</param>
        /// <returns>ApiResponse of QueryableEntitiesResponse</returns>
        ApiResponse<QueryableEntitiesResponse> GetQueryableKeysWithHttpInfo (string pagination = null, int? start = null, int? limit = null, string filter = null);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// [EXPERIMENTAL] Aggregate data in a portfolio group
        /// </summary>
        /// <remarks>
        /// Aggregate data sourced from the specified portfolio group
        /// </remarks>
        /// <exception cref="Lusid.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scope">The scope of the portfolio group</param>
        /// <param name="code">The code of the portfolio group</param>
        /// <param name="sortBy">Optional. Order the results by these fields. Use use the &#39;-&#39; sign to denote descending order e.g. -MyFieldName (optional)</param>
        /// <param name="start">Optional. When paginating, skip this number of results (optional)</param>
        /// <param name="limit">Optional. When paginating, limit the number of returned results to this many. (optional)</param>
        /// <param name="request">The request specifying the parameters of the aggregation (optional)</param>
        /// <returns>Task of ListAggregationResponse</returns>
        System.Threading.Tasks.Task<ListAggregationResponse> GetAggregationByGroupAsync (string scope, string code, List<string> sortBy = null, int? start = null, int? limit = null, AggregationRequest request = null);

        /// <summary>
        /// [EXPERIMENTAL] Aggregate data in a portfolio group
        /// </summary>
        /// <remarks>
        /// Aggregate data sourced from the specified portfolio group
        /// </remarks>
        /// <exception cref="Lusid.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scope">The scope of the portfolio group</param>
        /// <param name="code">The code of the portfolio group</param>
        /// <param name="sortBy">Optional. Order the results by these fields. Use use the &#39;-&#39; sign to denote descending order e.g. -MyFieldName (optional)</param>
        /// <param name="start">Optional. When paginating, skip this number of results (optional)</param>
        /// <param name="limit">Optional. When paginating, limit the number of returned results to this many. (optional)</param>
        /// <param name="request">The request specifying the parameters of the aggregation (optional)</param>
        /// <returns>Task of ApiResponse (ListAggregationResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ListAggregationResponse>> GetAggregationByGroupAsyncWithHttpInfo (string scope, string code, List<string> sortBy = null, int? start = null, int? limit = null, AggregationRequest request = null);
        /// <summary>
        /// [EXPERIMENTAL] Aggregate data in a portfolio
        /// </summary>
        /// <remarks>
        /// Aggregate data sourced from the specified portfolio
        /// </remarks>
        /// <exception cref="Lusid.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scope">The scope of the portfolio</param>
        /// <param name="code">The code of the portfolio</param>
        /// <param name="sortBy">Optional. Order the results by these fields. Use use the &#39;-&#39; sign to denote descending order e.g. -MyFieldName (optional)</param>
        /// <param name="start">Optional. When paginating, skip this number of results (optional)</param>
        /// <param name="limit">Optional. When paginating, limit the number of returned results to this many. (optional)</param>
        /// <param name="request">The request specifying the parameters of the aggregation (optional)</param>
        /// <returns>Task of ListAggregationResponse</returns>
        System.Threading.Tasks.Task<ListAggregationResponse> GetAggregationByPortfolioAsync (string scope, string code, List<string> sortBy = null, int? start = null, int? limit = null, AggregationRequest request = null);

        /// <summary>
        /// [EXPERIMENTAL] Aggregate data in a portfolio
        /// </summary>
        /// <remarks>
        /// Aggregate data sourced from the specified portfolio
        /// </remarks>
        /// <exception cref="Lusid.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scope">The scope of the portfolio</param>
        /// <param name="code">The code of the portfolio</param>
        /// <param name="sortBy">Optional. Order the results by these fields. Use use the &#39;-&#39; sign to denote descending order e.g. -MyFieldName (optional)</param>
        /// <param name="start">Optional. When paginating, skip this number of results (optional)</param>
        /// <param name="limit">Optional. When paginating, limit the number of returned results to this many. (optional)</param>
        /// <param name="request">The request specifying the parameters of the aggregation (optional)</param>
        /// <returns>Task of ApiResponse (ListAggregationResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ListAggregationResponse>> GetAggregationByPortfolioAsyncWithHttpInfo (string scope, string code, List<string> sortBy = null, int? start = null, int? limit = null, AggregationRequest request = null);
        /// <summary>
        /// [EXPERIMENTAL] Aggregate using result data
        /// </summary>
        /// <remarks>
        /// Aggregate data from a previously-run Result data set into a flat row of results
        /// </remarks>
        /// <exception cref="Lusid.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scope">The scope of the Result data set</param>
        /// <param name="resultsKey">The key of the Result data set</param>
        /// <param name="sortBy">Optional. Order the results by these fields. Use use the &#39;-&#39; sign to denote descending order e.g. -MyFieldName (optional)</param>
        /// <param name="start">Optional. When paginating, skip this number of results (optional)</param>
        /// <param name="limit">Optional. When paginating, limit the number of returned results to this many. (optional)</param>
        /// <param name="request">The request specifying the parameters of the aggregation (optional)</param>
        /// <returns>Task of ListAggregationResponse</returns>
        System.Threading.Tasks.Task<ListAggregationResponse> GetAggregationByResultSetAsync (string scope, string resultsKey, List<string> sortBy = null, int? start = null, int? limit = null, AggregationRequest request = null);

        /// <summary>
        /// [EXPERIMENTAL] Aggregate using result data
        /// </summary>
        /// <remarks>
        /// Aggregate data from a previously-run Result data set into a flat row of results
        /// </remarks>
        /// <exception cref="Lusid.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scope">The scope of the Result data set</param>
        /// <param name="resultsKey">The key of the Result data set</param>
        /// <param name="sortBy">Optional. Order the results by these fields. Use use the &#39;-&#39; sign to denote descending order e.g. -MyFieldName (optional)</param>
        /// <param name="start">Optional. When paginating, skip this number of results (optional)</param>
        /// <param name="limit">Optional. When paginating, limit the number of returned results to this many. (optional)</param>
        /// <param name="request">The request specifying the parameters of the aggregation (optional)</param>
        /// <returns>Task of ApiResponse (ListAggregationResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ListAggregationResponse>> GetAggregationByResultSetAsyncWithHttpInfo (string scope, string resultsKey, List<string> sortBy = null, int? start = null, int? limit = null, AggregationRequest request = null);
        /// <summary>
        /// [EXPERIMENTAL] Aggregate data in an inlined portfolio
        /// </summary>
        /// <remarks>
        /// Aggregate data sourced from the portfolio that is defined by the weighted set of instruments passed to the request.
        /// </remarks>
        /// <exception cref="Lusid.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scope">The scope of the instruments should that be required</param>
        /// <param name="sortBy">Optional. Order the results by these fields. Use use the &#39;-&#39; sign to denote descending order e.g. -MyFieldName (optional)</param>
        /// <param name="start">Optional. When paginating, skip this number of results (optional)</param>
        /// <param name="limit">Optional. When paginating, limit the number of returned results to this many. (optional)</param>
        /// <param name="inlineRequest">The request specifying the parameters of the aggregation and the inlined set of instruments to aggregate over. (optional)</param>
        /// <returns>Task of ListAggregationResponse</returns>
        System.Threading.Tasks.Task<ListAggregationResponse> GetAggregationOfWeightedInstrumentsAsync (string scope, List<string> sortBy = null, int? start = null, int? limit = null, InlineAggregationRequest inlineRequest = null);

        /// <summary>
        /// [EXPERIMENTAL] Aggregate data in an inlined portfolio
        /// </summary>
        /// <remarks>
        /// Aggregate data sourced from the portfolio that is defined by the weighted set of instruments passed to the request.
        /// </remarks>
        /// <exception cref="Lusid.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scope">The scope of the instruments should that be required</param>
        /// <param name="sortBy">Optional. Order the results by these fields. Use use the &#39;-&#39; sign to denote descending order e.g. -MyFieldName (optional)</param>
        /// <param name="start">Optional. When paginating, skip this number of results (optional)</param>
        /// <param name="limit">Optional. When paginating, limit the number of returned results to this many. (optional)</param>
        /// <param name="inlineRequest">The request specifying the parameters of the aggregation and the inlined set of instruments to aggregate over. (optional)</param>
        /// <returns>Task of ApiResponse (ListAggregationResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ListAggregationResponse>> GetAggregationOfWeightedInstrumentsAsyncWithHttpInfo (string scope, List<string> sortBy = null, int? start = null, int? limit = null, InlineAggregationRequest inlineRequest = null);
        /// <summary>
        /// [EXPERIMENTAL] Aggregate data in a portfolio group, as nested
        /// </summary>
        /// <remarks>
        /// Obsolete - Aggregate data sourced from the specified portfolio group into a nested structure. Data is nested following the group-by specifications.
        /// </remarks>
        /// <exception cref="Lusid.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scope">The scope of the portfolio group</param>
        /// <param name="code">The code of the portfolio group</param>
        /// <param name="request">The request specifying the parameters of the aggregation (optional)</param>
        /// <returns>Task of NestedAggregationResponse</returns>
        System.Threading.Tasks.Task<NestedAggregationResponse> GetNestedAggregationByGroupAsync (string scope, string code, AggregationRequest request = null);

        /// <summary>
        /// [EXPERIMENTAL] Aggregate data in a portfolio group, as nested
        /// </summary>
        /// <remarks>
        /// Obsolete - Aggregate data sourced from the specified portfolio group into a nested structure. Data is nested following the group-by specifications.
        /// </remarks>
        /// <exception cref="Lusid.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scope">The scope of the portfolio group</param>
        /// <param name="code">The code of the portfolio group</param>
        /// <param name="request">The request specifying the parameters of the aggregation (optional)</param>
        /// <returns>Task of ApiResponse (NestedAggregationResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<NestedAggregationResponse>> GetNestedAggregationByGroupAsyncWithHttpInfo (string scope, string code, AggregationRequest request = null);
        /// <summary>
        /// [EXPERIMENTAL] 
        /// </summary>
        /// <remarks>
        /// Aggregate data in a portfolio, as nested
        /// </remarks>
        /// <exception cref="Lusid.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scope">The scope of the portfolio</param>
        /// <param name="code">The code of the portfolio</param>
        /// <param name="request">The request specifying the parameters of the aggregation (optional)</param>
        /// <returns>Task of NestedAggregationResponse</returns>
        System.Threading.Tasks.Task<NestedAggregationResponse> GetNestedAggregationByPortfolioAsync (string scope, string code, AggregationRequest request = null);

        /// <summary>
        /// [EXPERIMENTAL] 
        /// </summary>
        /// <remarks>
        /// Aggregate data in a portfolio, as nested
        /// </remarks>
        /// <exception cref="Lusid.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scope">The scope of the portfolio</param>
        /// <param name="code">The code of the portfolio</param>
        /// <param name="request">The request specifying the parameters of the aggregation (optional)</param>
        /// <returns>Task of ApiResponse (NestedAggregationResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<NestedAggregationResponse>> GetNestedAggregationByPortfolioAsyncWithHttpInfo (string scope, string code, AggregationRequest request = null);
        /// <summary>
        /// [EXPERIMENTAL] Query the set of supported \&quot;addresses\&quot; that can be queried from the aggregation endpoint.
        /// </summary>
        /// <remarks>
        /// When a request is made for aggregation, the user needs to know what keys can be passed to it for queryable data. This endpoint allows to queries to provide the set of keys,  what they are and what they return.
        /// </remarks>
        /// <exception cref="Lusid.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pagination">The pagination token to use to continue listing quotes from a previous call to list quotes.              This value is returned from the previous call. (optional)</param>
        /// <param name="start">When paginating, skip this number of results. (optional)</param>
        /// <param name="limit">When paginating, limit the number of returned results to this many. (optional)</param>
        /// <param name="filter">Expression to filter the result set.              Read more about filtering results from LUSID here https://support.lusid.com/filtering-results-from-lusid. (optional)</param>
        /// <returns>Task of QueryableEntitiesResponse</returns>
        System.Threading.Tasks.Task<QueryableEntitiesResponse> GetQueryableKeysAsync (string pagination = null, int? start = null, int? limit = null, string filter = null);

        /// <summary>
        /// [EXPERIMENTAL] Query the set of supported \&quot;addresses\&quot; that can be queried from the aggregation endpoint.
        /// </summary>
        /// <remarks>
        /// When a request is made for aggregation, the user needs to know what keys can be passed to it for queryable data. This endpoint allows to queries to provide the set of keys,  what they are and what they return.
        /// </remarks>
        /// <exception cref="Lusid.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pagination">The pagination token to use to continue listing quotes from a previous call to list quotes.              This value is returned from the previous call. (optional)</param>
        /// <param name="start">When paginating, skip this number of results. (optional)</param>
        /// <param name="limit">When paginating, limit the number of returned results to this many. (optional)</param>
        /// <param name="filter">Expression to filter the result set.              Read more about filtering results from LUSID here https://support.lusid.com/filtering-results-from-lusid. (optional)</param>
        /// <returns>Task of ApiResponse (QueryableEntitiesResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<QueryableEntitiesResponse>> GetQueryableKeysAsyncWithHttpInfo (string pagination = null, int? start = null, int? limit = null, string filter = null);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class AggregationApi : IAggregationApi
    {
        private Lusid.Sdk.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="AggregationApi"/> class.
        /// </summary>
        /// <returns></returns>
        public AggregationApi(String basePath)
        {
            this.Configuration = new Lusid.Sdk.Client.Configuration { BasePath = basePath };

            ExceptionFactory = Lusid.Sdk.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="AggregationApi"/> class
        /// </summary>
        /// <returns></returns>
        public AggregationApi()
        {
            this.Configuration = Lusid.Sdk.Client.Configuration.Default;

            ExceptionFactory = Lusid.Sdk.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="AggregationApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public AggregationApi(Lusid.Sdk.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Lusid.Sdk.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = Lusid.Sdk.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Lusid.Sdk.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Lusid.Sdk.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// [EXPERIMENTAL] Aggregate data in a portfolio group Aggregate data sourced from the specified portfolio group
        /// </summary>
        /// <exception cref="Lusid.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scope">The scope of the portfolio group</param>
        /// <param name="code">The code of the portfolio group</param>
        /// <param name="sortBy">Optional. Order the results by these fields. Use use the &#39;-&#39; sign to denote descending order e.g. -MyFieldName (optional)</param>
        /// <param name="start">Optional. When paginating, skip this number of results (optional)</param>
        /// <param name="limit">Optional. When paginating, limit the number of returned results to this many. (optional)</param>
        /// <param name="request">The request specifying the parameters of the aggregation (optional)</param>
        /// <returns>ListAggregationResponse</returns>
        public ListAggregationResponse GetAggregationByGroup (string scope, string code, List<string> sortBy = null, int? start = null, int? limit = null, AggregationRequest request = null)
        {
             ApiResponse<ListAggregationResponse> localVarResponse = GetAggregationByGroupWithHttpInfo(scope, code, sortBy, start, limit, request);
             return localVarResponse.Data;
        }

        /// <summary>
        /// [EXPERIMENTAL] Aggregate data in a portfolio group Aggregate data sourced from the specified portfolio group
        /// </summary>
        /// <exception cref="Lusid.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scope">The scope of the portfolio group</param>
        /// <param name="code">The code of the portfolio group</param>
        /// <param name="sortBy">Optional. Order the results by these fields. Use use the &#39;-&#39; sign to denote descending order e.g. -MyFieldName (optional)</param>
        /// <param name="start">Optional. When paginating, skip this number of results (optional)</param>
        /// <param name="limit">Optional. When paginating, limit the number of returned results to this many. (optional)</param>
        /// <param name="request">The request specifying the parameters of the aggregation (optional)</param>
        /// <returns>ApiResponse of ListAggregationResponse</returns>
        public ApiResponse< ListAggregationResponse > GetAggregationByGroupWithHttpInfo (string scope, string code, List<string> sortBy = null, int? start = null, int? limit = null, AggregationRequest request = null)
        {
            // verify the required parameter 'scope' is set
            if (scope == null)
                throw new ApiException(400, "Missing required parameter 'scope' when calling AggregationApi->GetAggregationByGroup");
            // verify the required parameter 'code' is set
            if (code == null)
                throw new ApiException(400, "Missing required parameter 'code' when calling AggregationApi->GetAggregationByGroup");

            var localVarPath = "./api/portfoliogroups/{scope}/{code}/$aggregate";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (scope != null) localVarPathParams.Add("scope", this.Configuration.ApiClient.ParameterToString(scope)); // path parameter
            if (code != null) localVarPathParams.Add("code", this.Configuration.ApiClient.ParameterToString(code)); // path parameter
            if (sortBy != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "sortBy", sortBy)); // query parameter
            if (start != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "start", start)); // query parameter
            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter
            if (request != null && request.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(request); // http body (model) parameter
            }
            else
            {
                localVarPostBody = request; // byte array
            }

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetAggregationByGroup", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ListAggregationResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (ListAggregationResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ListAggregationResponse)));
        }

        /// <summary>
        /// [EXPERIMENTAL] Aggregate data in a portfolio group Aggregate data sourced from the specified portfolio group
        /// </summary>
        /// <exception cref="Lusid.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scope">The scope of the portfolio group</param>
        /// <param name="code">The code of the portfolio group</param>
        /// <param name="sortBy">Optional. Order the results by these fields. Use use the &#39;-&#39; sign to denote descending order e.g. -MyFieldName (optional)</param>
        /// <param name="start">Optional. When paginating, skip this number of results (optional)</param>
        /// <param name="limit">Optional. When paginating, limit the number of returned results to this many. (optional)</param>
        /// <param name="request">The request specifying the parameters of the aggregation (optional)</param>
        /// <returns>Task of ListAggregationResponse</returns>
        public async System.Threading.Tasks.Task<ListAggregationResponse> GetAggregationByGroupAsync (string scope, string code, List<string> sortBy = null, int? start = null, int? limit = null, AggregationRequest request = null)
        {
             ApiResponse<ListAggregationResponse> localVarResponse = await GetAggregationByGroupAsyncWithHttpInfo(scope, code, sortBy, start, limit, request);
             return localVarResponse.Data;

        }

        /// <summary>
        /// [EXPERIMENTAL] Aggregate data in a portfolio group Aggregate data sourced from the specified portfolio group
        /// </summary>
        /// <exception cref="Lusid.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scope">The scope of the portfolio group</param>
        /// <param name="code">The code of the portfolio group</param>
        /// <param name="sortBy">Optional. Order the results by these fields. Use use the &#39;-&#39; sign to denote descending order e.g. -MyFieldName (optional)</param>
        /// <param name="start">Optional. When paginating, skip this number of results (optional)</param>
        /// <param name="limit">Optional. When paginating, limit the number of returned results to this many. (optional)</param>
        /// <param name="request">The request specifying the parameters of the aggregation (optional)</param>
        /// <returns>Task of ApiResponse (ListAggregationResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ListAggregationResponse>> GetAggregationByGroupAsyncWithHttpInfo (string scope, string code, List<string> sortBy = null, int? start = null, int? limit = null, AggregationRequest request = null)
        {
            // verify the required parameter 'scope' is set
            if (scope == null)
                throw new ApiException(400, "Missing required parameter 'scope' when calling AggregationApi->GetAggregationByGroup");
            // verify the required parameter 'code' is set
            if (code == null)
                throw new ApiException(400, "Missing required parameter 'code' when calling AggregationApi->GetAggregationByGroup");

            var localVarPath = "./api/portfoliogroups/{scope}/{code}/$aggregate";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (scope != null) localVarPathParams.Add("scope", this.Configuration.ApiClient.ParameterToString(scope)); // path parameter
            if (code != null) localVarPathParams.Add("code", this.Configuration.ApiClient.ParameterToString(code)); // path parameter
            if (sortBy != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "sortBy", sortBy)); // query parameter
            if (start != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "start", start)); // query parameter
            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter
            if (request != null && request.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(request); // http body (model) parameter
            }
            else
            {
                localVarPostBody = request; // byte array
            }

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetAggregationByGroup", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ListAggregationResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (ListAggregationResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ListAggregationResponse)));
        }

        /// <summary>
        /// [EXPERIMENTAL] Aggregate data in a portfolio Aggregate data sourced from the specified portfolio
        /// </summary>
        /// <exception cref="Lusid.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scope">The scope of the portfolio</param>
        /// <param name="code">The code of the portfolio</param>
        /// <param name="sortBy">Optional. Order the results by these fields. Use use the &#39;-&#39; sign to denote descending order e.g. -MyFieldName (optional)</param>
        /// <param name="start">Optional. When paginating, skip this number of results (optional)</param>
        /// <param name="limit">Optional. When paginating, limit the number of returned results to this many. (optional)</param>
        /// <param name="request">The request specifying the parameters of the aggregation (optional)</param>
        /// <returns>ListAggregationResponse</returns>
        public ListAggregationResponse GetAggregationByPortfolio (string scope, string code, List<string> sortBy = null, int? start = null, int? limit = null, AggregationRequest request = null)
        {
             ApiResponse<ListAggregationResponse> localVarResponse = GetAggregationByPortfolioWithHttpInfo(scope, code, sortBy, start, limit, request);
             return localVarResponse.Data;
        }

        /// <summary>
        /// [EXPERIMENTAL] Aggregate data in a portfolio Aggregate data sourced from the specified portfolio
        /// </summary>
        /// <exception cref="Lusid.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scope">The scope of the portfolio</param>
        /// <param name="code">The code of the portfolio</param>
        /// <param name="sortBy">Optional. Order the results by these fields. Use use the &#39;-&#39; sign to denote descending order e.g. -MyFieldName (optional)</param>
        /// <param name="start">Optional. When paginating, skip this number of results (optional)</param>
        /// <param name="limit">Optional. When paginating, limit the number of returned results to this many. (optional)</param>
        /// <param name="request">The request specifying the parameters of the aggregation (optional)</param>
        /// <returns>ApiResponse of ListAggregationResponse</returns>
        public ApiResponse< ListAggregationResponse > GetAggregationByPortfolioWithHttpInfo (string scope, string code, List<string> sortBy = null, int? start = null, int? limit = null, AggregationRequest request = null)
        {
            // verify the required parameter 'scope' is set
            if (scope == null)
                throw new ApiException(400, "Missing required parameter 'scope' when calling AggregationApi->GetAggregationByPortfolio");
            // verify the required parameter 'code' is set
            if (code == null)
                throw new ApiException(400, "Missing required parameter 'code' when calling AggregationApi->GetAggregationByPortfolio");

            var localVarPath = "./api/portfolios/{scope}/{code}/$aggregate";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (scope != null) localVarPathParams.Add("scope", this.Configuration.ApiClient.ParameterToString(scope)); // path parameter
            if (code != null) localVarPathParams.Add("code", this.Configuration.ApiClient.ParameterToString(code)); // path parameter
            if (sortBy != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "sortBy", sortBy)); // query parameter
            if (start != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "start", start)); // query parameter
            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter
            if (request != null && request.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(request); // http body (model) parameter
            }
            else
            {
                localVarPostBody = request; // byte array
            }

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetAggregationByPortfolio", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ListAggregationResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (ListAggregationResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ListAggregationResponse)));
        }

        /// <summary>
        /// [EXPERIMENTAL] Aggregate data in a portfolio Aggregate data sourced from the specified portfolio
        /// </summary>
        /// <exception cref="Lusid.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scope">The scope of the portfolio</param>
        /// <param name="code">The code of the portfolio</param>
        /// <param name="sortBy">Optional. Order the results by these fields. Use use the &#39;-&#39; sign to denote descending order e.g. -MyFieldName (optional)</param>
        /// <param name="start">Optional. When paginating, skip this number of results (optional)</param>
        /// <param name="limit">Optional. When paginating, limit the number of returned results to this many. (optional)</param>
        /// <param name="request">The request specifying the parameters of the aggregation (optional)</param>
        /// <returns>Task of ListAggregationResponse</returns>
        public async System.Threading.Tasks.Task<ListAggregationResponse> GetAggregationByPortfolioAsync (string scope, string code, List<string> sortBy = null, int? start = null, int? limit = null, AggregationRequest request = null)
        {
             ApiResponse<ListAggregationResponse> localVarResponse = await GetAggregationByPortfolioAsyncWithHttpInfo(scope, code, sortBy, start, limit, request);
             return localVarResponse.Data;

        }

        /// <summary>
        /// [EXPERIMENTAL] Aggregate data in a portfolio Aggregate data sourced from the specified portfolio
        /// </summary>
        /// <exception cref="Lusid.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scope">The scope of the portfolio</param>
        /// <param name="code">The code of the portfolio</param>
        /// <param name="sortBy">Optional. Order the results by these fields. Use use the &#39;-&#39; sign to denote descending order e.g. -MyFieldName (optional)</param>
        /// <param name="start">Optional. When paginating, skip this number of results (optional)</param>
        /// <param name="limit">Optional. When paginating, limit the number of returned results to this many. (optional)</param>
        /// <param name="request">The request specifying the parameters of the aggregation (optional)</param>
        /// <returns>Task of ApiResponse (ListAggregationResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ListAggregationResponse>> GetAggregationByPortfolioAsyncWithHttpInfo (string scope, string code, List<string> sortBy = null, int? start = null, int? limit = null, AggregationRequest request = null)
        {
            // verify the required parameter 'scope' is set
            if (scope == null)
                throw new ApiException(400, "Missing required parameter 'scope' when calling AggregationApi->GetAggregationByPortfolio");
            // verify the required parameter 'code' is set
            if (code == null)
                throw new ApiException(400, "Missing required parameter 'code' when calling AggregationApi->GetAggregationByPortfolio");

            var localVarPath = "./api/portfolios/{scope}/{code}/$aggregate";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (scope != null) localVarPathParams.Add("scope", this.Configuration.ApiClient.ParameterToString(scope)); // path parameter
            if (code != null) localVarPathParams.Add("code", this.Configuration.ApiClient.ParameterToString(code)); // path parameter
            if (sortBy != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "sortBy", sortBy)); // query parameter
            if (start != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "start", start)); // query parameter
            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter
            if (request != null && request.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(request); // http body (model) parameter
            }
            else
            {
                localVarPostBody = request; // byte array
            }

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetAggregationByPortfolio", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ListAggregationResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (ListAggregationResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ListAggregationResponse)));
        }

        /// <summary>
        /// [EXPERIMENTAL] Aggregate using result data Aggregate data from a previously-run Result data set into a flat row of results
        /// </summary>
        /// <exception cref="Lusid.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scope">The scope of the Result data set</param>
        /// <param name="resultsKey">The key of the Result data set</param>
        /// <param name="sortBy">Optional. Order the results by these fields. Use use the &#39;-&#39; sign to denote descending order e.g. -MyFieldName (optional)</param>
        /// <param name="start">Optional. When paginating, skip this number of results (optional)</param>
        /// <param name="limit">Optional. When paginating, limit the number of returned results to this many. (optional)</param>
        /// <param name="request">The request specifying the parameters of the aggregation (optional)</param>
        /// <returns>ListAggregationResponse</returns>
        public ListAggregationResponse GetAggregationByResultSet (string scope, string resultsKey, List<string> sortBy = null, int? start = null, int? limit = null, AggregationRequest request = null)
        {
             ApiResponse<ListAggregationResponse> localVarResponse = GetAggregationByResultSetWithHttpInfo(scope, resultsKey, sortBy, start, limit, request);
             return localVarResponse.Data;
        }

        /// <summary>
        /// [EXPERIMENTAL] Aggregate using result data Aggregate data from a previously-run Result data set into a flat row of results
        /// </summary>
        /// <exception cref="Lusid.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scope">The scope of the Result data set</param>
        /// <param name="resultsKey">The key of the Result data set</param>
        /// <param name="sortBy">Optional. Order the results by these fields. Use use the &#39;-&#39; sign to denote descending order e.g. -MyFieldName (optional)</param>
        /// <param name="start">Optional. When paginating, skip this number of results (optional)</param>
        /// <param name="limit">Optional. When paginating, limit the number of returned results to this many. (optional)</param>
        /// <param name="request">The request specifying the parameters of the aggregation (optional)</param>
        /// <returns>ApiResponse of ListAggregationResponse</returns>
        public ApiResponse< ListAggregationResponse > GetAggregationByResultSetWithHttpInfo (string scope, string resultsKey, List<string> sortBy = null, int? start = null, int? limit = null, AggregationRequest request = null)
        {
            // verify the required parameter 'scope' is set
            if (scope == null)
                throw new ApiException(400, "Missing required parameter 'scope' when calling AggregationApi->GetAggregationByResultSet");
            // verify the required parameter 'resultsKey' is set
            if (resultsKey == null)
                throw new ApiException(400, "Missing required parameter 'resultsKey' when calling AggregationApi->GetAggregationByResultSet");

            var localVarPath = "./api/results/{scope}/{resultsKey}/$aggregate";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (scope != null) localVarPathParams.Add("scope", this.Configuration.ApiClient.ParameterToString(scope)); // path parameter
            if (resultsKey != null) localVarPathParams.Add("resultsKey", this.Configuration.ApiClient.ParameterToString(resultsKey)); // path parameter
            if (sortBy != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "sortBy", sortBy)); // query parameter
            if (start != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "start", start)); // query parameter
            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter
            if (request != null && request.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(request); // http body (model) parameter
            }
            else
            {
                localVarPostBody = request; // byte array
            }

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetAggregationByResultSet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ListAggregationResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (ListAggregationResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ListAggregationResponse)));
        }

        /// <summary>
        /// [EXPERIMENTAL] Aggregate using result data Aggregate data from a previously-run Result data set into a flat row of results
        /// </summary>
        /// <exception cref="Lusid.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scope">The scope of the Result data set</param>
        /// <param name="resultsKey">The key of the Result data set</param>
        /// <param name="sortBy">Optional. Order the results by these fields. Use use the &#39;-&#39; sign to denote descending order e.g. -MyFieldName (optional)</param>
        /// <param name="start">Optional. When paginating, skip this number of results (optional)</param>
        /// <param name="limit">Optional. When paginating, limit the number of returned results to this many. (optional)</param>
        /// <param name="request">The request specifying the parameters of the aggregation (optional)</param>
        /// <returns>Task of ListAggregationResponse</returns>
        public async System.Threading.Tasks.Task<ListAggregationResponse> GetAggregationByResultSetAsync (string scope, string resultsKey, List<string> sortBy = null, int? start = null, int? limit = null, AggregationRequest request = null)
        {
             ApiResponse<ListAggregationResponse> localVarResponse = await GetAggregationByResultSetAsyncWithHttpInfo(scope, resultsKey, sortBy, start, limit, request);
             return localVarResponse.Data;

        }

        /// <summary>
        /// [EXPERIMENTAL] Aggregate using result data Aggregate data from a previously-run Result data set into a flat row of results
        /// </summary>
        /// <exception cref="Lusid.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scope">The scope of the Result data set</param>
        /// <param name="resultsKey">The key of the Result data set</param>
        /// <param name="sortBy">Optional. Order the results by these fields. Use use the &#39;-&#39; sign to denote descending order e.g. -MyFieldName (optional)</param>
        /// <param name="start">Optional. When paginating, skip this number of results (optional)</param>
        /// <param name="limit">Optional. When paginating, limit the number of returned results to this many. (optional)</param>
        /// <param name="request">The request specifying the parameters of the aggregation (optional)</param>
        /// <returns>Task of ApiResponse (ListAggregationResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ListAggregationResponse>> GetAggregationByResultSetAsyncWithHttpInfo (string scope, string resultsKey, List<string> sortBy = null, int? start = null, int? limit = null, AggregationRequest request = null)
        {
            // verify the required parameter 'scope' is set
            if (scope == null)
                throw new ApiException(400, "Missing required parameter 'scope' when calling AggregationApi->GetAggregationByResultSet");
            // verify the required parameter 'resultsKey' is set
            if (resultsKey == null)
                throw new ApiException(400, "Missing required parameter 'resultsKey' when calling AggregationApi->GetAggregationByResultSet");

            var localVarPath = "./api/results/{scope}/{resultsKey}/$aggregate";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (scope != null) localVarPathParams.Add("scope", this.Configuration.ApiClient.ParameterToString(scope)); // path parameter
            if (resultsKey != null) localVarPathParams.Add("resultsKey", this.Configuration.ApiClient.ParameterToString(resultsKey)); // path parameter
            if (sortBy != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "sortBy", sortBy)); // query parameter
            if (start != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "start", start)); // query parameter
            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter
            if (request != null && request.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(request); // http body (model) parameter
            }
            else
            {
                localVarPostBody = request; // byte array
            }

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetAggregationByResultSet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ListAggregationResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (ListAggregationResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ListAggregationResponse)));
        }

        /// <summary>
        /// [EXPERIMENTAL] Aggregate data in an inlined portfolio Aggregate data sourced from the portfolio that is defined by the weighted set of instruments passed to the request.
        /// </summary>
        /// <exception cref="Lusid.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scope">The scope of the instruments should that be required</param>
        /// <param name="sortBy">Optional. Order the results by these fields. Use use the &#39;-&#39; sign to denote descending order e.g. -MyFieldName (optional)</param>
        /// <param name="start">Optional. When paginating, skip this number of results (optional)</param>
        /// <param name="limit">Optional. When paginating, limit the number of returned results to this many. (optional)</param>
        /// <param name="inlineRequest">The request specifying the parameters of the aggregation and the inlined set of instruments to aggregate over. (optional)</param>
        /// <returns>ListAggregationResponse</returns>
        public ListAggregationResponse GetAggregationOfWeightedInstruments (string scope, List<string> sortBy = null, int? start = null, int? limit = null, InlineAggregationRequest inlineRequest = null)
        {
             ApiResponse<ListAggregationResponse> localVarResponse = GetAggregationOfWeightedInstrumentsWithHttpInfo(scope, sortBy, start, limit, inlineRequest);
             return localVarResponse.Data;
        }

        /// <summary>
        /// [EXPERIMENTAL] Aggregate data in an inlined portfolio Aggregate data sourced from the portfolio that is defined by the weighted set of instruments passed to the request.
        /// </summary>
        /// <exception cref="Lusid.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scope">The scope of the instruments should that be required</param>
        /// <param name="sortBy">Optional. Order the results by these fields. Use use the &#39;-&#39; sign to denote descending order e.g. -MyFieldName (optional)</param>
        /// <param name="start">Optional. When paginating, skip this number of results (optional)</param>
        /// <param name="limit">Optional. When paginating, limit the number of returned results to this many. (optional)</param>
        /// <param name="inlineRequest">The request specifying the parameters of the aggregation and the inlined set of instruments to aggregate over. (optional)</param>
        /// <returns>ApiResponse of ListAggregationResponse</returns>
        public ApiResponse< ListAggregationResponse > GetAggregationOfWeightedInstrumentsWithHttpInfo (string scope, List<string> sortBy = null, int? start = null, int? limit = null, InlineAggregationRequest inlineRequest = null)
        {
            // verify the required parameter 'scope' is set
            if (scope == null)
                throw new ApiException(400, "Missing required parameter 'scope' when calling AggregationApi->GetAggregationOfWeightedInstruments");

            var localVarPath = "./api/portfolios/{scope}/$aggregateinlined";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (scope != null) localVarPathParams.Add("scope", this.Configuration.ApiClient.ParameterToString(scope)); // path parameter
            if (sortBy != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "sortBy", sortBy)); // query parameter
            if (start != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "start", start)); // query parameter
            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter
            if (inlineRequest != null && inlineRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(inlineRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = inlineRequest; // byte array
            }

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetAggregationOfWeightedInstruments", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ListAggregationResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (ListAggregationResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ListAggregationResponse)));
        }

        /// <summary>
        /// [EXPERIMENTAL] Aggregate data in an inlined portfolio Aggregate data sourced from the portfolio that is defined by the weighted set of instruments passed to the request.
        /// </summary>
        /// <exception cref="Lusid.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scope">The scope of the instruments should that be required</param>
        /// <param name="sortBy">Optional. Order the results by these fields. Use use the &#39;-&#39; sign to denote descending order e.g. -MyFieldName (optional)</param>
        /// <param name="start">Optional. When paginating, skip this number of results (optional)</param>
        /// <param name="limit">Optional. When paginating, limit the number of returned results to this many. (optional)</param>
        /// <param name="inlineRequest">The request specifying the parameters of the aggregation and the inlined set of instruments to aggregate over. (optional)</param>
        /// <returns>Task of ListAggregationResponse</returns>
        public async System.Threading.Tasks.Task<ListAggregationResponse> GetAggregationOfWeightedInstrumentsAsync (string scope, List<string> sortBy = null, int? start = null, int? limit = null, InlineAggregationRequest inlineRequest = null)
        {
             ApiResponse<ListAggregationResponse> localVarResponse = await GetAggregationOfWeightedInstrumentsAsyncWithHttpInfo(scope, sortBy, start, limit, inlineRequest);
             return localVarResponse.Data;

        }

        /// <summary>
        /// [EXPERIMENTAL] Aggregate data in an inlined portfolio Aggregate data sourced from the portfolio that is defined by the weighted set of instruments passed to the request.
        /// </summary>
        /// <exception cref="Lusid.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scope">The scope of the instruments should that be required</param>
        /// <param name="sortBy">Optional. Order the results by these fields. Use use the &#39;-&#39; sign to denote descending order e.g. -MyFieldName (optional)</param>
        /// <param name="start">Optional. When paginating, skip this number of results (optional)</param>
        /// <param name="limit">Optional. When paginating, limit the number of returned results to this many. (optional)</param>
        /// <param name="inlineRequest">The request specifying the parameters of the aggregation and the inlined set of instruments to aggregate over. (optional)</param>
        /// <returns>Task of ApiResponse (ListAggregationResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ListAggregationResponse>> GetAggregationOfWeightedInstrumentsAsyncWithHttpInfo (string scope, List<string> sortBy = null, int? start = null, int? limit = null, InlineAggregationRequest inlineRequest = null)
        {
            // verify the required parameter 'scope' is set
            if (scope == null)
                throw new ApiException(400, "Missing required parameter 'scope' when calling AggregationApi->GetAggregationOfWeightedInstruments");

            var localVarPath = "./api/portfolios/{scope}/$aggregateinlined";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (scope != null) localVarPathParams.Add("scope", this.Configuration.ApiClient.ParameterToString(scope)); // path parameter
            if (sortBy != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "sortBy", sortBy)); // query parameter
            if (start != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "start", start)); // query parameter
            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter
            if (inlineRequest != null && inlineRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(inlineRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = inlineRequest; // byte array
            }

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetAggregationOfWeightedInstruments", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ListAggregationResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (ListAggregationResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ListAggregationResponse)));
        }

        /// <summary>
        /// [EXPERIMENTAL] Aggregate data in a portfolio group, as nested Obsolete - Aggregate data sourced from the specified portfolio group into a nested structure. Data is nested following the group-by specifications.
        /// </summary>
        /// <exception cref="Lusid.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scope">The scope of the portfolio group</param>
        /// <param name="code">The code of the portfolio group</param>
        /// <param name="request">The request specifying the parameters of the aggregation (optional)</param>
        /// <returns>NestedAggregationResponse</returns>
        public NestedAggregationResponse GetNestedAggregationByGroup (string scope, string code, AggregationRequest request = null)
        {
             ApiResponse<NestedAggregationResponse> localVarResponse = GetNestedAggregationByGroupWithHttpInfo(scope, code, request);
             return localVarResponse.Data;
        }

        /// <summary>
        /// [EXPERIMENTAL] Aggregate data in a portfolio group, as nested Obsolete - Aggregate data sourced from the specified portfolio group into a nested structure. Data is nested following the group-by specifications.
        /// </summary>
        /// <exception cref="Lusid.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scope">The scope of the portfolio group</param>
        /// <param name="code">The code of the portfolio group</param>
        /// <param name="request">The request specifying the parameters of the aggregation (optional)</param>
        /// <returns>ApiResponse of NestedAggregationResponse</returns>
        public ApiResponse< NestedAggregationResponse > GetNestedAggregationByGroupWithHttpInfo (string scope, string code, AggregationRequest request = null)
        {
            // verify the required parameter 'scope' is set
            if (scope == null)
                throw new ApiException(400, "Missing required parameter 'scope' when calling AggregationApi->GetNestedAggregationByGroup");
            // verify the required parameter 'code' is set
            if (code == null)
                throw new ApiException(400, "Missing required parameter 'code' when calling AggregationApi->GetNestedAggregationByGroup");

            var localVarPath = "./api/portfoliogroups/{scope}/{code}/$aggregatenested";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (scope != null) localVarPathParams.Add("scope", this.Configuration.ApiClient.ParameterToString(scope)); // path parameter
            if (code != null) localVarPathParams.Add("code", this.Configuration.ApiClient.ParameterToString(code)); // path parameter
            if (request != null && request.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(request); // http body (model) parameter
            }
            else
            {
                localVarPostBody = request; // byte array
            }

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetNestedAggregationByGroup", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<NestedAggregationResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (NestedAggregationResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(NestedAggregationResponse)));
        }

        /// <summary>
        /// [EXPERIMENTAL] Aggregate data in a portfolio group, as nested Obsolete - Aggregate data sourced from the specified portfolio group into a nested structure. Data is nested following the group-by specifications.
        /// </summary>
        /// <exception cref="Lusid.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scope">The scope of the portfolio group</param>
        /// <param name="code">The code of the portfolio group</param>
        /// <param name="request">The request specifying the parameters of the aggregation (optional)</param>
        /// <returns>Task of NestedAggregationResponse</returns>
        public async System.Threading.Tasks.Task<NestedAggregationResponse> GetNestedAggregationByGroupAsync (string scope, string code, AggregationRequest request = null)
        {
             ApiResponse<NestedAggregationResponse> localVarResponse = await GetNestedAggregationByGroupAsyncWithHttpInfo(scope, code, request);
             return localVarResponse.Data;

        }

        /// <summary>
        /// [EXPERIMENTAL] Aggregate data in a portfolio group, as nested Obsolete - Aggregate data sourced from the specified portfolio group into a nested structure. Data is nested following the group-by specifications.
        /// </summary>
        /// <exception cref="Lusid.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scope">The scope of the portfolio group</param>
        /// <param name="code">The code of the portfolio group</param>
        /// <param name="request">The request specifying the parameters of the aggregation (optional)</param>
        /// <returns>Task of ApiResponse (NestedAggregationResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<NestedAggregationResponse>> GetNestedAggregationByGroupAsyncWithHttpInfo (string scope, string code, AggregationRequest request = null)
        {
            // verify the required parameter 'scope' is set
            if (scope == null)
                throw new ApiException(400, "Missing required parameter 'scope' when calling AggregationApi->GetNestedAggregationByGroup");
            // verify the required parameter 'code' is set
            if (code == null)
                throw new ApiException(400, "Missing required parameter 'code' when calling AggregationApi->GetNestedAggregationByGroup");

            var localVarPath = "./api/portfoliogroups/{scope}/{code}/$aggregatenested";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (scope != null) localVarPathParams.Add("scope", this.Configuration.ApiClient.ParameterToString(scope)); // path parameter
            if (code != null) localVarPathParams.Add("code", this.Configuration.ApiClient.ParameterToString(code)); // path parameter
            if (request != null && request.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(request); // http body (model) parameter
            }
            else
            {
                localVarPostBody = request; // byte array
            }

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetNestedAggregationByGroup", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<NestedAggregationResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (NestedAggregationResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(NestedAggregationResponse)));
        }

        /// <summary>
        /// [EXPERIMENTAL]  Aggregate data in a portfolio, as nested
        /// </summary>
        /// <exception cref="Lusid.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scope">The scope of the portfolio</param>
        /// <param name="code">The code of the portfolio</param>
        /// <param name="request">The request specifying the parameters of the aggregation (optional)</param>
        /// <returns>NestedAggregationResponse</returns>
        public NestedAggregationResponse GetNestedAggregationByPortfolio (string scope, string code, AggregationRequest request = null)
        {
             ApiResponse<NestedAggregationResponse> localVarResponse = GetNestedAggregationByPortfolioWithHttpInfo(scope, code, request);
             return localVarResponse.Data;
        }

        /// <summary>
        /// [EXPERIMENTAL]  Aggregate data in a portfolio, as nested
        /// </summary>
        /// <exception cref="Lusid.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scope">The scope of the portfolio</param>
        /// <param name="code">The code of the portfolio</param>
        /// <param name="request">The request specifying the parameters of the aggregation (optional)</param>
        /// <returns>ApiResponse of NestedAggregationResponse</returns>
        public ApiResponse< NestedAggregationResponse > GetNestedAggregationByPortfolioWithHttpInfo (string scope, string code, AggregationRequest request = null)
        {
            // verify the required parameter 'scope' is set
            if (scope == null)
                throw new ApiException(400, "Missing required parameter 'scope' when calling AggregationApi->GetNestedAggregationByPortfolio");
            // verify the required parameter 'code' is set
            if (code == null)
                throw new ApiException(400, "Missing required parameter 'code' when calling AggregationApi->GetNestedAggregationByPortfolio");

            var localVarPath = "./api/portfolios/{scope}/{code}/$aggregatenested";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (scope != null) localVarPathParams.Add("scope", this.Configuration.ApiClient.ParameterToString(scope)); // path parameter
            if (code != null) localVarPathParams.Add("code", this.Configuration.ApiClient.ParameterToString(code)); // path parameter
            if (request != null && request.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(request); // http body (model) parameter
            }
            else
            {
                localVarPostBody = request; // byte array
            }

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetNestedAggregationByPortfolio", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<NestedAggregationResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (NestedAggregationResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(NestedAggregationResponse)));
        }

        /// <summary>
        /// [EXPERIMENTAL]  Aggregate data in a portfolio, as nested
        /// </summary>
        /// <exception cref="Lusid.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scope">The scope of the portfolio</param>
        /// <param name="code">The code of the portfolio</param>
        /// <param name="request">The request specifying the parameters of the aggregation (optional)</param>
        /// <returns>Task of NestedAggregationResponse</returns>
        public async System.Threading.Tasks.Task<NestedAggregationResponse> GetNestedAggregationByPortfolioAsync (string scope, string code, AggregationRequest request = null)
        {
             ApiResponse<NestedAggregationResponse> localVarResponse = await GetNestedAggregationByPortfolioAsyncWithHttpInfo(scope, code, request);
             return localVarResponse.Data;

        }

        /// <summary>
        /// [EXPERIMENTAL]  Aggregate data in a portfolio, as nested
        /// </summary>
        /// <exception cref="Lusid.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scope">The scope of the portfolio</param>
        /// <param name="code">The code of the portfolio</param>
        /// <param name="request">The request specifying the parameters of the aggregation (optional)</param>
        /// <returns>Task of ApiResponse (NestedAggregationResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<NestedAggregationResponse>> GetNestedAggregationByPortfolioAsyncWithHttpInfo (string scope, string code, AggregationRequest request = null)
        {
            // verify the required parameter 'scope' is set
            if (scope == null)
                throw new ApiException(400, "Missing required parameter 'scope' when calling AggregationApi->GetNestedAggregationByPortfolio");
            // verify the required parameter 'code' is set
            if (code == null)
                throw new ApiException(400, "Missing required parameter 'code' when calling AggregationApi->GetNestedAggregationByPortfolio");

            var localVarPath = "./api/portfolios/{scope}/{code}/$aggregatenested";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (scope != null) localVarPathParams.Add("scope", this.Configuration.ApiClient.ParameterToString(scope)); // path parameter
            if (code != null) localVarPathParams.Add("code", this.Configuration.ApiClient.ParameterToString(code)); // path parameter
            if (request != null && request.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(request); // http body (model) parameter
            }
            else
            {
                localVarPostBody = request; // byte array
            }

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetNestedAggregationByPortfolio", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<NestedAggregationResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (NestedAggregationResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(NestedAggregationResponse)));
        }

        /// <summary>
        /// [EXPERIMENTAL] Query the set of supported \&quot;addresses\&quot; that can be queried from the aggregation endpoint. When a request is made for aggregation, the user needs to know what keys can be passed to it for queryable data. This endpoint allows to queries to provide the set of keys,  what they are and what they return.
        /// </summary>
        /// <exception cref="Lusid.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pagination">The pagination token to use to continue listing quotes from a previous call to list quotes.              This value is returned from the previous call. (optional)</param>
        /// <param name="start">When paginating, skip this number of results. (optional)</param>
        /// <param name="limit">When paginating, limit the number of returned results to this many. (optional)</param>
        /// <param name="filter">Expression to filter the result set.              Read more about filtering results from LUSID here https://support.lusid.com/filtering-results-from-lusid. (optional)</param>
        /// <returns>QueryableEntitiesResponse</returns>
        public QueryableEntitiesResponse GetQueryableKeys (string pagination = null, int? start = null, int? limit = null, string filter = null)
        {
             ApiResponse<QueryableEntitiesResponse> localVarResponse = GetQueryableKeysWithHttpInfo(pagination, start, limit, filter);
             return localVarResponse.Data;
        }

        /// <summary>
        /// [EXPERIMENTAL] Query the set of supported \&quot;addresses\&quot; that can be queried from the aggregation endpoint. When a request is made for aggregation, the user needs to know what keys can be passed to it for queryable data. This endpoint allows to queries to provide the set of keys,  what they are and what they return.
        /// </summary>
        /// <exception cref="Lusid.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pagination">The pagination token to use to continue listing quotes from a previous call to list quotes.              This value is returned from the previous call. (optional)</param>
        /// <param name="start">When paginating, skip this number of results. (optional)</param>
        /// <param name="limit">When paginating, limit the number of returned results to this many. (optional)</param>
        /// <param name="filter">Expression to filter the result set.              Read more about filtering results from LUSID here https://support.lusid.com/filtering-results-from-lusid. (optional)</param>
        /// <returns>ApiResponse of QueryableEntitiesResponse</returns>
        public ApiResponse< QueryableEntitiesResponse > GetQueryableKeysWithHttpInfo (string pagination = null, int? start = null, int? limit = null, string filter = null)
        {

            var localVarPath = "./api/results/queryable/keys";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (pagination != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "pagination", pagination)); // query parameter
            if (start != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "start", start)); // query parameter
            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter
            if (filter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "filter", filter)); // query parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetQueryableKeys", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<QueryableEntitiesResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (QueryableEntitiesResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(QueryableEntitiesResponse)));
        }

        /// <summary>
        /// [EXPERIMENTAL] Query the set of supported \&quot;addresses\&quot; that can be queried from the aggregation endpoint. When a request is made for aggregation, the user needs to know what keys can be passed to it for queryable data. This endpoint allows to queries to provide the set of keys,  what they are and what they return.
        /// </summary>
        /// <exception cref="Lusid.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pagination">The pagination token to use to continue listing quotes from a previous call to list quotes.              This value is returned from the previous call. (optional)</param>
        /// <param name="start">When paginating, skip this number of results. (optional)</param>
        /// <param name="limit">When paginating, limit the number of returned results to this many. (optional)</param>
        /// <param name="filter">Expression to filter the result set.              Read more about filtering results from LUSID here https://support.lusid.com/filtering-results-from-lusid. (optional)</param>
        /// <returns>Task of QueryableEntitiesResponse</returns>
        public async System.Threading.Tasks.Task<QueryableEntitiesResponse> GetQueryableKeysAsync (string pagination = null, int? start = null, int? limit = null, string filter = null)
        {
             ApiResponse<QueryableEntitiesResponse> localVarResponse = await GetQueryableKeysAsyncWithHttpInfo(pagination, start, limit, filter);
             return localVarResponse.Data;

        }

        /// <summary>
        /// [EXPERIMENTAL] Query the set of supported \&quot;addresses\&quot; that can be queried from the aggregation endpoint. When a request is made for aggregation, the user needs to know what keys can be passed to it for queryable data. This endpoint allows to queries to provide the set of keys,  what they are and what they return.
        /// </summary>
        /// <exception cref="Lusid.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pagination">The pagination token to use to continue listing quotes from a previous call to list quotes.              This value is returned from the previous call. (optional)</param>
        /// <param name="start">When paginating, skip this number of results. (optional)</param>
        /// <param name="limit">When paginating, limit the number of returned results to this many. (optional)</param>
        /// <param name="filter">Expression to filter the result set.              Read more about filtering results from LUSID here https://support.lusid.com/filtering-results-from-lusid. (optional)</param>
        /// <returns>Task of ApiResponse (QueryableEntitiesResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<QueryableEntitiesResponse>> GetQueryableKeysAsyncWithHttpInfo (string pagination = null, int? start = null, int? limit = null, string filter = null)
        {

            var localVarPath = "./api/results/queryable/keys";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (pagination != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "pagination", pagination)); // query parameter
            if (start != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "start", start)); // query parameter
            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter
            if (filter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "filter", filter)); // query parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetQueryableKeys", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<QueryableEntitiesResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (QueryableEntitiesResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(QueryableEntitiesResponse)));
        }

    }
}
