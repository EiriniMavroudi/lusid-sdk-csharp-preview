/* 
 * LUSID API
 *
 * # Introduction  This page documents the [LUSID APIs](https://www.lusid.com/api/swagger), which allows authorised clients to query and update their data within the LUSID platform.  SDKs to interact with the LUSID APIs are available in the following languages and frameworks:  * [C#](https://github.com/finbourne/lusid-sdk-csharp) * [Java](https://github.com/finbourne/lusid-sdk-java) * [JavaScript](https://github.com/finbourne/lusid-sdk-js) * [Python](https://github.com/finbourne/lusid-sdk-python) * [Angular](https://github.com/finbourne/lusid-sdk-angular)  The LUSID platform is made up of a number of sub-applications. You can find the API / swagger documentation by following the links in the table below.   | Application | Description | API / Swagger Documentation | | - -- -- | - -- -- | - -- - | | LUSID | Open, API-first, developer-friendly investment data platform. | [Swagger](https://www.lusid.com/api/swagger/index.html) | | Web app | User-facing front end for LUSID. | [Swagger](https://www.lusid.com/app/swagger/index.html) | | Scheduler | Automated job scheduler. | [Swagger](https://www.lusid.com/scheduler2/swagger/index.html) | | Insights |Monitoring and troubleshooting service. | [Swagger](https://www.lusid.com/insights/swagger/index.html) | | Identity | Identity management for LUSID (in conjuction with Access) | [Swagger](https://www.lusid.com/identity/swagger/index.html) | | Access | Access control for LUSID (in conjunction with Identity) | [Swagger](https://www.lusid.com/access/swagger/index.html) | | Drive | Secure file repository and manager for collaboration. | [Swagger](https://www.lusid.com/drive/swagger/index.html) | | Luminesce | Data virtualisation service (query data from multiple providers, including LUSID) | [Swagger](https://www.lusid.com/honeycomb/swagger/index.html) | | Notification | Notification service. | [Swagger](https://www.lusid.com/notifications/swagger/index.html) | | Configuration | File store for secrets and other sensitive information. | [Swagger](https://www.lusid.com/configuration/swagger/index.html) | 
 *
 * The version of the OpenAPI document: 0.11.3424
 * Contact: info@finbourne.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp.Portable;
using Lusid.Sdk.Client;
using Lusid.Sdk.Model;

namespace Lusid.Sdk.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ICalendarsApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// [EXPERIMENTAL] Adds the requested number of Business Days to the provided date.
        /// </summary>
        /// <remarks>
        /// A Business day is defined as a point in time that:      * Does not represent a day in the calendar&#39;s weekend      * Does not represent a day in the calendar&#39;s list of holidays (e.g. Christmas Day in the UK)                 All dates specified must be UTC and the upper bound of a calendar is not inclusive                 e.g. From: 2020-12-24-00-00-00:       Adding 3 business days returns 2020-12-30, assuming Saturday and Sunday are weekends, and the 25th and 28th are holidays.       Adding -2 business days returns 2020-12-22 under the same assumptions.                If the provided number of days to add is zero, returns a failure.
        /// </remarks>
        /// <exception cref="Lusid.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scope">Scope within which to search for the calendars</param>
        /// <param name="addBusinessDaysToDateRequest">Request Details: start date, number of days to add (which can be negative, but not zero), calendar codes and optionally an AsAt date for searching the calendar store</param>
        /// <returns>AddBusinessDaysToDateResponse</returns>
        AddBusinessDaysToDateResponse AddBusinessDaysToDate (string scope, AddBusinessDaysToDateRequest addBusinessDaysToDateRequest);

        /// <summary>
        /// [EXPERIMENTAL] Adds the requested number of Business Days to the provided date.
        /// </summary>
        /// <remarks>
        /// A Business day is defined as a point in time that:      * Does not represent a day in the calendar&#39;s weekend      * Does not represent a day in the calendar&#39;s list of holidays (e.g. Christmas Day in the UK)                 All dates specified must be UTC and the upper bound of a calendar is not inclusive                 e.g. From: 2020-12-24-00-00-00:       Adding 3 business days returns 2020-12-30, assuming Saturday and Sunday are weekends, and the 25th and 28th are holidays.       Adding -2 business days returns 2020-12-22 under the same assumptions.                If the provided number of days to add is zero, returns a failure.
        /// </remarks>
        /// <exception cref="Lusid.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scope">Scope within which to search for the calendars</param>
        /// <param name="addBusinessDaysToDateRequest">Request Details: start date, number of days to add (which can be negative, but not zero), calendar codes and optionally an AsAt date for searching the calendar store</param>
        /// <returns>ApiResponse of AddBusinessDaysToDateResponse</returns>
        ApiResponse<AddBusinessDaysToDateResponse> AddBusinessDaysToDateWithHttpInfo (string scope, AddBusinessDaysToDateRequest addBusinessDaysToDateRequest);
        /// <summary>
        /// [BETA] Add a date to a calendar
        /// </summary>
        /// <remarks>
        /// Add an event to the calendar. These Events can be a maximum of 24 hours and must be specified in UTC.  A local date will be calculated by the system and applied to the calendar before processing.
        /// </remarks>
        /// <exception cref="Lusid.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scope">Scope of the calendar</param>
        /// <param name="code">Code of the calendar</param>
        /// <param name="createDateRequest">Add date to calendar request</param>
        /// <returns>CalendarDate</returns>
        CalendarDate AddDateToCalendar (string scope, string code, CreateDateRequest createDateRequest);

        /// <summary>
        /// [BETA] Add a date to a calendar
        /// </summary>
        /// <remarks>
        /// Add an event to the calendar. These Events can be a maximum of 24 hours and must be specified in UTC.  A local date will be calculated by the system and applied to the calendar before processing.
        /// </remarks>
        /// <exception cref="Lusid.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scope">Scope of the calendar</param>
        /// <param name="code">Code of the calendar</param>
        /// <param name="createDateRequest">Add date to calendar request</param>
        /// <returns>ApiResponse of CalendarDate</returns>
        ApiResponse<CalendarDate> AddDateToCalendarWithHttpInfo (string scope, string code, CreateDateRequest createDateRequest);
        /// <summary>
        /// [BETA] Create a calendar in its generic form
        /// </summary>
        /// <remarks>
        /// Create a calendar in a generic form which can be used to store date events.
        /// </remarks>
        /// <exception cref="Lusid.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createCalendarRequest">A request to create the calendar</param>
        /// <returns>Calendar</returns>
        Calendar CreateCalendar (CreateCalendarRequest createCalendarRequest);

        /// <summary>
        /// [BETA] Create a calendar in its generic form
        /// </summary>
        /// <remarks>
        /// Create a calendar in a generic form which can be used to store date events.
        /// </remarks>
        /// <exception cref="Lusid.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createCalendarRequest">A request to create the calendar</param>
        /// <returns>ApiResponse of Calendar</returns>
        ApiResponse<Calendar> CreateCalendarWithHttpInfo (CreateCalendarRequest createCalendarRequest);
        /// <summary>
        /// [BETA] Delete a calendar
        /// </summary>
        /// <remarks>
        /// Delete a calendar and all of its respective dates
        /// </remarks>
        /// <exception cref="Lusid.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scope">Scope of the calendar</param>
        /// <param name="code">Code of the calendar</param>
        /// <returns>Calendar</returns>
        Calendar DeleteCalendar (string scope, string code);

        /// <summary>
        /// [BETA] Delete a calendar
        /// </summary>
        /// <remarks>
        /// Delete a calendar and all of its respective dates
        /// </remarks>
        /// <exception cref="Lusid.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scope">Scope of the calendar</param>
        /// <param name="code">Code of the calendar</param>
        /// <returns>ApiResponse of Calendar</returns>
        ApiResponse<Calendar> DeleteCalendarWithHttpInfo (string scope, string code);
        /// <summary>
        /// [BETA] Remove a date from a calendar
        /// </summary>
        /// <remarks>
        /// Remove a date from a calendar.
        /// </remarks>
        /// <exception cref="Lusid.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scope">Scope of the calendar</param>
        /// <param name="code">Code of the calendar</param>
        /// <param name="dateId">Identifier of the date to be removed</param>
        /// <returns>CalendarDate</returns>
        CalendarDate DeleteDateFromCalendar (string scope, string code, string dateId);

        /// <summary>
        /// [BETA] Remove a date from a calendar
        /// </summary>
        /// <remarks>
        /// Remove a date from a calendar.
        /// </remarks>
        /// <exception cref="Lusid.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scope">Scope of the calendar</param>
        /// <param name="code">Code of the calendar</param>
        /// <param name="dateId">Identifier of the date to be removed</param>
        /// <returns>ApiResponse of CalendarDate</returns>
        ApiResponse<CalendarDate> DeleteDateFromCalendarWithHttpInfo (string scope, string code, string dateId);
        /// <summary>
        /// [EXPERIMENTAL] Generate an ordered schedule of dates.
        /// </summary>
        /// <remarks>
        /// Returns an ordered array of dates. The dates will only fall on business  days as defined by the scope and calendar codes in the valuation schedule.                Valuations are made at a frequency defined by the valuation schedule&#39;s tenor, e.g. every day (\&quot;1D\&quot;),  every other week (\&quot;2W\&quot;) etc. These dates will be adjusted onto business days as defined by the schedule&#39;s  rollConvention.
        /// </remarks>
        /// <exception cref="Lusid.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scope">Scope of the calendars to use</param>
        /// <param name="valuationSchedule">The ValuationSchedule to generate schedule dates from</param>
        /// <param name="asAt">Optional AsAt for searching the calendar store. Defaults to Latest. (optional)</param>
        /// <returns>ICollection&lt;DateTimeOffset?&gt;</returns>
        ICollection<DateTimeOffset?> GenerateSchedule (string scope, ValuationSchedule valuationSchedule, DateTimeOffset? asAt = null);

        /// <summary>
        /// [EXPERIMENTAL] Generate an ordered schedule of dates.
        /// </summary>
        /// <remarks>
        /// Returns an ordered array of dates. The dates will only fall on business  days as defined by the scope and calendar codes in the valuation schedule.                Valuations are made at a frequency defined by the valuation schedule&#39;s tenor, e.g. every day (\&quot;1D\&quot;),  every other week (\&quot;2W\&quot;) etc. These dates will be adjusted onto business days as defined by the schedule&#39;s  rollConvention.
        /// </remarks>
        /// <exception cref="Lusid.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scope">Scope of the calendars to use</param>
        /// <param name="valuationSchedule">The ValuationSchedule to generate schedule dates from</param>
        /// <param name="asAt">Optional AsAt for searching the calendar store. Defaults to Latest. (optional)</param>
        /// <returns>ApiResponse of ICollection&lt;DateTimeOffset?&gt;</returns>
        ApiResponse<ICollection<DateTimeOffset?>> GenerateScheduleWithHttpInfo (string scope, ValuationSchedule valuationSchedule, DateTimeOffset? asAt = null);
        /// <summary>
        /// [BETA] Get a calendar in its generic form
        /// </summary>
        /// <remarks>
        /// Retrieve a generic calendar by a specific ID at a point in AsAt time
        /// </remarks>
        /// <exception cref="Lusid.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scope">Scope of the calendar identifier</param>
        /// <param name="code">Code of the calendar identifier</param>
        /// <param name="asAt">The AsAt datetime at which to retrieve the calendar (optional)</param>
        /// <returns>Calendar</returns>
        Calendar GetCalendar (string scope, string code, DateTimeOffset? asAt = null);

        /// <summary>
        /// [BETA] Get a calendar in its generic form
        /// </summary>
        /// <remarks>
        /// Retrieve a generic calendar by a specific ID at a point in AsAt time
        /// </remarks>
        /// <exception cref="Lusid.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scope">Scope of the calendar identifier</param>
        /// <param name="code">Code of the calendar identifier</param>
        /// <param name="asAt">The AsAt datetime at which to retrieve the calendar (optional)</param>
        /// <returns>ApiResponse of Calendar</returns>
        ApiResponse<Calendar> GetCalendarWithHttpInfo (string scope, string code, DateTimeOffset? asAt = null);
        /// <summary>
        /// [BETA] Get dates for a specific calendar
        /// </summary>
        /// <remarks>
        /// Get dates from a specific calendar within a specific window of effective time, at a point in AsAt time.  Providing an id filter can further refine the results.
        /// </remarks>
        /// <exception cref="Lusid.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scope">Scope of the calendar</param>
        /// <param name="code">Code of the calendar</param>
        /// <param name="fromEffectiveAt">Where the effective window of dates should begin from (optional)</param>
        /// <param name="toEffectiveAt">Where the effective window of dates should end (optional)</param>
        /// <param name="asAt">AsAt the dates should be retrieved at (optional)</param>
        /// <param name="idFilter">An additional filter that will filter dates based on their identifer (optional)</param>
        /// <returns>ResourceListOfCalendarDate</returns>
        ResourceListOfCalendarDate GetDates (string scope, string code, DateTimeOrCutLabel fromEffectiveAt = null, DateTimeOrCutLabel toEffectiveAt = null, DateTimeOffset? asAt = null, List<string> idFilter = null);

        /// <summary>
        /// [BETA] Get dates for a specific calendar
        /// </summary>
        /// <remarks>
        /// Get dates from a specific calendar within a specific window of effective time, at a point in AsAt time.  Providing an id filter can further refine the results.
        /// </remarks>
        /// <exception cref="Lusid.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scope">Scope of the calendar</param>
        /// <param name="code">Code of the calendar</param>
        /// <param name="fromEffectiveAt">Where the effective window of dates should begin from (optional)</param>
        /// <param name="toEffectiveAt">Where the effective window of dates should end (optional)</param>
        /// <param name="asAt">AsAt the dates should be retrieved at (optional)</param>
        /// <param name="idFilter">An additional filter that will filter dates based on their identifer (optional)</param>
        /// <returns>ApiResponse of ResourceListOfCalendarDate</returns>
        ApiResponse<ResourceListOfCalendarDate> GetDatesWithHttpInfo (string scope, string code, DateTimeOrCutLabel fromEffectiveAt = null, DateTimeOrCutLabel toEffectiveAt = null, DateTimeOffset? asAt = null, List<string> idFilter = null);
        /// <summary>
        /// [BETA] Check whether a DateTime is a \&quot;Business DateTime\&quot;
        /// </summary>
        /// <remarks>
        /// A Business DateTime is defined as a point in time that:      * Does not represent a day that overlaps with the calendars WeekendMask      * If the calendar is a \&quot;Holiday Calendar\&quot; Does not overlap with any dates in the calendar      * If the calendar is a \&quot;TradingHours Calendar\&quot; Does overlap with a date in the calendar                All dates specified must be UTC and the upper bound of a calendar is not inclusive   e.g. From: 2020-12-25-00-00-00        To: 2020-12-26-00-00-00  IsBusinessDay(2020-12-26-00-00-00) &#x3D;&#x3D; false
        /// </remarks>
        /// <exception cref="Lusid.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dateTime">DateTime to check - This DateTime must be UTC</param>
        /// <param name="scope">Scope of the calendar</param>
        /// <param name="code">Code of the calendar</param>
        /// <param name="asAt">AsAt for the request (optional)</param>
        /// <returns>IsBusinessDayResponse</returns>
        IsBusinessDayResponse IsBusinessDateTime (DateTimeOffset? dateTime, string scope, string code, DateTimeOffset? asAt = null);

        /// <summary>
        /// [BETA] Check whether a DateTime is a \&quot;Business DateTime\&quot;
        /// </summary>
        /// <remarks>
        /// A Business DateTime is defined as a point in time that:      * Does not represent a day that overlaps with the calendars WeekendMask      * If the calendar is a \&quot;Holiday Calendar\&quot; Does not overlap with any dates in the calendar      * If the calendar is a \&quot;TradingHours Calendar\&quot; Does overlap with a date in the calendar                All dates specified must be UTC and the upper bound of a calendar is not inclusive   e.g. From: 2020-12-25-00-00-00        To: 2020-12-26-00-00-00  IsBusinessDay(2020-12-26-00-00-00) &#x3D;&#x3D; false
        /// </remarks>
        /// <exception cref="Lusid.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dateTime">DateTime to check - This DateTime must be UTC</param>
        /// <param name="scope">Scope of the calendar</param>
        /// <param name="code">Code of the calendar</param>
        /// <param name="asAt">AsAt for the request (optional)</param>
        /// <returns>ApiResponse of IsBusinessDayResponse</returns>
        ApiResponse<IsBusinessDayResponse> IsBusinessDateTimeWithHttpInfo (DateTimeOffset? dateTime, string scope, string code, DateTimeOffset? asAt = null);
        /// <summary>
        /// [BETA] List Calenders
        /// </summary>
        /// <remarks>
        /// List calendars at a point in AsAt time.
        /// </remarks>
        /// <exception cref="Lusid.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="asAt">The AsAt datetime at which to retrieve the calendars (optional)</param>
        /// <param name="page">The pagination token to use to continue listing calendars from a previous call to list calendars.              This value is returned from the previous call. If a pagination token is provided the sortBy, filter, and asAt fields              must not have changed since the original request. Also, if set, a start value cannot be provided. (optional)</param>
        /// <param name="limit">When paginating, limit the number of returned results to this many. (optional)</param>
        /// <param name="filter">Expression to filter the result set. Read more about filtering results from LUSID here https://support.lusid.com/filtering-results-from-lusid. (optional)</param>
        /// <returns>PagedResourceListOfCalendar</returns>
        PagedResourceListOfCalendar ListCalendars (DateTimeOffset? asAt = null, string page = null, int? limit = null, string filter = null);

        /// <summary>
        /// [BETA] List Calenders
        /// </summary>
        /// <remarks>
        /// List calendars at a point in AsAt time.
        /// </remarks>
        /// <exception cref="Lusid.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="asAt">The AsAt datetime at which to retrieve the calendars (optional)</param>
        /// <param name="page">The pagination token to use to continue listing calendars from a previous call to list calendars.              This value is returned from the previous call. If a pagination token is provided the sortBy, filter, and asAt fields              must not have changed since the original request. Also, if set, a start value cannot be provided. (optional)</param>
        /// <param name="limit">When paginating, limit the number of returned results to this many. (optional)</param>
        /// <param name="filter">Expression to filter the result set. Read more about filtering results from LUSID here https://support.lusid.com/filtering-results-from-lusid. (optional)</param>
        /// <returns>ApiResponse of PagedResourceListOfCalendar</returns>
        ApiResponse<PagedResourceListOfCalendar> ListCalendarsWithHttpInfo (DateTimeOffset? asAt = null, string page = null, int? limit = null, string filter = null);
        /// <summary>
        /// [BETA] List all calenders in a specified scope
        /// </summary>
        /// <remarks>
        /// List calendars at a point in AsAt time.
        /// </remarks>
        /// <exception cref="Lusid.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scope">Scope of the calendars</param>
        /// <param name="asAt">The AsAt datetime at which to retrieve the calendars (optional)</param>
        /// <param name="page">The pagination token to use to continue listing calendars from a previous call to list calendars.              This value is returned from the previous call. If a pagination token is provided the sortBy, filter, and asAt fields              must not have changed since the original request. Also, if set, a start value cannot be provided. (optional)</param>
        /// <param name="start">When paginating, skip this number of results. (optional)</param>
        /// <param name="limit">When paginating, limit the number of returned results to this many. (optional)</param>
        /// <param name="filter">Expression to filter the result set. Read more about filtering results from LUSID here https://support.lusid.com/filtering-results-from-lusid. (optional)</param>
        /// <returns>PagedResourceListOfCalendar</returns>
        PagedResourceListOfCalendar ListCalendarsInScope (string scope, DateTimeOffset? asAt = null, string page = null, int? start = null, int? limit = null, string filter = null);

        /// <summary>
        /// [BETA] List all calenders in a specified scope
        /// </summary>
        /// <remarks>
        /// List calendars at a point in AsAt time.
        /// </remarks>
        /// <exception cref="Lusid.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scope">Scope of the calendars</param>
        /// <param name="asAt">The AsAt datetime at which to retrieve the calendars (optional)</param>
        /// <param name="page">The pagination token to use to continue listing calendars from a previous call to list calendars.              This value is returned from the previous call. If a pagination token is provided the sortBy, filter, and asAt fields              must not have changed since the original request. Also, if set, a start value cannot be provided. (optional)</param>
        /// <param name="start">When paginating, skip this number of results. (optional)</param>
        /// <param name="limit">When paginating, limit the number of returned results to this many. (optional)</param>
        /// <param name="filter">Expression to filter the result set. Read more about filtering results from LUSID here https://support.lusid.com/filtering-results-from-lusid. (optional)</param>
        /// <returns>ApiResponse of PagedResourceListOfCalendar</returns>
        ApiResponse<PagedResourceListOfCalendar> ListCalendarsInScopeWithHttpInfo (string scope, DateTimeOffset? asAt = null, string page = null, int? start = null, int? limit = null, string filter = null);
        /// <summary>
        /// [BETA] Update a calendar
        /// </summary>
        /// <remarks>
        /// Update the calendars WeekendMask, SourceProvider or Properties
        /// </remarks>
        /// <exception cref="Lusid.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scope">Scope of the request</param>
        /// <param name="code">Code of the request</param>
        /// <param name="updateCalendarRequest">The new state of the calendar</param>
        /// <returns>Calendar</returns>
        Calendar UpdateCalendar (string scope, string code, UpdateCalendarRequest updateCalendarRequest);

        /// <summary>
        /// [BETA] Update a calendar
        /// </summary>
        /// <remarks>
        /// Update the calendars WeekendMask, SourceProvider or Properties
        /// </remarks>
        /// <exception cref="Lusid.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scope">Scope of the request</param>
        /// <param name="code">Code of the request</param>
        /// <param name="updateCalendarRequest">The new state of the calendar</param>
        /// <returns>ApiResponse of Calendar</returns>
        ApiResponse<Calendar> UpdateCalendarWithHttpInfo (string scope, string code, UpdateCalendarRequest updateCalendarRequest);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// [EXPERIMENTAL] Adds the requested number of Business Days to the provided date.
        /// </summary>
        /// <remarks>
        /// A Business day is defined as a point in time that:      * Does not represent a day in the calendar&#39;s weekend      * Does not represent a day in the calendar&#39;s list of holidays (e.g. Christmas Day in the UK)                 All dates specified must be UTC and the upper bound of a calendar is not inclusive                 e.g. From: 2020-12-24-00-00-00:       Adding 3 business days returns 2020-12-30, assuming Saturday and Sunday are weekends, and the 25th and 28th are holidays.       Adding -2 business days returns 2020-12-22 under the same assumptions.                If the provided number of days to add is zero, returns a failure.
        /// </remarks>
        /// <exception cref="Lusid.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scope">Scope within which to search for the calendars</param>
        /// <param name="addBusinessDaysToDateRequest">Request Details: start date, number of days to add (which can be negative, but not zero), calendar codes and optionally an AsAt date for searching the calendar store</param>
        /// <returns>Task of AddBusinessDaysToDateResponse</returns>
        System.Threading.Tasks.Task<AddBusinessDaysToDateResponse> AddBusinessDaysToDateAsync (string scope, AddBusinessDaysToDateRequest addBusinessDaysToDateRequest);

        /// <summary>
        /// [EXPERIMENTAL] Adds the requested number of Business Days to the provided date.
        /// </summary>
        /// <remarks>
        /// A Business day is defined as a point in time that:      * Does not represent a day in the calendar&#39;s weekend      * Does not represent a day in the calendar&#39;s list of holidays (e.g. Christmas Day in the UK)                 All dates specified must be UTC and the upper bound of a calendar is not inclusive                 e.g. From: 2020-12-24-00-00-00:       Adding 3 business days returns 2020-12-30, assuming Saturday and Sunday are weekends, and the 25th and 28th are holidays.       Adding -2 business days returns 2020-12-22 under the same assumptions.                If the provided number of days to add is zero, returns a failure.
        /// </remarks>
        /// <exception cref="Lusid.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scope">Scope within which to search for the calendars</param>
        /// <param name="addBusinessDaysToDateRequest">Request Details: start date, number of days to add (which can be negative, but not zero), calendar codes and optionally an AsAt date for searching the calendar store</param>
        /// <returns>Task of ApiResponse (AddBusinessDaysToDateResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<AddBusinessDaysToDateResponse>> AddBusinessDaysToDateAsyncWithHttpInfo (string scope, AddBusinessDaysToDateRequest addBusinessDaysToDateRequest);
        /// <summary>
        /// [BETA] Add a date to a calendar
        /// </summary>
        /// <remarks>
        /// Add an event to the calendar. These Events can be a maximum of 24 hours and must be specified in UTC.  A local date will be calculated by the system and applied to the calendar before processing.
        /// </remarks>
        /// <exception cref="Lusid.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scope">Scope of the calendar</param>
        /// <param name="code">Code of the calendar</param>
        /// <param name="createDateRequest">Add date to calendar request</param>
        /// <returns>Task of CalendarDate</returns>
        System.Threading.Tasks.Task<CalendarDate> AddDateToCalendarAsync (string scope, string code, CreateDateRequest createDateRequest);

        /// <summary>
        /// [BETA] Add a date to a calendar
        /// </summary>
        /// <remarks>
        /// Add an event to the calendar. These Events can be a maximum of 24 hours and must be specified in UTC.  A local date will be calculated by the system and applied to the calendar before processing.
        /// </remarks>
        /// <exception cref="Lusid.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scope">Scope of the calendar</param>
        /// <param name="code">Code of the calendar</param>
        /// <param name="createDateRequest">Add date to calendar request</param>
        /// <returns>Task of ApiResponse (CalendarDate)</returns>
        System.Threading.Tasks.Task<ApiResponse<CalendarDate>> AddDateToCalendarAsyncWithHttpInfo (string scope, string code, CreateDateRequest createDateRequest);
        /// <summary>
        /// [BETA] Create a calendar in its generic form
        /// </summary>
        /// <remarks>
        /// Create a calendar in a generic form which can be used to store date events.
        /// </remarks>
        /// <exception cref="Lusid.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createCalendarRequest">A request to create the calendar</param>
        /// <returns>Task of Calendar</returns>
        System.Threading.Tasks.Task<Calendar> CreateCalendarAsync (CreateCalendarRequest createCalendarRequest);

        /// <summary>
        /// [BETA] Create a calendar in its generic form
        /// </summary>
        /// <remarks>
        /// Create a calendar in a generic form which can be used to store date events.
        /// </remarks>
        /// <exception cref="Lusid.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createCalendarRequest">A request to create the calendar</param>
        /// <returns>Task of ApiResponse (Calendar)</returns>
        System.Threading.Tasks.Task<ApiResponse<Calendar>> CreateCalendarAsyncWithHttpInfo (CreateCalendarRequest createCalendarRequest);
        /// <summary>
        /// [BETA] Delete a calendar
        /// </summary>
        /// <remarks>
        /// Delete a calendar and all of its respective dates
        /// </remarks>
        /// <exception cref="Lusid.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scope">Scope of the calendar</param>
        /// <param name="code">Code of the calendar</param>
        /// <returns>Task of Calendar</returns>
        System.Threading.Tasks.Task<Calendar> DeleteCalendarAsync (string scope, string code);

        /// <summary>
        /// [BETA] Delete a calendar
        /// </summary>
        /// <remarks>
        /// Delete a calendar and all of its respective dates
        /// </remarks>
        /// <exception cref="Lusid.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scope">Scope of the calendar</param>
        /// <param name="code">Code of the calendar</param>
        /// <returns>Task of ApiResponse (Calendar)</returns>
        System.Threading.Tasks.Task<ApiResponse<Calendar>> DeleteCalendarAsyncWithHttpInfo (string scope, string code);
        /// <summary>
        /// [BETA] Remove a date from a calendar
        /// </summary>
        /// <remarks>
        /// Remove a date from a calendar.
        /// </remarks>
        /// <exception cref="Lusid.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scope">Scope of the calendar</param>
        /// <param name="code">Code of the calendar</param>
        /// <param name="dateId">Identifier of the date to be removed</param>
        /// <returns>Task of CalendarDate</returns>
        System.Threading.Tasks.Task<CalendarDate> DeleteDateFromCalendarAsync (string scope, string code, string dateId);

        /// <summary>
        /// [BETA] Remove a date from a calendar
        /// </summary>
        /// <remarks>
        /// Remove a date from a calendar.
        /// </remarks>
        /// <exception cref="Lusid.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scope">Scope of the calendar</param>
        /// <param name="code">Code of the calendar</param>
        /// <param name="dateId">Identifier of the date to be removed</param>
        /// <returns>Task of ApiResponse (CalendarDate)</returns>
        System.Threading.Tasks.Task<ApiResponse<CalendarDate>> DeleteDateFromCalendarAsyncWithHttpInfo (string scope, string code, string dateId);
        /// <summary>
        /// [EXPERIMENTAL] Generate an ordered schedule of dates.
        /// </summary>
        /// <remarks>
        /// Returns an ordered array of dates. The dates will only fall on business  days as defined by the scope and calendar codes in the valuation schedule.                Valuations are made at a frequency defined by the valuation schedule&#39;s tenor, e.g. every day (\&quot;1D\&quot;),  every other week (\&quot;2W\&quot;) etc. These dates will be adjusted onto business days as defined by the schedule&#39;s  rollConvention.
        /// </remarks>
        /// <exception cref="Lusid.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scope">Scope of the calendars to use</param>
        /// <param name="valuationSchedule">The ValuationSchedule to generate schedule dates from</param>
        /// <param name="asAt">Optional AsAt for searching the calendar store. Defaults to Latest. (optional)</param>
        /// <returns>Task of ICollection&lt;DateTimeOffset?&gt;</returns>
        System.Threading.Tasks.Task<ICollection<DateTimeOffset?>> GenerateScheduleAsync (string scope, ValuationSchedule valuationSchedule, DateTimeOffset? asAt = null);

        /// <summary>
        /// [EXPERIMENTAL] Generate an ordered schedule of dates.
        /// </summary>
        /// <remarks>
        /// Returns an ordered array of dates. The dates will only fall on business  days as defined by the scope and calendar codes in the valuation schedule.                Valuations are made at a frequency defined by the valuation schedule&#39;s tenor, e.g. every day (\&quot;1D\&quot;),  every other week (\&quot;2W\&quot;) etc. These dates will be adjusted onto business days as defined by the schedule&#39;s  rollConvention.
        /// </remarks>
        /// <exception cref="Lusid.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scope">Scope of the calendars to use</param>
        /// <param name="valuationSchedule">The ValuationSchedule to generate schedule dates from</param>
        /// <param name="asAt">Optional AsAt for searching the calendar store. Defaults to Latest. (optional)</param>
        /// <returns>Task of ApiResponse (ICollection&lt;DateTimeOffset?&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<ICollection<DateTimeOffset?>>> GenerateScheduleAsyncWithHttpInfo (string scope, ValuationSchedule valuationSchedule, DateTimeOffset? asAt = null);
        /// <summary>
        /// [BETA] Get a calendar in its generic form
        /// </summary>
        /// <remarks>
        /// Retrieve a generic calendar by a specific ID at a point in AsAt time
        /// </remarks>
        /// <exception cref="Lusid.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scope">Scope of the calendar identifier</param>
        /// <param name="code">Code of the calendar identifier</param>
        /// <param name="asAt">The AsAt datetime at which to retrieve the calendar (optional)</param>
        /// <returns>Task of Calendar</returns>
        System.Threading.Tasks.Task<Calendar> GetCalendarAsync (string scope, string code, DateTimeOffset? asAt = null);

        /// <summary>
        /// [BETA] Get a calendar in its generic form
        /// </summary>
        /// <remarks>
        /// Retrieve a generic calendar by a specific ID at a point in AsAt time
        /// </remarks>
        /// <exception cref="Lusid.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scope">Scope of the calendar identifier</param>
        /// <param name="code">Code of the calendar identifier</param>
        /// <param name="asAt">The AsAt datetime at which to retrieve the calendar (optional)</param>
        /// <returns>Task of ApiResponse (Calendar)</returns>
        System.Threading.Tasks.Task<ApiResponse<Calendar>> GetCalendarAsyncWithHttpInfo (string scope, string code, DateTimeOffset? asAt = null);
        /// <summary>
        /// [BETA] Get dates for a specific calendar
        /// </summary>
        /// <remarks>
        /// Get dates from a specific calendar within a specific window of effective time, at a point in AsAt time.  Providing an id filter can further refine the results.
        /// </remarks>
        /// <exception cref="Lusid.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scope">Scope of the calendar</param>
        /// <param name="code">Code of the calendar</param>
        /// <param name="fromEffectiveAt">Where the effective window of dates should begin from (optional)</param>
        /// <param name="toEffectiveAt">Where the effective window of dates should end (optional)</param>
        /// <param name="asAt">AsAt the dates should be retrieved at (optional)</param>
        /// <param name="idFilter">An additional filter that will filter dates based on their identifer (optional)</param>
        /// <returns>Task of ResourceListOfCalendarDate</returns>
        System.Threading.Tasks.Task<ResourceListOfCalendarDate> GetDatesAsync (string scope, string code, DateTimeOrCutLabel fromEffectiveAt = null, DateTimeOrCutLabel toEffectiveAt = null, DateTimeOffset? asAt = null, List<string> idFilter = null);

        /// <summary>
        /// [BETA] Get dates for a specific calendar
        /// </summary>
        /// <remarks>
        /// Get dates from a specific calendar within a specific window of effective time, at a point in AsAt time.  Providing an id filter can further refine the results.
        /// </remarks>
        /// <exception cref="Lusid.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scope">Scope of the calendar</param>
        /// <param name="code">Code of the calendar</param>
        /// <param name="fromEffectiveAt">Where the effective window of dates should begin from (optional)</param>
        /// <param name="toEffectiveAt">Where the effective window of dates should end (optional)</param>
        /// <param name="asAt">AsAt the dates should be retrieved at (optional)</param>
        /// <param name="idFilter">An additional filter that will filter dates based on their identifer (optional)</param>
        /// <returns>Task of ApiResponse (ResourceListOfCalendarDate)</returns>
        System.Threading.Tasks.Task<ApiResponse<ResourceListOfCalendarDate>> GetDatesAsyncWithHttpInfo (string scope, string code, DateTimeOrCutLabel fromEffectiveAt = null, DateTimeOrCutLabel toEffectiveAt = null, DateTimeOffset? asAt = null, List<string> idFilter = null);
        /// <summary>
        /// [BETA] Check whether a DateTime is a \&quot;Business DateTime\&quot;
        /// </summary>
        /// <remarks>
        /// A Business DateTime is defined as a point in time that:      * Does not represent a day that overlaps with the calendars WeekendMask      * If the calendar is a \&quot;Holiday Calendar\&quot; Does not overlap with any dates in the calendar      * If the calendar is a \&quot;TradingHours Calendar\&quot; Does overlap with a date in the calendar                All dates specified must be UTC and the upper bound of a calendar is not inclusive   e.g. From: 2020-12-25-00-00-00        To: 2020-12-26-00-00-00  IsBusinessDay(2020-12-26-00-00-00) &#x3D;&#x3D; false
        /// </remarks>
        /// <exception cref="Lusid.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dateTime">DateTime to check - This DateTime must be UTC</param>
        /// <param name="scope">Scope of the calendar</param>
        /// <param name="code">Code of the calendar</param>
        /// <param name="asAt">AsAt for the request (optional)</param>
        /// <returns>Task of IsBusinessDayResponse</returns>
        System.Threading.Tasks.Task<IsBusinessDayResponse> IsBusinessDateTimeAsync (DateTimeOffset? dateTime, string scope, string code, DateTimeOffset? asAt = null);

        /// <summary>
        /// [BETA] Check whether a DateTime is a \&quot;Business DateTime\&quot;
        /// </summary>
        /// <remarks>
        /// A Business DateTime is defined as a point in time that:      * Does not represent a day that overlaps with the calendars WeekendMask      * If the calendar is a \&quot;Holiday Calendar\&quot; Does not overlap with any dates in the calendar      * If the calendar is a \&quot;TradingHours Calendar\&quot; Does overlap with a date in the calendar                All dates specified must be UTC and the upper bound of a calendar is not inclusive   e.g. From: 2020-12-25-00-00-00        To: 2020-12-26-00-00-00  IsBusinessDay(2020-12-26-00-00-00) &#x3D;&#x3D; false
        /// </remarks>
        /// <exception cref="Lusid.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dateTime">DateTime to check - This DateTime must be UTC</param>
        /// <param name="scope">Scope of the calendar</param>
        /// <param name="code">Code of the calendar</param>
        /// <param name="asAt">AsAt for the request (optional)</param>
        /// <returns>Task of ApiResponse (IsBusinessDayResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<IsBusinessDayResponse>> IsBusinessDateTimeAsyncWithHttpInfo (DateTimeOffset? dateTime, string scope, string code, DateTimeOffset? asAt = null);
        /// <summary>
        /// [BETA] List Calenders
        /// </summary>
        /// <remarks>
        /// List calendars at a point in AsAt time.
        /// </remarks>
        /// <exception cref="Lusid.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="asAt">The AsAt datetime at which to retrieve the calendars (optional)</param>
        /// <param name="page">The pagination token to use to continue listing calendars from a previous call to list calendars.              This value is returned from the previous call. If a pagination token is provided the sortBy, filter, and asAt fields              must not have changed since the original request. Also, if set, a start value cannot be provided. (optional)</param>
        /// <param name="limit">When paginating, limit the number of returned results to this many. (optional)</param>
        /// <param name="filter">Expression to filter the result set. Read more about filtering results from LUSID here https://support.lusid.com/filtering-results-from-lusid. (optional)</param>
        /// <returns>Task of PagedResourceListOfCalendar</returns>
        System.Threading.Tasks.Task<PagedResourceListOfCalendar> ListCalendarsAsync (DateTimeOffset? asAt = null, string page = null, int? limit = null, string filter = null);

        /// <summary>
        /// [BETA] List Calenders
        /// </summary>
        /// <remarks>
        /// List calendars at a point in AsAt time.
        /// </remarks>
        /// <exception cref="Lusid.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="asAt">The AsAt datetime at which to retrieve the calendars (optional)</param>
        /// <param name="page">The pagination token to use to continue listing calendars from a previous call to list calendars.              This value is returned from the previous call. If a pagination token is provided the sortBy, filter, and asAt fields              must not have changed since the original request. Also, if set, a start value cannot be provided. (optional)</param>
        /// <param name="limit">When paginating, limit the number of returned results to this many. (optional)</param>
        /// <param name="filter">Expression to filter the result set. Read more about filtering results from LUSID here https://support.lusid.com/filtering-results-from-lusid. (optional)</param>
        /// <returns>Task of ApiResponse (PagedResourceListOfCalendar)</returns>
        System.Threading.Tasks.Task<ApiResponse<PagedResourceListOfCalendar>> ListCalendarsAsyncWithHttpInfo (DateTimeOffset? asAt = null, string page = null, int? limit = null, string filter = null);
        /// <summary>
        /// [BETA] List all calenders in a specified scope
        /// </summary>
        /// <remarks>
        /// List calendars at a point in AsAt time.
        /// </remarks>
        /// <exception cref="Lusid.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scope">Scope of the calendars</param>
        /// <param name="asAt">The AsAt datetime at which to retrieve the calendars (optional)</param>
        /// <param name="page">The pagination token to use to continue listing calendars from a previous call to list calendars.              This value is returned from the previous call. If a pagination token is provided the sortBy, filter, and asAt fields              must not have changed since the original request. Also, if set, a start value cannot be provided. (optional)</param>
        /// <param name="start">When paginating, skip this number of results. (optional)</param>
        /// <param name="limit">When paginating, limit the number of returned results to this many. (optional)</param>
        /// <param name="filter">Expression to filter the result set. Read more about filtering results from LUSID here https://support.lusid.com/filtering-results-from-lusid. (optional)</param>
        /// <returns>Task of PagedResourceListOfCalendar</returns>
        System.Threading.Tasks.Task<PagedResourceListOfCalendar> ListCalendarsInScopeAsync (string scope, DateTimeOffset? asAt = null, string page = null, int? start = null, int? limit = null, string filter = null);

        /// <summary>
        /// [BETA] List all calenders in a specified scope
        /// </summary>
        /// <remarks>
        /// List calendars at a point in AsAt time.
        /// </remarks>
        /// <exception cref="Lusid.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scope">Scope of the calendars</param>
        /// <param name="asAt">The AsAt datetime at which to retrieve the calendars (optional)</param>
        /// <param name="page">The pagination token to use to continue listing calendars from a previous call to list calendars.              This value is returned from the previous call. If a pagination token is provided the sortBy, filter, and asAt fields              must not have changed since the original request. Also, if set, a start value cannot be provided. (optional)</param>
        /// <param name="start">When paginating, skip this number of results. (optional)</param>
        /// <param name="limit">When paginating, limit the number of returned results to this many. (optional)</param>
        /// <param name="filter">Expression to filter the result set. Read more about filtering results from LUSID here https://support.lusid.com/filtering-results-from-lusid. (optional)</param>
        /// <returns>Task of ApiResponse (PagedResourceListOfCalendar)</returns>
        System.Threading.Tasks.Task<ApiResponse<PagedResourceListOfCalendar>> ListCalendarsInScopeAsyncWithHttpInfo (string scope, DateTimeOffset? asAt = null, string page = null, int? start = null, int? limit = null, string filter = null);
        /// <summary>
        /// [BETA] Update a calendar
        /// </summary>
        /// <remarks>
        /// Update the calendars WeekendMask, SourceProvider or Properties
        /// </remarks>
        /// <exception cref="Lusid.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scope">Scope of the request</param>
        /// <param name="code">Code of the request</param>
        /// <param name="updateCalendarRequest">The new state of the calendar</param>
        /// <returns>Task of Calendar</returns>
        System.Threading.Tasks.Task<Calendar> UpdateCalendarAsync (string scope, string code, UpdateCalendarRequest updateCalendarRequest);

        /// <summary>
        /// [BETA] Update a calendar
        /// </summary>
        /// <remarks>
        /// Update the calendars WeekendMask, SourceProvider or Properties
        /// </remarks>
        /// <exception cref="Lusid.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scope">Scope of the request</param>
        /// <param name="code">Code of the request</param>
        /// <param name="updateCalendarRequest">The new state of the calendar</param>
        /// <returns>Task of ApiResponse (Calendar)</returns>
        System.Threading.Tasks.Task<ApiResponse<Calendar>> UpdateCalendarAsyncWithHttpInfo (string scope, string code, UpdateCalendarRequest updateCalendarRequest);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class CalendarsApi : ICalendarsApi
    {
        private Lusid.Sdk.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="CalendarsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public CalendarsApi(String basePath)
        {
            this.Configuration = new Lusid.Sdk.Client.Configuration { BasePath = basePath };

            ExceptionFactory = Lusid.Sdk.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="CalendarsApi"/> class
        /// </summary>
        /// <returns></returns>
        public CalendarsApi()
        {
            this.Configuration = Lusid.Sdk.Client.Configuration.Default;

            ExceptionFactory = Lusid.Sdk.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="CalendarsApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public CalendarsApi(Lusid.Sdk.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Lusid.Sdk.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = Lusid.Sdk.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Lusid.Sdk.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Lusid.Sdk.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// [EXPERIMENTAL] Adds the requested number of Business Days to the provided date. A Business day is defined as a point in time that:      * Does not represent a day in the calendar&#39;s weekend      * Does not represent a day in the calendar&#39;s list of holidays (e.g. Christmas Day in the UK)                 All dates specified must be UTC and the upper bound of a calendar is not inclusive                 e.g. From: 2020-12-24-00-00-00:       Adding 3 business days returns 2020-12-30, assuming Saturday and Sunday are weekends, and the 25th and 28th are holidays.       Adding -2 business days returns 2020-12-22 under the same assumptions.                If the provided number of days to add is zero, returns a failure.
        /// </summary>
        /// <exception cref="Lusid.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scope">Scope within which to search for the calendars</param>
        /// <param name="addBusinessDaysToDateRequest">Request Details: start date, number of days to add (which can be negative, but not zero), calendar codes and optionally an AsAt date for searching the calendar store</param>
        /// <returns>AddBusinessDaysToDateResponse</returns>
        public AddBusinessDaysToDateResponse AddBusinessDaysToDate (string scope, AddBusinessDaysToDateRequest addBusinessDaysToDateRequest)
        {
             ApiResponse<AddBusinessDaysToDateResponse> localVarResponse = AddBusinessDaysToDateWithHttpInfo(scope, addBusinessDaysToDateRequest);
             return localVarResponse.Data;
        }

        /// <summary>
        /// [EXPERIMENTAL] Adds the requested number of Business Days to the provided date. A Business day is defined as a point in time that:      * Does not represent a day in the calendar&#39;s weekend      * Does not represent a day in the calendar&#39;s list of holidays (e.g. Christmas Day in the UK)                 All dates specified must be UTC and the upper bound of a calendar is not inclusive                 e.g. From: 2020-12-24-00-00-00:       Adding 3 business days returns 2020-12-30, assuming Saturday and Sunday are weekends, and the 25th and 28th are holidays.       Adding -2 business days returns 2020-12-22 under the same assumptions.                If the provided number of days to add is zero, returns a failure.
        /// </summary>
        /// <exception cref="Lusid.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scope">Scope within which to search for the calendars</param>
        /// <param name="addBusinessDaysToDateRequest">Request Details: start date, number of days to add (which can be negative, but not zero), calendar codes and optionally an AsAt date for searching the calendar store</param>
        /// <returns>ApiResponse of AddBusinessDaysToDateResponse</returns>
        public ApiResponse< AddBusinessDaysToDateResponse > AddBusinessDaysToDateWithHttpInfo (string scope, AddBusinessDaysToDateRequest addBusinessDaysToDateRequest)
        {
            // verify the required parameter 'scope' is set
            if (scope == null)
                throw new ApiException(400, "Missing required parameter 'scope' when calling CalendarsApi->AddBusinessDaysToDate");
            // verify the required parameter 'addBusinessDaysToDateRequest' is set
            if (addBusinessDaysToDateRequest == null)
                throw new ApiException(400, "Missing required parameter 'addBusinessDaysToDateRequest' when calling CalendarsApi->AddBusinessDaysToDate");

            var localVarPath = "./api/calendars/businessday/{scope}/add";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (scope != null) localVarPathParams.Add("scope", this.Configuration.ApiClient.ParameterToString(scope)); // path parameter
            if (addBusinessDaysToDateRequest != null && addBusinessDaysToDateRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(addBusinessDaysToDateRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = addBusinessDaysToDateRequest; // byte array
            }

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            //  set the LUSID header
            localVarHeaderParams["X-LUSID-SDK-Language"] = "C#";
            localVarHeaderParams["X-LUSID-SDK-Version"] = "0.11.3424";

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddBusinessDaysToDate", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AddBusinessDaysToDateResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (AddBusinessDaysToDateResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(AddBusinessDaysToDateResponse)));
        }

        /// <summary>
        /// [EXPERIMENTAL] Adds the requested number of Business Days to the provided date. A Business day is defined as a point in time that:      * Does not represent a day in the calendar&#39;s weekend      * Does not represent a day in the calendar&#39;s list of holidays (e.g. Christmas Day in the UK)                 All dates specified must be UTC and the upper bound of a calendar is not inclusive                 e.g. From: 2020-12-24-00-00-00:       Adding 3 business days returns 2020-12-30, assuming Saturday and Sunday are weekends, and the 25th and 28th are holidays.       Adding -2 business days returns 2020-12-22 under the same assumptions.                If the provided number of days to add is zero, returns a failure.
        /// </summary>
        /// <exception cref="Lusid.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scope">Scope within which to search for the calendars</param>
        /// <param name="addBusinessDaysToDateRequest">Request Details: start date, number of days to add (which can be negative, but not zero), calendar codes and optionally an AsAt date for searching the calendar store</param>
        /// <returns>Task of AddBusinessDaysToDateResponse</returns>
        public async System.Threading.Tasks.Task<AddBusinessDaysToDateResponse> AddBusinessDaysToDateAsync (string scope, AddBusinessDaysToDateRequest addBusinessDaysToDateRequest)
        {
             ApiResponse<AddBusinessDaysToDateResponse> localVarResponse = await AddBusinessDaysToDateAsyncWithHttpInfo(scope, addBusinessDaysToDateRequest);
             return localVarResponse.Data;

        }

        /// <summary>
        /// [EXPERIMENTAL] Adds the requested number of Business Days to the provided date. A Business day is defined as a point in time that:      * Does not represent a day in the calendar&#39;s weekend      * Does not represent a day in the calendar&#39;s list of holidays (e.g. Christmas Day in the UK)                 All dates specified must be UTC and the upper bound of a calendar is not inclusive                 e.g. From: 2020-12-24-00-00-00:       Adding 3 business days returns 2020-12-30, assuming Saturday and Sunday are weekends, and the 25th and 28th are holidays.       Adding -2 business days returns 2020-12-22 under the same assumptions.                If the provided number of days to add is zero, returns a failure.
        /// </summary>
        /// <exception cref="Lusid.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scope">Scope within which to search for the calendars</param>
        /// <param name="addBusinessDaysToDateRequest">Request Details: start date, number of days to add (which can be negative, but not zero), calendar codes and optionally an AsAt date for searching the calendar store</param>
        /// <returns>Task of ApiResponse (AddBusinessDaysToDateResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<AddBusinessDaysToDateResponse>> AddBusinessDaysToDateAsyncWithHttpInfo (string scope, AddBusinessDaysToDateRequest addBusinessDaysToDateRequest)
        {
            // verify the required parameter 'scope' is set
            if (scope == null)
                throw new ApiException(400, "Missing required parameter 'scope' when calling CalendarsApi->AddBusinessDaysToDate");
            // verify the required parameter 'addBusinessDaysToDateRequest' is set
            if (addBusinessDaysToDateRequest == null)
                throw new ApiException(400, "Missing required parameter 'addBusinessDaysToDateRequest' when calling CalendarsApi->AddBusinessDaysToDate");

            var localVarPath = "./api/calendars/businessday/{scope}/add";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (scope != null) localVarPathParams.Add("scope", this.Configuration.ApiClient.ParameterToString(scope)); // path parameter
            if (addBusinessDaysToDateRequest != null && addBusinessDaysToDateRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(addBusinessDaysToDateRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = addBusinessDaysToDateRequest; // byte array
            }

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            //  set the LUSID header
            localVarHeaderParams["X-LUSID-Sdk-Language"] = "C#";
            localVarHeaderParams["X-LUSID-Sdk-Version"] = "0.11.3424";

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddBusinessDaysToDate", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AddBusinessDaysToDateResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (AddBusinessDaysToDateResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(AddBusinessDaysToDateResponse)));
        }

        /// <summary>
        /// [BETA] Add a date to a calendar Add an event to the calendar. These Events can be a maximum of 24 hours and must be specified in UTC.  A local date will be calculated by the system and applied to the calendar before processing.
        /// </summary>
        /// <exception cref="Lusid.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scope">Scope of the calendar</param>
        /// <param name="code">Code of the calendar</param>
        /// <param name="createDateRequest">Add date to calendar request</param>
        /// <returns>CalendarDate</returns>
        public CalendarDate AddDateToCalendar (string scope, string code, CreateDateRequest createDateRequest)
        {
             ApiResponse<CalendarDate> localVarResponse = AddDateToCalendarWithHttpInfo(scope, code, createDateRequest);
             return localVarResponse.Data;
        }

        /// <summary>
        /// [BETA] Add a date to a calendar Add an event to the calendar. These Events can be a maximum of 24 hours and must be specified in UTC.  A local date will be calculated by the system and applied to the calendar before processing.
        /// </summary>
        /// <exception cref="Lusid.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scope">Scope of the calendar</param>
        /// <param name="code">Code of the calendar</param>
        /// <param name="createDateRequest">Add date to calendar request</param>
        /// <returns>ApiResponse of CalendarDate</returns>
        public ApiResponse< CalendarDate > AddDateToCalendarWithHttpInfo (string scope, string code, CreateDateRequest createDateRequest)
        {
            // verify the required parameter 'scope' is set
            if (scope == null)
                throw new ApiException(400, "Missing required parameter 'scope' when calling CalendarsApi->AddDateToCalendar");
            // verify the required parameter 'code' is set
            if (code == null)
                throw new ApiException(400, "Missing required parameter 'code' when calling CalendarsApi->AddDateToCalendar");
            // verify the required parameter 'createDateRequest' is set
            if (createDateRequest == null)
                throw new ApiException(400, "Missing required parameter 'createDateRequest' when calling CalendarsApi->AddDateToCalendar");

            var localVarPath = "./api/calendars/generic/{scope}/{code}/dates";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (scope != null) localVarPathParams.Add("scope", this.Configuration.ApiClient.ParameterToString(scope)); // path parameter
            if (code != null) localVarPathParams.Add("code", this.Configuration.ApiClient.ParameterToString(code)); // path parameter
            if (createDateRequest != null && createDateRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(createDateRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = createDateRequest; // byte array
            }

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            //  set the LUSID header
            localVarHeaderParams["X-LUSID-SDK-Language"] = "C#";
            localVarHeaderParams["X-LUSID-SDK-Version"] = "0.11.3424";

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddDateToCalendar", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CalendarDate>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (CalendarDate) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(CalendarDate)));
        }

        /// <summary>
        /// [BETA] Add a date to a calendar Add an event to the calendar. These Events can be a maximum of 24 hours and must be specified in UTC.  A local date will be calculated by the system and applied to the calendar before processing.
        /// </summary>
        /// <exception cref="Lusid.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scope">Scope of the calendar</param>
        /// <param name="code">Code of the calendar</param>
        /// <param name="createDateRequest">Add date to calendar request</param>
        /// <returns>Task of CalendarDate</returns>
        public async System.Threading.Tasks.Task<CalendarDate> AddDateToCalendarAsync (string scope, string code, CreateDateRequest createDateRequest)
        {
             ApiResponse<CalendarDate> localVarResponse = await AddDateToCalendarAsyncWithHttpInfo(scope, code, createDateRequest);
             return localVarResponse.Data;

        }

        /// <summary>
        /// [BETA] Add a date to a calendar Add an event to the calendar. These Events can be a maximum of 24 hours and must be specified in UTC.  A local date will be calculated by the system and applied to the calendar before processing.
        /// </summary>
        /// <exception cref="Lusid.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scope">Scope of the calendar</param>
        /// <param name="code">Code of the calendar</param>
        /// <param name="createDateRequest">Add date to calendar request</param>
        /// <returns>Task of ApiResponse (CalendarDate)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<CalendarDate>> AddDateToCalendarAsyncWithHttpInfo (string scope, string code, CreateDateRequest createDateRequest)
        {
            // verify the required parameter 'scope' is set
            if (scope == null)
                throw new ApiException(400, "Missing required parameter 'scope' when calling CalendarsApi->AddDateToCalendar");
            // verify the required parameter 'code' is set
            if (code == null)
                throw new ApiException(400, "Missing required parameter 'code' when calling CalendarsApi->AddDateToCalendar");
            // verify the required parameter 'createDateRequest' is set
            if (createDateRequest == null)
                throw new ApiException(400, "Missing required parameter 'createDateRequest' when calling CalendarsApi->AddDateToCalendar");

            var localVarPath = "./api/calendars/generic/{scope}/{code}/dates";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (scope != null) localVarPathParams.Add("scope", this.Configuration.ApiClient.ParameterToString(scope)); // path parameter
            if (code != null) localVarPathParams.Add("code", this.Configuration.ApiClient.ParameterToString(code)); // path parameter
            if (createDateRequest != null && createDateRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(createDateRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = createDateRequest; // byte array
            }

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            //  set the LUSID header
            localVarHeaderParams["X-LUSID-Sdk-Language"] = "C#";
            localVarHeaderParams["X-LUSID-Sdk-Version"] = "0.11.3424";

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddDateToCalendar", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CalendarDate>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (CalendarDate) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(CalendarDate)));
        }

        /// <summary>
        /// [BETA] Create a calendar in its generic form Create a calendar in a generic form which can be used to store date events.
        /// </summary>
        /// <exception cref="Lusid.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createCalendarRequest">A request to create the calendar</param>
        /// <returns>Calendar</returns>
        public Calendar CreateCalendar (CreateCalendarRequest createCalendarRequest)
        {
             ApiResponse<Calendar> localVarResponse = CreateCalendarWithHttpInfo(createCalendarRequest);
             return localVarResponse.Data;
        }

        /// <summary>
        /// [BETA] Create a calendar in its generic form Create a calendar in a generic form which can be used to store date events.
        /// </summary>
        /// <exception cref="Lusid.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createCalendarRequest">A request to create the calendar</param>
        /// <returns>ApiResponse of Calendar</returns>
        public ApiResponse< Calendar > CreateCalendarWithHttpInfo (CreateCalendarRequest createCalendarRequest)
        {
            // verify the required parameter 'createCalendarRequest' is set
            if (createCalendarRequest == null)
                throw new ApiException(400, "Missing required parameter 'createCalendarRequest' when calling CalendarsApi->CreateCalendar");

            var localVarPath = "./api/calendars/generic";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (createCalendarRequest != null && createCalendarRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(createCalendarRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = createCalendarRequest; // byte array
            }

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            //  set the LUSID header
            localVarHeaderParams["X-LUSID-SDK-Language"] = "C#";
            localVarHeaderParams["X-LUSID-SDK-Version"] = "0.11.3424";

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateCalendar", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Calendar>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (Calendar) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Calendar)));
        }

        /// <summary>
        /// [BETA] Create a calendar in its generic form Create a calendar in a generic form which can be used to store date events.
        /// </summary>
        /// <exception cref="Lusid.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createCalendarRequest">A request to create the calendar</param>
        /// <returns>Task of Calendar</returns>
        public async System.Threading.Tasks.Task<Calendar> CreateCalendarAsync (CreateCalendarRequest createCalendarRequest)
        {
             ApiResponse<Calendar> localVarResponse = await CreateCalendarAsyncWithHttpInfo(createCalendarRequest);
             return localVarResponse.Data;

        }

        /// <summary>
        /// [BETA] Create a calendar in its generic form Create a calendar in a generic form which can be used to store date events.
        /// </summary>
        /// <exception cref="Lusid.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createCalendarRequest">A request to create the calendar</param>
        /// <returns>Task of ApiResponse (Calendar)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Calendar>> CreateCalendarAsyncWithHttpInfo (CreateCalendarRequest createCalendarRequest)
        {
            // verify the required parameter 'createCalendarRequest' is set
            if (createCalendarRequest == null)
                throw new ApiException(400, "Missing required parameter 'createCalendarRequest' when calling CalendarsApi->CreateCalendar");

            var localVarPath = "./api/calendars/generic";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (createCalendarRequest != null && createCalendarRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(createCalendarRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = createCalendarRequest; // byte array
            }

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            //  set the LUSID header
            localVarHeaderParams["X-LUSID-Sdk-Language"] = "C#";
            localVarHeaderParams["X-LUSID-Sdk-Version"] = "0.11.3424";

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateCalendar", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Calendar>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (Calendar) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Calendar)));
        }

        /// <summary>
        /// [BETA] Delete a calendar Delete a calendar and all of its respective dates
        /// </summary>
        /// <exception cref="Lusid.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scope">Scope of the calendar</param>
        /// <param name="code">Code of the calendar</param>
        /// <returns>Calendar</returns>
        public Calendar DeleteCalendar (string scope, string code)
        {
             ApiResponse<Calendar> localVarResponse = DeleteCalendarWithHttpInfo(scope, code);
             return localVarResponse.Data;
        }

        /// <summary>
        /// [BETA] Delete a calendar Delete a calendar and all of its respective dates
        /// </summary>
        /// <exception cref="Lusid.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scope">Scope of the calendar</param>
        /// <param name="code">Code of the calendar</param>
        /// <returns>ApiResponse of Calendar</returns>
        public ApiResponse< Calendar > DeleteCalendarWithHttpInfo (string scope, string code)
        {
            // verify the required parameter 'scope' is set
            if (scope == null)
                throw new ApiException(400, "Missing required parameter 'scope' when calling CalendarsApi->DeleteCalendar");
            // verify the required parameter 'code' is set
            if (code == null)
                throw new ApiException(400, "Missing required parameter 'code' when calling CalendarsApi->DeleteCalendar");

            var localVarPath = "./api/calendars/generic/{scope}/{code}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (scope != null) localVarPathParams.Add("scope", this.Configuration.ApiClient.ParameterToString(scope)); // path parameter
            if (code != null) localVarPathParams.Add("code", this.Configuration.ApiClient.ParameterToString(code)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            //  set the LUSID header
            localVarHeaderParams["X-LUSID-SDK-Language"] = "C#";
            localVarHeaderParams["X-LUSID-SDK-Version"] = "0.11.3424";

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteCalendar", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Calendar>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (Calendar) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Calendar)));
        }

        /// <summary>
        /// [BETA] Delete a calendar Delete a calendar and all of its respective dates
        /// </summary>
        /// <exception cref="Lusid.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scope">Scope of the calendar</param>
        /// <param name="code">Code of the calendar</param>
        /// <returns>Task of Calendar</returns>
        public async System.Threading.Tasks.Task<Calendar> DeleteCalendarAsync (string scope, string code)
        {
             ApiResponse<Calendar> localVarResponse = await DeleteCalendarAsyncWithHttpInfo(scope, code);
             return localVarResponse.Data;

        }

        /// <summary>
        /// [BETA] Delete a calendar Delete a calendar and all of its respective dates
        /// </summary>
        /// <exception cref="Lusid.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scope">Scope of the calendar</param>
        /// <param name="code">Code of the calendar</param>
        /// <returns>Task of ApiResponse (Calendar)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Calendar>> DeleteCalendarAsyncWithHttpInfo (string scope, string code)
        {
            // verify the required parameter 'scope' is set
            if (scope == null)
                throw new ApiException(400, "Missing required parameter 'scope' when calling CalendarsApi->DeleteCalendar");
            // verify the required parameter 'code' is set
            if (code == null)
                throw new ApiException(400, "Missing required parameter 'code' when calling CalendarsApi->DeleteCalendar");

            var localVarPath = "./api/calendars/generic/{scope}/{code}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (scope != null) localVarPathParams.Add("scope", this.Configuration.ApiClient.ParameterToString(scope)); // path parameter
            if (code != null) localVarPathParams.Add("code", this.Configuration.ApiClient.ParameterToString(code)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            //  set the LUSID header
            localVarHeaderParams["X-LUSID-Sdk-Language"] = "C#";
            localVarHeaderParams["X-LUSID-Sdk-Version"] = "0.11.3424";

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteCalendar", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Calendar>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (Calendar) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Calendar)));
        }

        /// <summary>
        /// [BETA] Remove a date from a calendar Remove a date from a calendar.
        /// </summary>
        /// <exception cref="Lusid.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scope">Scope of the calendar</param>
        /// <param name="code">Code of the calendar</param>
        /// <param name="dateId">Identifier of the date to be removed</param>
        /// <returns>CalendarDate</returns>
        public CalendarDate DeleteDateFromCalendar (string scope, string code, string dateId)
        {
             ApiResponse<CalendarDate> localVarResponse = DeleteDateFromCalendarWithHttpInfo(scope, code, dateId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// [BETA] Remove a date from a calendar Remove a date from a calendar.
        /// </summary>
        /// <exception cref="Lusid.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scope">Scope of the calendar</param>
        /// <param name="code">Code of the calendar</param>
        /// <param name="dateId">Identifier of the date to be removed</param>
        /// <returns>ApiResponse of CalendarDate</returns>
        public ApiResponse< CalendarDate > DeleteDateFromCalendarWithHttpInfo (string scope, string code, string dateId)
        {
            // verify the required parameter 'scope' is set
            if (scope == null)
                throw new ApiException(400, "Missing required parameter 'scope' when calling CalendarsApi->DeleteDateFromCalendar");
            // verify the required parameter 'code' is set
            if (code == null)
                throw new ApiException(400, "Missing required parameter 'code' when calling CalendarsApi->DeleteDateFromCalendar");
            // verify the required parameter 'dateId' is set
            if (dateId == null)
                throw new ApiException(400, "Missing required parameter 'dateId' when calling CalendarsApi->DeleteDateFromCalendar");

            var localVarPath = "./api/calendars/generic/{scope}/{code}/dates/{dateId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (scope != null) localVarPathParams.Add("scope", this.Configuration.ApiClient.ParameterToString(scope)); // path parameter
            if (code != null) localVarPathParams.Add("code", this.Configuration.ApiClient.ParameterToString(code)); // path parameter
            if (dateId != null) localVarPathParams.Add("dateId", this.Configuration.ApiClient.ParameterToString(dateId)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            //  set the LUSID header
            localVarHeaderParams["X-LUSID-SDK-Language"] = "C#";
            localVarHeaderParams["X-LUSID-SDK-Version"] = "0.11.3424";

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteDateFromCalendar", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CalendarDate>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (CalendarDate) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(CalendarDate)));
        }

        /// <summary>
        /// [BETA] Remove a date from a calendar Remove a date from a calendar.
        /// </summary>
        /// <exception cref="Lusid.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scope">Scope of the calendar</param>
        /// <param name="code">Code of the calendar</param>
        /// <param name="dateId">Identifier of the date to be removed</param>
        /// <returns>Task of CalendarDate</returns>
        public async System.Threading.Tasks.Task<CalendarDate> DeleteDateFromCalendarAsync (string scope, string code, string dateId)
        {
             ApiResponse<CalendarDate> localVarResponse = await DeleteDateFromCalendarAsyncWithHttpInfo(scope, code, dateId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// [BETA] Remove a date from a calendar Remove a date from a calendar.
        /// </summary>
        /// <exception cref="Lusid.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scope">Scope of the calendar</param>
        /// <param name="code">Code of the calendar</param>
        /// <param name="dateId">Identifier of the date to be removed</param>
        /// <returns>Task of ApiResponse (CalendarDate)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<CalendarDate>> DeleteDateFromCalendarAsyncWithHttpInfo (string scope, string code, string dateId)
        {
            // verify the required parameter 'scope' is set
            if (scope == null)
                throw new ApiException(400, "Missing required parameter 'scope' when calling CalendarsApi->DeleteDateFromCalendar");
            // verify the required parameter 'code' is set
            if (code == null)
                throw new ApiException(400, "Missing required parameter 'code' when calling CalendarsApi->DeleteDateFromCalendar");
            // verify the required parameter 'dateId' is set
            if (dateId == null)
                throw new ApiException(400, "Missing required parameter 'dateId' when calling CalendarsApi->DeleteDateFromCalendar");

            var localVarPath = "./api/calendars/generic/{scope}/{code}/dates/{dateId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (scope != null) localVarPathParams.Add("scope", this.Configuration.ApiClient.ParameterToString(scope)); // path parameter
            if (code != null) localVarPathParams.Add("code", this.Configuration.ApiClient.ParameterToString(code)); // path parameter
            if (dateId != null) localVarPathParams.Add("dateId", this.Configuration.ApiClient.ParameterToString(dateId)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            //  set the LUSID header
            localVarHeaderParams["X-LUSID-Sdk-Language"] = "C#";
            localVarHeaderParams["X-LUSID-Sdk-Version"] = "0.11.3424";

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteDateFromCalendar", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CalendarDate>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (CalendarDate) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(CalendarDate)));
        }

        /// <summary>
        /// [EXPERIMENTAL] Generate an ordered schedule of dates. Returns an ordered array of dates. The dates will only fall on business  days as defined by the scope and calendar codes in the valuation schedule.                Valuations are made at a frequency defined by the valuation schedule&#39;s tenor, e.g. every day (\&quot;1D\&quot;),  every other week (\&quot;2W\&quot;) etc. These dates will be adjusted onto business days as defined by the schedule&#39;s  rollConvention.
        /// </summary>
        /// <exception cref="Lusid.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scope">Scope of the calendars to use</param>
        /// <param name="valuationSchedule">The ValuationSchedule to generate schedule dates from</param>
        /// <param name="asAt">Optional AsAt for searching the calendar store. Defaults to Latest. (optional)</param>
        /// <returns>ICollection&lt;DateTimeOffset?&gt;</returns>
        public ICollection<DateTimeOffset?> GenerateSchedule (string scope, ValuationSchedule valuationSchedule, DateTimeOffset? asAt = null)
        {
             ApiResponse<ICollection<DateTimeOffset?>> localVarResponse = GenerateScheduleWithHttpInfo(scope, valuationSchedule, asAt);
             return localVarResponse.Data;
        }

        /// <summary>
        /// [EXPERIMENTAL] Generate an ordered schedule of dates. Returns an ordered array of dates. The dates will only fall on business  days as defined by the scope and calendar codes in the valuation schedule.                Valuations are made at a frequency defined by the valuation schedule&#39;s tenor, e.g. every day (\&quot;1D\&quot;),  every other week (\&quot;2W\&quot;) etc. These dates will be adjusted onto business days as defined by the schedule&#39;s  rollConvention.
        /// </summary>
        /// <exception cref="Lusid.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scope">Scope of the calendars to use</param>
        /// <param name="valuationSchedule">The ValuationSchedule to generate schedule dates from</param>
        /// <param name="asAt">Optional AsAt for searching the calendar store. Defaults to Latest. (optional)</param>
        /// <returns>ApiResponse of ICollection&lt;DateTimeOffset?&gt;</returns>
        public ApiResponse< ICollection<DateTimeOffset?> > GenerateScheduleWithHttpInfo (string scope, ValuationSchedule valuationSchedule, DateTimeOffset? asAt = null)
        {
            // verify the required parameter 'scope' is set
            if (scope == null)
                throw new ApiException(400, "Missing required parameter 'scope' when calling CalendarsApi->GenerateSchedule");
            // verify the required parameter 'valuationSchedule' is set
            if (valuationSchedule == null)
                throw new ApiException(400, "Missing required parameter 'valuationSchedule' when calling CalendarsApi->GenerateSchedule");

            var localVarPath = "./api/calendars/schedule/{scope}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (scope != null) localVarPathParams.Add("scope", this.Configuration.ApiClient.ParameterToString(scope)); // path parameter
            if (asAt != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "asAt", asAt)); // query parameter
            if (valuationSchedule != null && valuationSchedule.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(valuationSchedule); // http body (model) parameter
            }
            else
            {
                localVarPostBody = valuationSchedule; // byte array
            }

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            //  set the LUSID header
            localVarHeaderParams["X-LUSID-SDK-Language"] = "C#";
            localVarHeaderParams["X-LUSID-SDK-Version"] = "0.11.3424";

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GenerateSchedule", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ICollection<DateTimeOffset?>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (ICollection<DateTimeOffset?>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<DateTimeOffset?>)));
        }

        /// <summary>
        /// [EXPERIMENTAL] Generate an ordered schedule of dates. Returns an ordered array of dates. The dates will only fall on business  days as defined by the scope and calendar codes in the valuation schedule.                Valuations are made at a frequency defined by the valuation schedule&#39;s tenor, e.g. every day (\&quot;1D\&quot;),  every other week (\&quot;2W\&quot;) etc. These dates will be adjusted onto business days as defined by the schedule&#39;s  rollConvention.
        /// </summary>
        /// <exception cref="Lusid.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scope">Scope of the calendars to use</param>
        /// <param name="valuationSchedule">The ValuationSchedule to generate schedule dates from</param>
        /// <param name="asAt">Optional AsAt for searching the calendar store. Defaults to Latest. (optional)</param>
        /// <returns>Task of ICollection&lt;DateTimeOffset?&gt;</returns>
        public async System.Threading.Tasks.Task<ICollection<DateTimeOffset?>> GenerateScheduleAsync (string scope, ValuationSchedule valuationSchedule, DateTimeOffset? asAt = null)
        {
             ApiResponse<ICollection<DateTimeOffset?>> localVarResponse = await GenerateScheduleAsyncWithHttpInfo(scope, valuationSchedule, asAt);
             return localVarResponse.Data;

        }

        /// <summary>
        /// [EXPERIMENTAL] Generate an ordered schedule of dates. Returns an ordered array of dates. The dates will only fall on business  days as defined by the scope and calendar codes in the valuation schedule.                Valuations are made at a frequency defined by the valuation schedule&#39;s tenor, e.g. every day (\&quot;1D\&quot;),  every other week (\&quot;2W\&quot;) etc. These dates will be adjusted onto business days as defined by the schedule&#39;s  rollConvention.
        /// </summary>
        /// <exception cref="Lusid.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scope">Scope of the calendars to use</param>
        /// <param name="valuationSchedule">The ValuationSchedule to generate schedule dates from</param>
        /// <param name="asAt">Optional AsAt for searching the calendar store. Defaults to Latest. (optional)</param>
        /// <returns>Task of ApiResponse (ICollection&lt;DateTimeOffset?&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ICollection<DateTimeOffset?>>> GenerateScheduleAsyncWithHttpInfo (string scope, ValuationSchedule valuationSchedule, DateTimeOffset? asAt = null)
        {
            // verify the required parameter 'scope' is set
            if (scope == null)
                throw new ApiException(400, "Missing required parameter 'scope' when calling CalendarsApi->GenerateSchedule");
            // verify the required parameter 'valuationSchedule' is set
            if (valuationSchedule == null)
                throw new ApiException(400, "Missing required parameter 'valuationSchedule' when calling CalendarsApi->GenerateSchedule");

            var localVarPath = "./api/calendars/schedule/{scope}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (scope != null) localVarPathParams.Add("scope", this.Configuration.ApiClient.ParameterToString(scope)); // path parameter
            if (asAt != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "asAt", asAt)); // query parameter
            if (valuationSchedule != null && valuationSchedule.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(valuationSchedule); // http body (model) parameter
            }
            else
            {
                localVarPostBody = valuationSchedule; // byte array
            }

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            //  set the LUSID header
            localVarHeaderParams["X-LUSID-Sdk-Language"] = "C#";
            localVarHeaderParams["X-LUSID-Sdk-Version"] = "0.11.3424";

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GenerateSchedule", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ICollection<DateTimeOffset?>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (ICollection<DateTimeOffset?>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<DateTimeOffset?>)));
        }

        /// <summary>
        /// [BETA] Get a calendar in its generic form Retrieve a generic calendar by a specific ID at a point in AsAt time
        /// </summary>
        /// <exception cref="Lusid.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scope">Scope of the calendar identifier</param>
        /// <param name="code">Code of the calendar identifier</param>
        /// <param name="asAt">The AsAt datetime at which to retrieve the calendar (optional)</param>
        /// <returns>Calendar</returns>
        public Calendar GetCalendar (string scope, string code, DateTimeOffset? asAt = null)
        {
             ApiResponse<Calendar> localVarResponse = GetCalendarWithHttpInfo(scope, code, asAt);
             return localVarResponse.Data;
        }

        /// <summary>
        /// [BETA] Get a calendar in its generic form Retrieve a generic calendar by a specific ID at a point in AsAt time
        /// </summary>
        /// <exception cref="Lusid.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scope">Scope of the calendar identifier</param>
        /// <param name="code">Code of the calendar identifier</param>
        /// <param name="asAt">The AsAt datetime at which to retrieve the calendar (optional)</param>
        /// <returns>ApiResponse of Calendar</returns>
        public ApiResponse< Calendar > GetCalendarWithHttpInfo (string scope, string code, DateTimeOffset? asAt = null)
        {
            // verify the required parameter 'scope' is set
            if (scope == null)
                throw new ApiException(400, "Missing required parameter 'scope' when calling CalendarsApi->GetCalendar");
            // verify the required parameter 'code' is set
            if (code == null)
                throw new ApiException(400, "Missing required parameter 'code' when calling CalendarsApi->GetCalendar");

            var localVarPath = "./api/calendars/generic/{scope}/{code}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (scope != null) localVarPathParams.Add("scope", this.Configuration.ApiClient.ParameterToString(scope)); // path parameter
            if (code != null) localVarPathParams.Add("code", this.Configuration.ApiClient.ParameterToString(code)); // path parameter
            if (asAt != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "asAt", asAt)); // query parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            //  set the LUSID header
            localVarHeaderParams["X-LUSID-SDK-Language"] = "C#";
            localVarHeaderParams["X-LUSID-SDK-Version"] = "0.11.3424";

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetCalendar", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Calendar>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (Calendar) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Calendar)));
        }

        /// <summary>
        /// [BETA] Get a calendar in its generic form Retrieve a generic calendar by a specific ID at a point in AsAt time
        /// </summary>
        /// <exception cref="Lusid.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scope">Scope of the calendar identifier</param>
        /// <param name="code">Code of the calendar identifier</param>
        /// <param name="asAt">The AsAt datetime at which to retrieve the calendar (optional)</param>
        /// <returns>Task of Calendar</returns>
        public async System.Threading.Tasks.Task<Calendar> GetCalendarAsync (string scope, string code, DateTimeOffset? asAt = null)
        {
             ApiResponse<Calendar> localVarResponse = await GetCalendarAsyncWithHttpInfo(scope, code, asAt);
             return localVarResponse.Data;

        }

        /// <summary>
        /// [BETA] Get a calendar in its generic form Retrieve a generic calendar by a specific ID at a point in AsAt time
        /// </summary>
        /// <exception cref="Lusid.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scope">Scope of the calendar identifier</param>
        /// <param name="code">Code of the calendar identifier</param>
        /// <param name="asAt">The AsAt datetime at which to retrieve the calendar (optional)</param>
        /// <returns>Task of ApiResponse (Calendar)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Calendar>> GetCalendarAsyncWithHttpInfo (string scope, string code, DateTimeOffset? asAt = null)
        {
            // verify the required parameter 'scope' is set
            if (scope == null)
                throw new ApiException(400, "Missing required parameter 'scope' when calling CalendarsApi->GetCalendar");
            // verify the required parameter 'code' is set
            if (code == null)
                throw new ApiException(400, "Missing required parameter 'code' when calling CalendarsApi->GetCalendar");

            var localVarPath = "./api/calendars/generic/{scope}/{code}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (scope != null) localVarPathParams.Add("scope", this.Configuration.ApiClient.ParameterToString(scope)); // path parameter
            if (code != null) localVarPathParams.Add("code", this.Configuration.ApiClient.ParameterToString(code)); // path parameter
            if (asAt != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "asAt", asAt)); // query parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            //  set the LUSID header
            localVarHeaderParams["X-LUSID-Sdk-Language"] = "C#";
            localVarHeaderParams["X-LUSID-Sdk-Version"] = "0.11.3424";

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetCalendar", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Calendar>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (Calendar) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Calendar)));
        }

        /// <summary>
        /// [BETA] Get dates for a specific calendar Get dates from a specific calendar within a specific window of effective time, at a point in AsAt time.  Providing an id filter can further refine the results.
        /// </summary>
        /// <exception cref="Lusid.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scope">Scope of the calendar</param>
        /// <param name="code">Code of the calendar</param>
        /// <param name="fromEffectiveAt">Where the effective window of dates should begin from (optional)</param>
        /// <param name="toEffectiveAt">Where the effective window of dates should end (optional)</param>
        /// <param name="asAt">AsAt the dates should be retrieved at (optional)</param>
        /// <param name="idFilter">An additional filter that will filter dates based on their identifer (optional)</param>
        /// <returns>ResourceListOfCalendarDate</returns>
        public ResourceListOfCalendarDate GetDates (string scope, string code, DateTimeOrCutLabel fromEffectiveAt = null, DateTimeOrCutLabel toEffectiveAt = null, DateTimeOffset? asAt = null, List<string> idFilter = null)
        {
             ApiResponse<ResourceListOfCalendarDate> localVarResponse = GetDatesWithHttpInfo(scope, code, fromEffectiveAt, toEffectiveAt, asAt, idFilter);
             return localVarResponse.Data;
        }

        /// <summary>
        /// [BETA] Get dates for a specific calendar Get dates from a specific calendar within a specific window of effective time, at a point in AsAt time.  Providing an id filter can further refine the results.
        /// </summary>
        /// <exception cref="Lusid.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scope">Scope of the calendar</param>
        /// <param name="code">Code of the calendar</param>
        /// <param name="fromEffectiveAt">Where the effective window of dates should begin from (optional)</param>
        /// <param name="toEffectiveAt">Where the effective window of dates should end (optional)</param>
        /// <param name="asAt">AsAt the dates should be retrieved at (optional)</param>
        /// <param name="idFilter">An additional filter that will filter dates based on their identifer (optional)</param>
        /// <returns>ApiResponse of ResourceListOfCalendarDate</returns>
        public ApiResponse< ResourceListOfCalendarDate > GetDatesWithHttpInfo (string scope, string code, DateTimeOrCutLabel fromEffectiveAt = null, DateTimeOrCutLabel toEffectiveAt = null, DateTimeOffset? asAt = null, List<string> idFilter = null)
        {
            // verify the required parameter 'scope' is set
            if (scope == null)
                throw new ApiException(400, "Missing required parameter 'scope' when calling CalendarsApi->GetDates");
            // verify the required parameter 'code' is set
            if (code == null)
                throw new ApiException(400, "Missing required parameter 'code' when calling CalendarsApi->GetDates");

            var localVarPath = "./api/calendars/generic/{scope}/{code}/dates";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (scope != null) localVarPathParams.Add("scope", this.Configuration.ApiClient.ParameterToString(scope)); // path parameter
            if (code != null) localVarPathParams.Add("code", this.Configuration.ApiClient.ParameterToString(code)); // path parameter
            if (fromEffectiveAt != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fromEffectiveAt", fromEffectiveAt)); // query parameter
            if (toEffectiveAt != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "toEffectiveAt", toEffectiveAt)); // query parameter
            if (asAt != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "asAt", asAt)); // query parameter
            if (idFilter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "idFilter", idFilter)); // query parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            //  set the LUSID header
            localVarHeaderParams["X-LUSID-SDK-Language"] = "C#";
            localVarHeaderParams["X-LUSID-SDK-Version"] = "0.11.3424";

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetDates", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResourceListOfCalendarDate>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (ResourceListOfCalendarDate) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResourceListOfCalendarDate)));
        }

        /// <summary>
        /// [BETA] Get dates for a specific calendar Get dates from a specific calendar within a specific window of effective time, at a point in AsAt time.  Providing an id filter can further refine the results.
        /// </summary>
        /// <exception cref="Lusid.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scope">Scope of the calendar</param>
        /// <param name="code">Code of the calendar</param>
        /// <param name="fromEffectiveAt">Where the effective window of dates should begin from (optional)</param>
        /// <param name="toEffectiveAt">Where the effective window of dates should end (optional)</param>
        /// <param name="asAt">AsAt the dates should be retrieved at (optional)</param>
        /// <param name="idFilter">An additional filter that will filter dates based on their identifer (optional)</param>
        /// <returns>Task of ResourceListOfCalendarDate</returns>
        public async System.Threading.Tasks.Task<ResourceListOfCalendarDate> GetDatesAsync (string scope, string code, DateTimeOrCutLabel fromEffectiveAt = null, DateTimeOrCutLabel toEffectiveAt = null, DateTimeOffset? asAt = null, List<string> idFilter = null)
        {
             ApiResponse<ResourceListOfCalendarDate> localVarResponse = await GetDatesAsyncWithHttpInfo(scope, code, fromEffectiveAt, toEffectiveAt, asAt, idFilter);
             return localVarResponse.Data;

        }

        /// <summary>
        /// [BETA] Get dates for a specific calendar Get dates from a specific calendar within a specific window of effective time, at a point in AsAt time.  Providing an id filter can further refine the results.
        /// </summary>
        /// <exception cref="Lusid.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scope">Scope of the calendar</param>
        /// <param name="code">Code of the calendar</param>
        /// <param name="fromEffectiveAt">Where the effective window of dates should begin from (optional)</param>
        /// <param name="toEffectiveAt">Where the effective window of dates should end (optional)</param>
        /// <param name="asAt">AsAt the dates should be retrieved at (optional)</param>
        /// <param name="idFilter">An additional filter that will filter dates based on their identifer (optional)</param>
        /// <returns>Task of ApiResponse (ResourceListOfCalendarDate)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ResourceListOfCalendarDate>> GetDatesAsyncWithHttpInfo (string scope, string code, DateTimeOrCutLabel fromEffectiveAt = null, DateTimeOrCutLabel toEffectiveAt = null, DateTimeOffset? asAt = null, List<string> idFilter = null)
        {
            // verify the required parameter 'scope' is set
            if (scope == null)
                throw new ApiException(400, "Missing required parameter 'scope' when calling CalendarsApi->GetDates");
            // verify the required parameter 'code' is set
            if (code == null)
                throw new ApiException(400, "Missing required parameter 'code' when calling CalendarsApi->GetDates");

            var localVarPath = "./api/calendars/generic/{scope}/{code}/dates";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (scope != null) localVarPathParams.Add("scope", this.Configuration.ApiClient.ParameterToString(scope)); // path parameter
            if (code != null) localVarPathParams.Add("code", this.Configuration.ApiClient.ParameterToString(code)); // path parameter
            if (fromEffectiveAt != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fromEffectiveAt", fromEffectiveAt)); // query parameter
            if (toEffectiveAt != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "toEffectiveAt", toEffectiveAt)); // query parameter
            if (asAt != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "asAt", asAt)); // query parameter
            if (idFilter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "idFilter", idFilter)); // query parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            //  set the LUSID header
            localVarHeaderParams["X-LUSID-Sdk-Language"] = "C#";
            localVarHeaderParams["X-LUSID-Sdk-Version"] = "0.11.3424";

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetDates", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResourceListOfCalendarDate>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (ResourceListOfCalendarDate) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResourceListOfCalendarDate)));
        }

        /// <summary>
        /// [BETA] Check whether a DateTime is a \&quot;Business DateTime\&quot; A Business DateTime is defined as a point in time that:      * Does not represent a day that overlaps with the calendars WeekendMask      * If the calendar is a \&quot;Holiday Calendar\&quot; Does not overlap with any dates in the calendar      * If the calendar is a \&quot;TradingHours Calendar\&quot; Does overlap with a date in the calendar                All dates specified must be UTC and the upper bound of a calendar is not inclusive   e.g. From: 2020-12-25-00-00-00        To: 2020-12-26-00-00-00  IsBusinessDay(2020-12-26-00-00-00) &#x3D;&#x3D; false
        /// </summary>
        /// <exception cref="Lusid.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dateTime">DateTime to check - This DateTime must be UTC</param>
        /// <param name="scope">Scope of the calendar</param>
        /// <param name="code">Code of the calendar</param>
        /// <param name="asAt">AsAt for the request (optional)</param>
        /// <returns>IsBusinessDayResponse</returns>
        public IsBusinessDayResponse IsBusinessDateTime (DateTimeOffset? dateTime, string scope, string code, DateTimeOffset? asAt = null)
        {
             ApiResponse<IsBusinessDayResponse> localVarResponse = IsBusinessDateTimeWithHttpInfo(dateTime, scope, code, asAt);
             return localVarResponse.Data;
        }

        /// <summary>
        /// [BETA] Check whether a DateTime is a \&quot;Business DateTime\&quot; A Business DateTime is defined as a point in time that:      * Does not represent a day that overlaps with the calendars WeekendMask      * If the calendar is a \&quot;Holiday Calendar\&quot; Does not overlap with any dates in the calendar      * If the calendar is a \&quot;TradingHours Calendar\&quot; Does overlap with a date in the calendar                All dates specified must be UTC and the upper bound of a calendar is not inclusive   e.g. From: 2020-12-25-00-00-00        To: 2020-12-26-00-00-00  IsBusinessDay(2020-12-26-00-00-00) &#x3D;&#x3D; false
        /// </summary>
        /// <exception cref="Lusid.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dateTime">DateTime to check - This DateTime must be UTC</param>
        /// <param name="scope">Scope of the calendar</param>
        /// <param name="code">Code of the calendar</param>
        /// <param name="asAt">AsAt for the request (optional)</param>
        /// <returns>ApiResponse of IsBusinessDayResponse</returns>
        public ApiResponse< IsBusinessDayResponse > IsBusinessDateTimeWithHttpInfo (DateTimeOffset? dateTime, string scope, string code, DateTimeOffset? asAt = null)
        {
            // verify the required parameter 'dateTime' is set
            if (dateTime == null)
                throw new ApiException(400, "Missing required parameter 'dateTime' when calling CalendarsApi->IsBusinessDateTime");
            // verify the required parameter 'scope' is set
            if (scope == null)
                throw new ApiException(400, "Missing required parameter 'scope' when calling CalendarsApi->IsBusinessDateTime");
            // verify the required parameter 'code' is set
            if (code == null)
                throw new ApiException(400, "Missing required parameter 'code' when calling CalendarsApi->IsBusinessDateTime");

            var localVarPath = "./api/calendars/businessday/{scope}/{code}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (scope != null) localVarPathParams.Add("scope", this.Configuration.ApiClient.ParameterToString(scope)); // path parameter
            if (code != null) localVarPathParams.Add("code", this.Configuration.ApiClient.ParameterToString(code)); // path parameter
            if (dateTime != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "dateTime", dateTime)); // query parameter
            if (asAt != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "asAt", asAt)); // query parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            //  set the LUSID header
            localVarHeaderParams["X-LUSID-SDK-Language"] = "C#";
            localVarHeaderParams["X-LUSID-SDK-Version"] = "0.11.3424";

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("IsBusinessDateTime", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<IsBusinessDayResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (IsBusinessDayResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(IsBusinessDayResponse)));
        }

        /// <summary>
        /// [BETA] Check whether a DateTime is a \&quot;Business DateTime\&quot; A Business DateTime is defined as a point in time that:      * Does not represent a day that overlaps with the calendars WeekendMask      * If the calendar is a \&quot;Holiday Calendar\&quot; Does not overlap with any dates in the calendar      * If the calendar is a \&quot;TradingHours Calendar\&quot; Does overlap with a date in the calendar                All dates specified must be UTC and the upper bound of a calendar is not inclusive   e.g. From: 2020-12-25-00-00-00        To: 2020-12-26-00-00-00  IsBusinessDay(2020-12-26-00-00-00) &#x3D;&#x3D; false
        /// </summary>
        /// <exception cref="Lusid.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dateTime">DateTime to check - This DateTime must be UTC</param>
        /// <param name="scope">Scope of the calendar</param>
        /// <param name="code">Code of the calendar</param>
        /// <param name="asAt">AsAt for the request (optional)</param>
        /// <returns>Task of IsBusinessDayResponse</returns>
        public async System.Threading.Tasks.Task<IsBusinessDayResponse> IsBusinessDateTimeAsync (DateTimeOffset? dateTime, string scope, string code, DateTimeOffset? asAt = null)
        {
             ApiResponse<IsBusinessDayResponse> localVarResponse = await IsBusinessDateTimeAsyncWithHttpInfo(dateTime, scope, code, asAt);
             return localVarResponse.Data;

        }

        /// <summary>
        /// [BETA] Check whether a DateTime is a \&quot;Business DateTime\&quot; A Business DateTime is defined as a point in time that:      * Does not represent a day that overlaps with the calendars WeekendMask      * If the calendar is a \&quot;Holiday Calendar\&quot; Does not overlap with any dates in the calendar      * If the calendar is a \&quot;TradingHours Calendar\&quot; Does overlap with a date in the calendar                All dates specified must be UTC and the upper bound of a calendar is not inclusive   e.g. From: 2020-12-25-00-00-00        To: 2020-12-26-00-00-00  IsBusinessDay(2020-12-26-00-00-00) &#x3D;&#x3D; false
        /// </summary>
        /// <exception cref="Lusid.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dateTime">DateTime to check - This DateTime must be UTC</param>
        /// <param name="scope">Scope of the calendar</param>
        /// <param name="code">Code of the calendar</param>
        /// <param name="asAt">AsAt for the request (optional)</param>
        /// <returns>Task of ApiResponse (IsBusinessDayResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<IsBusinessDayResponse>> IsBusinessDateTimeAsyncWithHttpInfo (DateTimeOffset? dateTime, string scope, string code, DateTimeOffset? asAt = null)
        {
            // verify the required parameter 'dateTime' is set
            if (dateTime == null)
                throw new ApiException(400, "Missing required parameter 'dateTime' when calling CalendarsApi->IsBusinessDateTime");
            // verify the required parameter 'scope' is set
            if (scope == null)
                throw new ApiException(400, "Missing required parameter 'scope' when calling CalendarsApi->IsBusinessDateTime");
            // verify the required parameter 'code' is set
            if (code == null)
                throw new ApiException(400, "Missing required parameter 'code' when calling CalendarsApi->IsBusinessDateTime");

            var localVarPath = "./api/calendars/businessday/{scope}/{code}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (scope != null) localVarPathParams.Add("scope", this.Configuration.ApiClient.ParameterToString(scope)); // path parameter
            if (code != null) localVarPathParams.Add("code", this.Configuration.ApiClient.ParameterToString(code)); // path parameter
            if (dateTime != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "dateTime", dateTime)); // query parameter
            if (asAt != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "asAt", asAt)); // query parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            //  set the LUSID header
            localVarHeaderParams["X-LUSID-Sdk-Language"] = "C#";
            localVarHeaderParams["X-LUSID-Sdk-Version"] = "0.11.3424";

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("IsBusinessDateTime", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<IsBusinessDayResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (IsBusinessDayResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(IsBusinessDayResponse)));
        }

        /// <summary>
        /// [BETA] List Calenders List calendars at a point in AsAt time.
        /// </summary>
        /// <exception cref="Lusid.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="asAt">The AsAt datetime at which to retrieve the calendars (optional)</param>
        /// <param name="page">The pagination token to use to continue listing calendars from a previous call to list calendars.              This value is returned from the previous call. If a pagination token is provided the sortBy, filter, and asAt fields              must not have changed since the original request. Also, if set, a start value cannot be provided. (optional)</param>
        /// <param name="limit">When paginating, limit the number of returned results to this many. (optional)</param>
        /// <param name="filter">Expression to filter the result set. Read more about filtering results from LUSID here https://support.lusid.com/filtering-results-from-lusid. (optional)</param>
        /// <returns>PagedResourceListOfCalendar</returns>
        public PagedResourceListOfCalendar ListCalendars (DateTimeOffset? asAt = null, string page = null, int? limit = null, string filter = null)
        {
             ApiResponse<PagedResourceListOfCalendar> localVarResponse = ListCalendarsWithHttpInfo(asAt, page, limit, filter);
             return localVarResponse.Data;
        }

        /// <summary>
        /// [BETA] List Calenders List calendars at a point in AsAt time.
        /// </summary>
        /// <exception cref="Lusid.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="asAt">The AsAt datetime at which to retrieve the calendars (optional)</param>
        /// <param name="page">The pagination token to use to continue listing calendars from a previous call to list calendars.              This value is returned from the previous call. If a pagination token is provided the sortBy, filter, and asAt fields              must not have changed since the original request. Also, if set, a start value cannot be provided. (optional)</param>
        /// <param name="limit">When paginating, limit the number of returned results to this many. (optional)</param>
        /// <param name="filter">Expression to filter the result set. Read more about filtering results from LUSID here https://support.lusid.com/filtering-results-from-lusid. (optional)</param>
        /// <returns>ApiResponse of PagedResourceListOfCalendar</returns>
        public ApiResponse< PagedResourceListOfCalendar > ListCalendarsWithHttpInfo (DateTimeOffset? asAt = null, string page = null, int? limit = null, string filter = null)
        {

            var localVarPath = "./api/calendars/generic";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (asAt != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "asAt", asAt)); // query parameter
            if (page != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter
            if (filter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "filter", filter)); // query parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            //  set the LUSID header
            localVarHeaderParams["X-LUSID-SDK-Language"] = "C#";
            localVarHeaderParams["X-LUSID-SDK-Version"] = "0.11.3424";

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ListCalendars", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PagedResourceListOfCalendar>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (PagedResourceListOfCalendar) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(PagedResourceListOfCalendar)));
        }

        /// <summary>
        /// [BETA] List Calenders List calendars at a point in AsAt time.
        /// </summary>
        /// <exception cref="Lusid.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="asAt">The AsAt datetime at which to retrieve the calendars (optional)</param>
        /// <param name="page">The pagination token to use to continue listing calendars from a previous call to list calendars.              This value is returned from the previous call. If a pagination token is provided the sortBy, filter, and asAt fields              must not have changed since the original request. Also, if set, a start value cannot be provided. (optional)</param>
        /// <param name="limit">When paginating, limit the number of returned results to this many. (optional)</param>
        /// <param name="filter">Expression to filter the result set. Read more about filtering results from LUSID here https://support.lusid.com/filtering-results-from-lusid. (optional)</param>
        /// <returns>Task of PagedResourceListOfCalendar</returns>
        public async System.Threading.Tasks.Task<PagedResourceListOfCalendar> ListCalendarsAsync (DateTimeOffset? asAt = null, string page = null, int? limit = null, string filter = null)
        {
             ApiResponse<PagedResourceListOfCalendar> localVarResponse = await ListCalendarsAsyncWithHttpInfo(asAt, page, limit, filter);
             return localVarResponse.Data;

        }

        /// <summary>
        /// [BETA] List Calenders List calendars at a point in AsAt time.
        /// </summary>
        /// <exception cref="Lusid.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="asAt">The AsAt datetime at which to retrieve the calendars (optional)</param>
        /// <param name="page">The pagination token to use to continue listing calendars from a previous call to list calendars.              This value is returned from the previous call. If a pagination token is provided the sortBy, filter, and asAt fields              must not have changed since the original request. Also, if set, a start value cannot be provided. (optional)</param>
        /// <param name="limit">When paginating, limit the number of returned results to this many. (optional)</param>
        /// <param name="filter">Expression to filter the result set. Read more about filtering results from LUSID here https://support.lusid.com/filtering-results-from-lusid. (optional)</param>
        /// <returns>Task of ApiResponse (PagedResourceListOfCalendar)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<PagedResourceListOfCalendar>> ListCalendarsAsyncWithHttpInfo (DateTimeOffset? asAt = null, string page = null, int? limit = null, string filter = null)
        {

            var localVarPath = "./api/calendars/generic";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (asAt != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "asAt", asAt)); // query parameter
            if (page != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter
            if (filter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "filter", filter)); // query parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            //  set the LUSID header
            localVarHeaderParams["X-LUSID-Sdk-Language"] = "C#";
            localVarHeaderParams["X-LUSID-Sdk-Version"] = "0.11.3424";

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ListCalendars", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PagedResourceListOfCalendar>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (PagedResourceListOfCalendar) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(PagedResourceListOfCalendar)));
        }

        /// <summary>
        /// [BETA] List all calenders in a specified scope List calendars at a point in AsAt time.
        /// </summary>
        /// <exception cref="Lusid.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scope">Scope of the calendars</param>
        /// <param name="asAt">The AsAt datetime at which to retrieve the calendars (optional)</param>
        /// <param name="page">The pagination token to use to continue listing calendars from a previous call to list calendars.              This value is returned from the previous call. If a pagination token is provided the sortBy, filter, and asAt fields              must not have changed since the original request. Also, if set, a start value cannot be provided. (optional)</param>
        /// <param name="start">When paginating, skip this number of results. (optional)</param>
        /// <param name="limit">When paginating, limit the number of returned results to this many. (optional)</param>
        /// <param name="filter">Expression to filter the result set. Read more about filtering results from LUSID here https://support.lusid.com/filtering-results-from-lusid. (optional)</param>
        /// <returns>PagedResourceListOfCalendar</returns>
        public PagedResourceListOfCalendar ListCalendarsInScope (string scope, DateTimeOffset? asAt = null, string page = null, int? start = null, int? limit = null, string filter = null)
        {
             ApiResponse<PagedResourceListOfCalendar> localVarResponse = ListCalendarsInScopeWithHttpInfo(scope, asAt, page, start, limit, filter);
             return localVarResponse.Data;
        }

        /// <summary>
        /// [BETA] List all calenders in a specified scope List calendars at a point in AsAt time.
        /// </summary>
        /// <exception cref="Lusid.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scope">Scope of the calendars</param>
        /// <param name="asAt">The AsAt datetime at which to retrieve the calendars (optional)</param>
        /// <param name="page">The pagination token to use to continue listing calendars from a previous call to list calendars.              This value is returned from the previous call. If a pagination token is provided the sortBy, filter, and asAt fields              must not have changed since the original request. Also, if set, a start value cannot be provided. (optional)</param>
        /// <param name="start">When paginating, skip this number of results. (optional)</param>
        /// <param name="limit">When paginating, limit the number of returned results to this many. (optional)</param>
        /// <param name="filter">Expression to filter the result set. Read more about filtering results from LUSID here https://support.lusid.com/filtering-results-from-lusid. (optional)</param>
        /// <returns>ApiResponse of PagedResourceListOfCalendar</returns>
        public ApiResponse< PagedResourceListOfCalendar > ListCalendarsInScopeWithHttpInfo (string scope, DateTimeOffset? asAt = null, string page = null, int? start = null, int? limit = null, string filter = null)
        {
            // verify the required parameter 'scope' is set
            if (scope == null)
                throw new ApiException(400, "Missing required parameter 'scope' when calling CalendarsApi->ListCalendarsInScope");

            var localVarPath = "./api/calendars/generic/{scope}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (scope != null) localVarPathParams.Add("scope", this.Configuration.ApiClient.ParameterToString(scope)); // path parameter
            if (asAt != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "asAt", asAt)); // query parameter
            if (page != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (start != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "start", start)); // query parameter
            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter
            if (filter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "filter", filter)); // query parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            //  set the LUSID header
            localVarHeaderParams["X-LUSID-SDK-Language"] = "C#";
            localVarHeaderParams["X-LUSID-SDK-Version"] = "0.11.3424";

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ListCalendarsInScope", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PagedResourceListOfCalendar>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (PagedResourceListOfCalendar) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(PagedResourceListOfCalendar)));
        }

        /// <summary>
        /// [BETA] List all calenders in a specified scope List calendars at a point in AsAt time.
        /// </summary>
        /// <exception cref="Lusid.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scope">Scope of the calendars</param>
        /// <param name="asAt">The AsAt datetime at which to retrieve the calendars (optional)</param>
        /// <param name="page">The pagination token to use to continue listing calendars from a previous call to list calendars.              This value is returned from the previous call. If a pagination token is provided the sortBy, filter, and asAt fields              must not have changed since the original request. Also, if set, a start value cannot be provided. (optional)</param>
        /// <param name="start">When paginating, skip this number of results. (optional)</param>
        /// <param name="limit">When paginating, limit the number of returned results to this many. (optional)</param>
        /// <param name="filter">Expression to filter the result set. Read more about filtering results from LUSID here https://support.lusid.com/filtering-results-from-lusid. (optional)</param>
        /// <returns>Task of PagedResourceListOfCalendar</returns>
        public async System.Threading.Tasks.Task<PagedResourceListOfCalendar> ListCalendarsInScopeAsync (string scope, DateTimeOffset? asAt = null, string page = null, int? start = null, int? limit = null, string filter = null)
        {
             ApiResponse<PagedResourceListOfCalendar> localVarResponse = await ListCalendarsInScopeAsyncWithHttpInfo(scope, asAt, page, start, limit, filter);
             return localVarResponse.Data;

        }

        /// <summary>
        /// [BETA] List all calenders in a specified scope List calendars at a point in AsAt time.
        /// </summary>
        /// <exception cref="Lusid.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scope">Scope of the calendars</param>
        /// <param name="asAt">The AsAt datetime at which to retrieve the calendars (optional)</param>
        /// <param name="page">The pagination token to use to continue listing calendars from a previous call to list calendars.              This value is returned from the previous call. If a pagination token is provided the sortBy, filter, and asAt fields              must not have changed since the original request. Also, if set, a start value cannot be provided. (optional)</param>
        /// <param name="start">When paginating, skip this number of results. (optional)</param>
        /// <param name="limit">When paginating, limit the number of returned results to this many. (optional)</param>
        /// <param name="filter">Expression to filter the result set. Read more about filtering results from LUSID here https://support.lusid.com/filtering-results-from-lusid. (optional)</param>
        /// <returns>Task of ApiResponse (PagedResourceListOfCalendar)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<PagedResourceListOfCalendar>> ListCalendarsInScopeAsyncWithHttpInfo (string scope, DateTimeOffset? asAt = null, string page = null, int? start = null, int? limit = null, string filter = null)
        {
            // verify the required parameter 'scope' is set
            if (scope == null)
                throw new ApiException(400, "Missing required parameter 'scope' when calling CalendarsApi->ListCalendarsInScope");

            var localVarPath = "./api/calendars/generic/{scope}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (scope != null) localVarPathParams.Add("scope", this.Configuration.ApiClient.ParameterToString(scope)); // path parameter
            if (asAt != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "asAt", asAt)); // query parameter
            if (page != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (start != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "start", start)); // query parameter
            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter
            if (filter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "filter", filter)); // query parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            //  set the LUSID header
            localVarHeaderParams["X-LUSID-Sdk-Language"] = "C#";
            localVarHeaderParams["X-LUSID-Sdk-Version"] = "0.11.3424";

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ListCalendarsInScope", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PagedResourceListOfCalendar>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (PagedResourceListOfCalendar) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(PagedResourceListOfCalendar)));
        }

        /// <summary>
        /// [BETA] Update a calendar Update the calendars WeekendMask, SourceProvider or Properties
        /// </summary>
        /// <exception cref="Lusid.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scope">Scope of the request</param>
        /// <param name="code">Code of the request</param>
        /// <param name="updateCalendarRequest">The new state of the calendar</param>
        /// <returns>Calendar</returns>
        public Calendar UpdateCalendar (string scope, string code, UpdateCalendarRequest updateCalendarRequest)
        {
             ApiResponse<Calendar> localVarResponse = UpdateCalendarWithHttpInfo(scope, code, updateCalendarRequest);
             return localVarResponse.Data;
        }

        /// <summary>
        /// [BETA] Update a calendar Update the calendars WeekendMask, SourceProvider or Properties
        /// </summary>
        /// <exception cref="Lusid.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scope">Scope of the request</param>
        /// <param name="code">Code of the request</param>
        /// <param name="updateCalendarRequest">The new state of the calendar</param>
        /// <returns>ApiResponse of Calendar</returns>
        public ApiResponse< Calendar > UpdateCalendarWithHttpInfo (string scope, string code, UpdateCalendarRequest updateCalendarRequest)
        {
            // verify the required parameter 'scope' is set
            if (scope == null)
                throw new ApiException(400, "Missing required parameter 'scope' when calling CalendarsApi->UpdateCalendar");
            // verify the required parameter 'code' is set
            if (code == null)
                throw new ApiException(400, "Missing required parameter 'code' when calling CalendarsApi->UpdateCalendar");
            // verify the required parameter 'updateCalendarRequest' is set
            if (updateCalendarRequest == null)
                throw new ApiException(400, "Missing required parameter 'updateCalendarRequest' when calling CalendarsApi->UpdateCalendar");

            var localVarPath = "./api/calendars/generic/{scope}/{code}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (scope != null) localVarPathParams.Add("scope", this.Configuration.ApiClient.ParameterToString(scope)); // path parameter
            if (code != null) localVarPathParams.Add("code", this.Configuration.ApiClient.ParameterToString(code)); // path parameter
            if (updateCalendarRequest != null && updateCalendarRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(updateCalendarRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = updateCalendarRequest; // byte array
            }

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            //  set the LUSID header
            localVarHeaderParams["X-LUSID-SDK-Language"] = "C#";
            localVarHeaderParams["X-LUSID-SDK-Version"] = "0.11.3424";

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateCalendar", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Calendar>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (Calendar) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Calendar)));
        }

        /// <summary>
        /// [BETA] Update a calendar Update the calendars WeekendMask, SourceProvider or Properties
        /// </summary>
        /// <exception cref="Lusid.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scope">Scope of the request</param>
        /// <param name="code">Code of the request</param>
        /// <param name="updateCalendarRequest">The new state of the calendar</param>
        /// <returns>Task of Calendar</returns>
        public async System.Threading.Tasks.Task<Calendar> UpdateCalendarAsync (string scope, string code, UpdateCalendarRequest updateCalendarRequest)
        {
             ApiResponse<Calendar> localVarResponse = await UpdateCalendarAsyncWithHttpInfo(scope, code, updateCalendarRequest);
             return localVarResponse.Data;

        }

        /// <summary>
        /// [BETA] Update a calendar Update the calendars WeekendMask, SourceProvider or Properties
        /// </summary>
        /// <exception cref="Lusid.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scope">Scope of the request</param>
        /// <param name="code">Code of the request</param>
        /// <param name="updateCalendarRequest">The new state of the calendar</param>
        /// <returns>Task of ApiResponse (Calendar)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Calendar>> UpdateCalendarAsyncWithHttpInfo (string scope, string code, UpdateCalendarRequest updateCalendarRequest)
        {
            // verify the required parameter 'scope' is set
            if (scope == null)
                throw new ApiException(400, "Missing required parameter 'scope' when calling CalendarsApi->UpdateCalendar");
            // verify the required parameter 'code' is set
            if (code == null)
                throw new ApiException(400, "Missing required parameter 'code' when calling CalendarsApi->UpdateCalendar");
            // verify the required parameter 'updateCalendarRequest' is set
            if (updateCalendarRequest == null)
                throw new ApiException(400, "Missing required parameter 'updateCalendarRequest' when calling CalendarsApi->UpdateCalendar");

            var localVarPath = "./api/calendars/generic/{scope}/{code}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (scope != null) localVarPathParams.Add("scope", this.Configuration.ApiClient.ParameterToString(scope)); // path parameter
            if (code != null) localVarPathParams.Add("code", this.Configuration.ApiClient.ParameterToString(code)); // path parameter
            if (updateCalendarRequest != null && updateCalendarRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(updateCalendarRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = updateCalendarRequest; // byte array
            }

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            //  set the LUSID header
            localVarHeaderParams["X-LUSID-Sdk-Language"] = "C#";
            localVarHeaderParams["X-LUSID-Sdk-Version"] = "0.11.3424";

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateCalendar", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Calendar>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (Calendar) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Calendar)));
        }

    }
}