/* 
 * LUSID API
 *
 * # Introduction  This page documents the [LUSID APIs](https://www.lusid.com/api/swagger), which allows authorised clients to query and update their data within the LUSID platform.  SDKs to interact with the LUSID APIs are available in the following languages and frameworks:  * [C#](https://github.com/finbourne/lusid-sdk-csharp) * [Java](https://github.com/finbourne/lusid-sdk-java) * [JavaScript](https://github.com/finbourne/lusid-sdk-js) * [Python](https://github.com/finbourne/lusid-sdk-python) * [Angular](https://github.com/finbourne/lusid-sdk-angular)  The LUSID platform is made up of a number of sub-applications. You can find the API / swagger documentation by following the links in the table below.   | Application | Description | API / Swagger Documentation | | - -- -- | - -- -- | - -- - | | LUSID | Open, API-first, developer-friendly investment data platform. | [Swagger](https://www.lusid.com/api/swagger/index.html) | | Web app | User-facing front end for LUSID. | [Swagger](https://www.lusid.com/app/swagger/index.html) | | Scheduler | Automated job scheduler. | [Swagger](https://www.lusid.com/scheduler2/swagger/index.html) | | Insights |Monitoring and troubleshooting service. | [Swagger](https://www.lusid.com/insights/swagger/index.html) | | Identity | Identity management for LUSID (in conjuction with Access) | [Swagger](https://www.lusid.com/identity/swagger/index.html) | | Access | Access control for LUSID (in conjunction with Identity) | [Swagger](https://www.lusid.com/access/swagger/index.html) | | Drive | Secure file repository and manager for collaboration. | [Swagger](https://www.lusid.com/drive/swagger/index.html) | | Luminesce | Data virtualisation service (query data from multiple providers, including LUSID) | [Swagger](https://www.lusid.com/honeycomb/swagger/index.html) | | Notification | Notification service. | [Swagger](https://www.lusid.com/notifications/swagger/index.html) | | Configuration | File store for secrets and other sensitive information. | [Swagger](https://www.lusid.com/configuration/swagger/index.html) | 
 *
 * The version of the OpenAPI document: 0.11.3422
 * Contact: info@finbourne.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp.Portable;
using Lusid.Sdk.Client;
using Lusid.Sdk.Model;

namespace Lusid.Sdk.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IConfigurationRecipeApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// [EXPERIMENTAL] Delete a Configuration Recipe, assuming that it is present.
        /// </summary>
        /// <remarks>
        /// Delete the specified Configuration Recipe from a single scope.                The response will return either detail of the deleted item, or an explanation (failure) as to why this did not succeed.                It is important to always check for any unsuccessful response.
        /// </remarks>
        /// <exception cref="Lusid.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scope">The scope of the Configuration Recipe to delete.</param>
        /// <param name="code">The Configuration Recipe to delete.</param>
        /// <returns>AnnulSingleStructuredDataResponse</returns>
        AnnulSingleStructuredDataResponse DeleteConfigurationRecipe (string scope, string code);

        /// <summary>
        /// [EXPERIMENTAL] Delete a Configuration Recipe, assuming that it is present.
        /// </summary>
        /// <remarks>
        /// Delete the specified Configuration Recipe from a single scope.                The response will return either detail of the deleted item, or an explanation (failure) as to why this did not succeed.                It is important to always check for any unsuccessful response.
        /// </remarks>
        /// <exception cref="Lusid.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scope">The scope of the Configuration Recipe to delete.</param>
        /// <param name="code">The Configuration Recipe to delete.</param>
        /// <returns>ApiResponse of AnnulSingleStructuredDataResponse</returns>
        ApiResponse<AnnulSingleStructuredDataResponse> DeleteConfigurationRecipeWithHttpInfo (string scope, string code);
        /// <summary>
        /// [EXPERIMENTAL] Get Configuration Recipe
        /// </summary>
        /// <remarks>
        /// Get a Configuration Recipe from a single scope.                The response will return either the recipe that has been stored, or a failure explaining why the request was unsuccessful.                It is important to always check for any unsuccessful requests (failures).
        /// </remarks>
        /// <exception cref="Lusid.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scope">The scope of the Configuration Recipe to retrieve.</param>
        /// <param name="code">The name of the recipe to retrieve the data for.</param>
        /// <param name="asAt">The asAt datetime at which to retrieve the Configuration Recipe. Defaults to return the latest version if not specified. (optional)</param>
        /// <returns>GetRecipeResponse</returns>
        GetRecipeResponse GetConfigurationRecipe (string scope, string code, DateTimeOffset? asAt = null);

        /// <summary>
        /// [EXPERIMENTAL] Get Configuration Recipe
        /// </summary>
        /// <remarks>
        /// Get a Configuration Recipe from a single scope.                The response will return either the recipe that has been stored, or a failure explaining why the request was unsuccessful.                It is important to always check for any unsuccessful requests (failures).
        /// </remarks>
        /// <exception cref="Lusid.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scope">The scope of the Configuration Recipe to retrieve.</param>
        /// <param name="code">The name of the recipe to retrieve the data for.</param>
        /// <param name="asAt">The asAt datetime at which to retrieve the Configuration Recipe. Defaults to return the latest version if not specified. (optional)</param>
        /// <returns>ApiResponse of GetRecipeResponse</returns>
        ApiResponse<GetRecipeResponse> GetConfigurationRecipeWithHttpInfo (string scope, string code, DateTimeOffset? asAt = null);
        /// <summary>
        /// [EXPERIMENTAL] List the set of Configuration Recipes
        /// </summary>
        /// <remarks>
        /// List the set of configuration recipes at the specified date/time and scope
        /// </remarks>
        /// <exception cref="Lusid.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="asAt">The asAt datetime at which to list the Configuration Recipes. Defaults to latest if not specified. (optional)</param>
        /// <param name="filter">Expression to filter the result set. Read more about filtering results from LUSID here:              https://support.lusid.com/filtering-results-from-lusid. (optional)</param>
        /// <returns>ResourceListOfGetRecipeResponse</returns>
        ResourceListOfGetRecipeResponse ListConfigurationRecipes (DateTimeOffset? asAt = null, string filter = null);

        /// <summary>
        /// [EXPERIMENTAL] List the set of Configuration Recipes
        /// </summary>
        /// <remarks>
        /// List the set of configuration recipes at the specified date/time and scope
        /// </remarks>
        /// <exception cref="Lusid.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="asAt">The asAt datetime at which to list the Configuration Recipes. Defaults to latest if not specified. (optional)</param>
        /// <param name="filter">Expression to filter the result set. Read more about filtering results from LUSID here:              https://support.lusid.com/filtering-results-from-lusid. (optional)</param>
        /// <returns>ApiResponse of ResourceListOfGetRecipeResponse</returns>
        ApiResponse<ResourceListOfGetRecipeResponse> ListConfigurationRecipesWithHttpInfo (DateTimeOffset? asAt = null, string filter = null);
        /// <summary>
        /// [EXPERIMENTAL] Upsert a Configuration Recipe. This creates or updates the data in Lusid.
        /// </summary>
        /// <remarks>
        /// Update or insert one Configuration Recipe in a single scope. An item will be updated if it already exists  and inserted if it does not.                The response will return the successfully updated or inserted Configuration Recipe or failure message if unsuccessful                It is important to always check to verify success (or failure).
        /// </remarks>
        /// <exception cref="Lusid.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="upsertRecipeRequest">The Configuration Recipe to update or insert</param>
        /// <returns>UpsertSingleStructuredDataResponse</returns>
        UpsertSingleStructuredDataResponse UpsertConfigurationRecipe (UpsertRecipeRequest upsertRecipeRequest);

        /// <summary>
        /// [EXPERIMENTAL] Upsert a Configuration Recipe. This creates or updates the data in Lusid.
        /// </summary>
        /// <remarks>
        /// Update or insert one Configuration Recipe in a single scope. An item will be updated if it already exists  and inserted if it does not.                The response will return the successfully updated or inserted Configuration Recipe or failure message if unsuccessful                It is important to always check to verify success (or failure).
        /// </remarks>
        /// <exception cref="Lusid.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="upsertRecipeRequest">The Configuration Recipe to update or insert</param>
        /// <returns>ApiResponse of UpsertSingleStructuredDataResponse</returns>
        ApiResponse<UpsertSingleStructuredDataResponse> UpsertConfigurationRecipeWithHttpInfo (UpsertRecipeRequest upsertRecipeRequest);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// [EXPERIMENTAL] Delete a Configuration Recipe, assuming that it is present.
        /// </summary>
        /// <remarks>
        /// Delete the specified Configuration Recipe from a single scope.                The response will return either detail of the deleted item, or an explanation (failure) as to why this did not succeed.                It is important to always check for any unsuccessful response.
        /// </remarks>
        /// <exception cref="Lusid.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scope">The scope of the Configuration Recipe to delete.</param>
        /// <param name="code">The Configuration Recipe to delete.</param>
        /// <returns>Task of AnnulSingleStructuredDataResponse</returns>
        System.Threading.Tasks.Task<AnnulSingleStructuredDataResponse> DeleteConfigurationRecipeAsync (string scope, string code);

        /// <summary>
        /// [EXPERIMENTAL] Delete a Configuration Recipe, assuming that it is present.
        /// </summary>
        /// <remarks>
        /// Delete the specified Configuration Recipe from a single scope.                The response will return either detail of the deleted item, or an explanation (failure) as to why this did not succeed.                It is important to always check for any unsuccessful response.
        /// </remarks>
        /// <exception cref="Lusid.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scope">The scope of the Configuration Recipe to delete.</param>
        /// <param name="code">The Configuration Recipe to delete.</param>
        /// <returns>Task of ApiResponse (AnnulSingleStructuredDataResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<AnnulSingleStructuredDataResponse>> DeleteConfigurationRecipeAsyncWithHttpInfo (string scope, string code);
        /// <summary>
        /// [EXPERIMENTAL] Get Configuration Recipe
        /// </summary>
        /// <remarks>
        /// Get a Configuration Recipe from a single scope.                The response will return either the recipe that has been stored, or a failure explaining why the request was unsuccessful.                It is important to always check for any unsuccessful requests (failures).
        /// </remarks>
        /// <exception cref="Lusid.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scope">The scope of the Configuration Recipe to retrieve.</param>
        /// <param name="code">The name of the recipe to retrieve the data for.</param>
        /// <param name="asAt">The asAt datetime at which to retrieve the Configuration Recipe. Defaults to return the latest version if not specified. (optional)</param>
        /// <returns>Task of GetRecipeResponse</returns>
        System.Threading.Tasks.Task<GetRecipeResponse> GetConfigurationRecipeAsync (string scope, string code, DateTimeOffset? asAt = null);

        /// <summary>
        /// [EXPERIMENTAL] Get Configuration Recipe
        /// </summary>
        /// <remarks>
        /// Get a Configuration Recipe from a single scope.                The response will return either the recipe that has been stored, or a failure explaining why the request was unsuccessful.                It is important to always check for any unsuccessful requests (failures).
        /// </remarks>
        /// <exception cref="Lusid.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scope">The scope of the Configuration Recipe to retrieve.</param>
        /// <param name="code">The name of the recipe to retrieve the data for.</param>
        /// <param name="asAt">The asAt datetime at which to retrieve the Configuration Recipe. Defaults to return the latest version if not specified. (optional)</param>
        /// <returns>Task of ApiResponse (GetRecipeResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetRecipeResponse>> GetConfigurationRecipeAsyncWithHttpInfo (string scope, string code, DateTimeOffset? asAt = null);
        /// <summary>
        /// [EXPERIMENTAL] List the set of Configuration Recipes
        /// </summary>
        /// <remarks>
        /// List the set of configuration recipes at the specified date/time and scope
        /// </remarks>
        /// <exception cref="Lusid.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="asAt">The asAt datetime at which to list the Configuration Recipes. Defaults to latest if not specified. (optional)</param>
        /// <param name="filter">Expression to filter the result set. Read more about filtering results from LUSID here:              https://support.lusid.com/filtering-results-from-lusid. (optional)</param>
        /// <returns>Task of ResourceListOfGetRecipeResponse</returns>
        System.Threading.Tasks.Task<ResourceListOfGetRecipeResponse> ListConfigurationRecipesAsync (DateTimeOffset? asAt = null, string filter = null);

        /// <summary>
        /// [EXPERIMENTAL] List the set of Configuration Recipes
        /// </summary>
        /// <remarks>
        /// List the set of configuration recipes at the specified date/time and scope
        /// </remarks>
        /// <exception cref="Lusid.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="asAt">The asAt datetime at which to list the Configuration Recipes. Defaults to latest if not specified. (optional)</param>
        /// <param name="filter">Expression to filter the result set. Read more about filtering results from LUSID here:              https://support.lusid.com/filtering-results-from-lusid. (optional)</param>
        /// <returns>Task of ApiResponse (ResourceListOfGetRecipeResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ResourceListOfGetRecipeResponse>> ListConfigurationRecipesAsyncWithHttpInfo (DateTimeOffset? asAt = null, string filter = null);
        /// <summary>
        /// [EXPERIMENTAL] Upsert a Configuration Recipe. This creates or updates the data in Lusid.
        /// </summary>
        /// <remarks>
        /// Update or insert one Configuration Recipe in a single scope. An item will be updated if it already exists  and inserted if it does not.                The response will return the successfully updated or inserted Configuration Recipe or failure message if unsuccessful                It is important to always check to verify success (or failure).
        /// </remarks>
        /// <exception cref="Lusid.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="upsertRecipeRequest">The Configuration Recipe to update or insert</param>
        /// <returns>Task of UpsertSingleStructuredDataResponse</returns>
        System.Threading.Tasks.Task<UpsertSingleStructuredDataResponse> UpsertConfigurationRecipeAsync (UpsertRecipeRequest upsertRecipeRequest);

        /// <summary>
        /// [EXPERIMENTAL] Upsert a Configuration Recipe. This creates or updates the data in Lusid.
        /// </summary>
        /// <remarks>
        /// Update or insert one Configuration Recipe in a single scope. An item will be updated if it already exists  and inserted if it does not.                The response will return the successfully updated or inserted Configuration Recipe or failure message if unsuccessful                It is important to always check to verify success (or failure).
        /// </remarks>
        /// <exception cref="Lusid.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="upsertRecipeRequest">The Configuration Recipe to update or insert</param>
        /// <returns>Task of ApiResponse (UpsertSingleStructuredDataResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<UpsertSingleStructuredDataResponse>> UpsertConfigurationRecipeAsyncWithHttpInfo (UpsertRecipeRequest upsertRecipeRequest);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class ConfigurationRecipeApi : IConfigurationRecipeApi
    {
        private Lusid.Sdk.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="ConfigurationRecipeApi"/> class.
        /// </summary>
        /// <returns></returns>
        public ConfigurationRecipeApi(String basePath)
        {
            this.Configuration = new Lusid.Sdk.Client.Configuration { BasePath = basePath };

            ExceptionFactory = Lusid.Sdk.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ConfigurationRecipeApi"/> class
        /// </summary>
        /// <returns></returns>
        public ConfigurationRecipeApi()
        {
            this.Configuration = Lusid.Sdk.Client.Configuration.Default;

            ExceptionFactory = Lusid.Sdk.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ConfigurationRecipeApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public ConfigurationRecipeApi(Lusid.Sdk.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Lusid.Sdk.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = Lusid.Sdk.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Lusid.Sdk.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Lusid.Sdk.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// [EXPERIMENTAL] Delete a Configuration Recipe, assuming that it is present. Delete the specified Configuration Recipe from a single scope.                The response will return either detail of the deleted item, or an explanation (failure) as to why this did not succeed.                It is important to always check for any unsuccessful response.
        /// </summary>
        /// <exception cref="Lusid.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scope">The scope of the Configuration Recipe to delete.</param>
        /// <param name="code">The Configuration Recipe to delete.</param>
        /// <returns>AnnulSingleStructuredDataResponse</returns>
        public AnnulSingleStructuredDataResponse DeleteConfigurationRecipe (string scope, string code)
        {
             ApiResponse<AnnulSingleStructuredDataResponse> localVarResponse = DeleteConfigurationRecipeWithHttpInfo(scope, code);
             return localVarResponse.Data;
        }

        /// <summary>
        /// [EXPERIMENTAL] Delete a Configuration Recipe, assuming that it is present. Delete the specified Configuration Recipe from a single scope.                The response will return either detail of the deleted item, or an explanation (failure) as to why this did not succeed.                It is important to always check for any unsuccessful response.
        /// </summary>
        /// <exception cref="Lusid.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scope">The scope of the Configuration Recipe to delete.</param>
        /// <param name="code">The Configuration Recipe to delete.</param>
        /// <returns>ApiResponse of AnnulSingleStructuredDataResponse</returns>
        public ApiResponse< AnnulSingleStructuredDataResponse > DeleteConfigurationRecipeWithHttpInfo (string scope, string code)
        {
            // verify the required parameter 'scope' is set
            if (scope == null)
                throw new ApiException(400, "Missing required parameter 'scope' when calling ConfigurationRecipeApi->DeleteConfigurationRecipe");
            // verify the required parameter 'code' is set
            if (code == null)
                throw new ApiException(400, "Missing required parameter 'code' when calling ConfigurationRecipeApi->DeleteConfigurationRecipe");

            var localVarPath = "./api/recipes/{scope}/{code}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (scope != null) localVarPathParams.Add("scope", this.Configuration.ApiClient.ParameterToString(scope)); // path parameter
            if (code != null) localVarPathParams.Add("code", this.Configuration.ApiClient.ParameterToString(code)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            //  set the LUSID header
            localVarHeaderParams["X-LUSID-SDK-Language"] = "C#";
            localVarHeaderParams["X-LUSID-SDK-Version"] = "0.11.3422";

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteConfigurationRecipe", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AnnulSingleStructuredDataResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (AnnulSingleStructuredDataResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(AnnulSingleStructuredDataResponse)));
        }

        /// <summary>
        /// [EXPERIMENTAL] Delete a Configuration Recipe, assuming that it is present. Delete the specified Configuration Recipe from a single scope.                The response will return either detail of the deleted item, or an explanation (failure) as to why this did not succeed.                It is important to always check for any unsuccessful response.
        /// </summary>
        /// <exception cref="Lusid.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scope">The scope of the Configuration Recipe to delete.</param>
        /// <param name="code">The Configuration Recipe to delete.</param>
        /// <returns>Task of AnnulSingleStructuredDataResponse</returns>
        public async System.Threading.Tasks.Task<AnnulSingleStructuredDataResponse> DeleteConfigurationRecipeAsync (string scope, string code)
        {
             ApiResponse<AnnulSingleStructuredDataResponse> localVarResponse = await DeleteConfigurationRecipeAsyncWithHttpInfo(scope, code);
             return localVarResponse.Data;

        }

        /// <summary>
        /// [EXPERIMENTAL] Delete a Configuration Recipe, assuming that it is present. Delete the specified Configuration Recipe from a single scope.                The response will return either detail of the deleted item, or an explanation (failure) as to why this did not succeed.                It is important to always check for any unsuccessful response.
        /// </summary>
        /// <exception cref="Lusid.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scope">The scope of the Configuration Recipe to delete.</param>
        /// <param name="code">The Configuration Recipe to delete.</param>
        /// <returns>Task of ApiResponse (AnnulSingleStructuredDataResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<AnnulSingleStructuredDataResponse>> DeleteConfigurationRecipeAsyncWithHttpInfo (string scope, string code)
        {
            // verify the required parameter 'scope' is set
            if (scope == null)
                throw new ApiException(400, "Missing required parameter 'scope' when calling ConfigurationRecipeApi->DeleteConfigurationRecipe");
            // verify the required parameter 'code' is set
            if (code == null)
                throw new ApiException(400, "Missing required parameter 'code' when calling ConfigurationRecipeApi->DeleteConfigurationRecipe");

            var localVarPath = "./api/recipes/{scope}/{code}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (scope != null) localVarPathParams.Add("scope", this.Configuration.ApiClient.ParameterToString(scope)); // path parameter
            if (code != null) localVarPathParams.Add("code", this.Configuration.ApiClient.ParameterToString(code)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            //  set the LUSID header
            localVarHeaderParams["X-LUSID-Sdk-Language"] = "C#";
            localVarHeaderParams["X-LUSID-Sdk-Version"] = "0.11.3422";

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteConfigurationRecipe", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AnnulSingleStructuredDataResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (AnnulSingleStructuredDataResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(AnnulSingleStructuredDataResponse)));
        }

        /// <summary>
        /// [EXPERIMENTAL] Get Configuration Recipe Get a Configuration Recipe from a single scope.                The response will return either the recipe that has been stored, or a failure explaining why the request was unsuccessful.                It is important to always check for any unsuccessful requests (failures).
        /// </summary>
        /// <exception cref="Lusid.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scope">The scope of the Configuration Recipe to retrieve.</param>
        /// <param name="code">The name of the recipe to retrieve the data for.</param>
        /// <param name="asAt">The asAt datetime at which to retrieve the Configuration Recipe. Defaults to return the latest version if not specified. (optional)</param>
        /// <returns>GetRecipeResponse</returns>
        public GetRecipeResponse GetConfigurationRecipe (string scope, string code, DateTimeOffset? asAt = null)
        {
             ApiResponse<GetRecipeResponse> localVarResponse = GetConfigurationRecipeWithHttpInfo(scope, code, asAt);
             return localVarResponse.Data;
        }

        /// <summary>
        /// [EXPERIMENTAL] Get Configuration Recipe Get a Configuration Recipe from a single scope.                The response will return either the recipe that has been stored, or a failure explaining why the request was unsuccessful.                It is important to always check for any unsuccessful requests (failures).
        /// </summary>
        /// <exception cref="Lusid.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scope">The scope of the Configuration Recipe to retrieve.</param>
        /// <param name="code">The name of the recipe to retrieve the data for.</param>
        /// <param name="asAt">The asAt datetime at which to retrieve the Configuration Recipe. Defaults to return the latest version if not specified. (optional)</param>
        /// <returns>ApiResponse of GetRecipeResponse</returns>
        public ApiResponse< GetRecipeResponse > GetConfigurationRecipeWithHttpInfo (string scope, string code, DateTimeOffset? asAt = null)
        {
            // verify the required parameter 'scope' is set
            if (scope == null)
                throw new ApiException(400, "Missing required parameter 'scope' when calling ConfigurationRecipeApi->GetConfigurationRecipe");
            // verify the required parameter 'code' is set
            if (code == null)
                throw new ApiException(400, "Missing required parameter 'code' when calling ConfigurationRecipeApi->GetConfigurationRecipe");

            var localVarPath = "./api/recipes/{scope}/{code}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (scope != null) localVarPathParams.Add("scope", this.Configuration.ApiClient.ParameterToString(scope)); // path parameter
            if (code != null) localVarPathParams.Add("code", this.Configuration.ApiClient.ParameterToString(code)); // path parameter
            if (asAt != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "asAt", asAt)); // query parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            //  set the LUSID header
            localVarHeaderParams["X-LUSID-SDK-Language"] = "C#";
            localVarHeaderParams["X-LUSID-SDK-Version"] = "0.11.3422";

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetConfigurationRecipe", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetRecipeResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (GetRecipeResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetRecipeResponse)));
        }

        /// <summary>
        /// [EXPERIMENTAL] Get Configuration Recipe Get a Configuration Recipe from a single scope.                The response will return either the recipe that has been stored, or a failure explaining why the request was unsuccessful.                It is important to always check for any unsuccessful requests (failures).
        /// </summary>
        /// <exception cref="Lusid.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scope">The scope of the Configuration Recipe to retrieve.</param>
        /// <param name="code">The name of the recipe to retrieve the data for.</param>
        /// <param name="asAt">The asAt datetime at which to retrieve the Configuration Recipe. Defaults to return the latest version if not specified. (optional)</param>
        /// <returns>Task of GetRecipeResponse</returns>
        public async System.Threading.Tasks.Task<GetRecipeResponse> GetConfigurationRecipeAsync (string scope, string code, DateTimeOffset? asAt = null)
        {
             ApiResponse<GetRecipeResponse> localVarResponse = await GetConfigurationRecipeAsyncWithHttpInfo(scope, code, asAt);
             return localVarResponse.Data;

        }

        /// <summary>
        /// [EXPERIMENTAL] Get Configuration Recipe Get a Configuration Recipe from a single scope.                The response will return either the recipe that has been stored, or a failure explaining why the request was unsuccessful.                It is important to always check for any unsuccessful requests (failures).
        /// </summary>
        /// <exception cref="Lusid.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scope">The scope of the Configuration Recipe to retrieve.</param>
        /// <param name="code">The name of the recipe to retrieve the data for.</param>
        /// <param name="asAt">The asAt datetime at which to retrieve the Configuration Recipe. Defaults to return the latest version if not specified. (optional)</param>
        /// <returns>Task of ApiResponse (GetRecipeResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<GetRecipeResponse>> GetConfigurationRecipeAsyncWithHttpInfo (string scope, string code, DateTimeOffset? asAt = null)
        {
            // verify the required parameter 'scope' is set
            if (scope == null)
                throw new ApiException(400, "Missing required parameter 'scope' when calling ConfigurationRecipeApi->GetConfigurationRecipe");
            // verify the required parameter 'code' is set
            if (code == null)
                throw new ApiException(400, "Missing required parameter 'code' when calling ConfigurationRecipeApi->GetConfigurationRecipe");

            var localVarPath = "./api/recipes/{scope}/{code}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (scope != null) localVarPathParams.Add("scope", this.Configuration.ApiClient.ParameterToString(scope)); // path parameter
            if (code != null) localVarPathParams.Add("code", this.Configuration.ApiClient.ParameterToString(code)); // path parameter
            if (asAt != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "asAt", asAt)); // query parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            //  set the LUSID header
            localVarHeaderParams["X-LUSID-Sdk-Language"] = "C#";
            localVarHeaderParams["X-LUSID-Sdk-Version"] = "0.11.3422";

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetConfigurationRecipe", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetRecipeResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (GetRecipeResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetRecipeResponse)));
        }

        /// <summary>
        /// [EXPERIMENTAL] List the set of Configuration Recipes List the set of configuration recipes at the specified date/time and scope
        /// </summary>
        /// <exception cref="Lusid.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="asAt">The asAt datetime at which to list the Configuration Recipes. Defaults to latest if not specified. (optional)</param>
        /// <param name="filter">Expression to filter the result set. Read more about filtering results from LUSID here:              https://support.lusid.com/filtering-results-from-lusid. (optional)</param>
        /// <returns>ResourceListOfGetRecipeResponse</returns>
        public ResourceListOfGetRecipeResponse ListConfigurationRecipes (DateTimeOffset? asAt = null, string filter = null)
        {
             ApiResponse<ResourceListOfGetRecipeResponse> localVarResponse = ListConfigurationRecipesWithHttpInfo(asAt, filter);
             return localVarResponse.Data;
        }

        /// <summary>
        /// [EXPERIMENTAL] List the set of Configuration Recipes List the set of configuration recipes at the specified date/time and scope
        /// </summary>
        /// <exception cref="Lusid.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="asAt">The asAt datetime at which to list the Configuration Recipes. Defaults to latest if not specified. (optional)</param>
        /// <param name="filter">Expression to filter the result set. Read more about filtering results from LUSID here:              https://support.lusid.com/filtering-results-from-lusid. (optional)</param>
        /// <returns>ApiResponse of ResourceListOfGetRecipeResponse</returns>
        public ApiResponse< ResourceListOfGetRecipeResponse > ListConfigurationRecipesWithHttpInfo (DateTimeOffset? asAt = null, string filter = null)
        {

            var localVarPath = "./api/recipes";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (asAt != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "asAt", asAt)); // query parameter
            if (filter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "filter", filter)); // query parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            //  set the LUSID header
            localVarHeaderParams["X-LUSID-SDK-Language"] = "C#";
            localVarHeaderParams["X-LUSID-SDK-Version"] = "0.11.3422";

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ListConfigurationRecipes", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResourceListOfGetRecipeResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (ResourceListOfGetRecipeResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResourceListOfGetRecipeResponse)));
        }

        /// <summary>
        /// [EXPERIMENTAL] List the set of Configuration Recipes List the set of configuration recipes at the specified date/time and scope
        /// </summary>
        /// <exception cref="Lusid.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="asAt">The asAt datetime at which to list the Configuration Recipes. Defaults to latest if not specified. (optional)</param>
        /// <param name="filter">Expression to filter the result set. Read more about filtering results from LUSID here:              https://support.lusid.com/filtering-results-from-lusid. (optional)</param>
        /// <returns>Task of ResourceListOfGetRecipeResponse</returns>
        public async System.Threading.Tasks.Task<ResourceListOfGetRecipeResponse> ListConfigurationRecipesAsync (DateTimeOffset? asAt = null, string filter = null)
        {
             ApiResponse<ResourceListOfGetRecipeResponse> localVarResponse = await ListConfigurationRecipesAsyncWithHttpInfo(asAt, filter);
             return localVarResponse.Data;

        }

        /// <summary>
        /// [EXPERIMENTAL] List the set of Configuration Recipes List the set of configuration recipes at the specified date/time and scope
        /// </summary>
        /// <exception cref="Lusid.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="asAt">The asAt datetime at which to list the Configuration Recipes. Defaults to latest if not specified. (optional)</param>
        /// <param name="filter">Expression to filter the result set. Read more about filtering results from LUSID here:              https://support.lusid.com/filtering-results-from-lusid. (optional)</param>
        /// <returns>Task of ApiResponse (ResourceListOfGetRecipeResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ResourceListOfGetRecipeResponse>> ListConfigurationRecipesAsyncWithHttpInfo (DateTimeOffset? asAt = null, string filter = null)
        {

            var localVarPath = "./api/recipes";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (asAt != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "asAt", asAt)); // query parameter
            if (filter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "filter", filter)); // query parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            //  set the LUSID header
            localVarHeaderParams["X-LUSID-Sdk-Language"] = "C#";
            localVarHeaderParams["X-LUSID-Sdk-Version"] = "0.11.3422";

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ListConfigurationRecipes", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResourceListOfGetRecipeResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (ResourceListOfGetRecipeResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResourceListOfGetRecipeResponse)));
        }

        /// <summary>
        /// [EXPERIMENTAL] Upsert a Configuration Recipe. This creates or updates the data in Lusid. Update or insert one Configuration Recipe in a single scope. An item will be updated if it already exists  and inserted if it does not.                The response will return the successfully updated or inserted Configuration Recipe or failure message if unsuccessful                It is important to always check to verify success (or failure).
        /// </summary>
        /// <exception cref="Lusid.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="upsertRecipeRequest">The Configuration Recipe to update or insert</param>
        /// <returns>UpsertSingleStructuredDataResponse</returns>
        public UpsertSingleStructuredDataResponse UpsertConfigurationRecipe (UpsertRecipeRequest upsertRecipeRequest)
        {
             ApiResponse<UpsertSingleStructuredDataResponse> localVarResponse = UpsertConfigurationRecipeWithHttpInfo(upsertRecipeRequest);
             return localVarResponse.Data;
        }

        /// <summary>
        /// [EXPERIMENTAL] Upsert a Configuration Recipe. This creates or updates the data in Lusid. Update or insert one Configuration Recipe in a single scope. An item will be updated if it already exists  and inserted if it does not.                The response will return the successfully updated or inserted Configuration Recipe or failure message if unsuccessful                It is important to always check to verify success (or failure).
        /// </summary>
        /// <exception cref="Lusid.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="upsertRecipeRequest">The Configuration Recipe to update or insert</param>
        /// <returns>ApiResponse of UpsertSingleStructuredDataResponse</returns>
        public ApiResponse< UpsertSingleStructuredDataResponse > UpsertConfigurationRecipeWithHttpInfo (UpsertRecipeRequest upsertRecipeRequest)
        {
            // verify the required parameter 'upsertRecipeRequest' is set
            if (upsertRecipeRequest == null)
                throw new ApiException(400, "Missing required parameter 'upsertRecipeRequest' when calling ConfigurationRecipeApi->UpsertConfigurationRecipe");

            var localVarPath = "./api/recipes";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (upsertRecipeRequest != null && upsertRecipeRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(upsertRecipeRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = upsertRecipeRequest; // byte array
            }

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            //  set the LUSID header
            localVarHeaderParams["X-LUSID-SDK-Language"] = "C#";
            localVarHeaderParams["X-LUSID-SDK-Version"] = "0.11.3422";

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpsertConfigurationRecipe", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<UpsertSingleStructuredDataResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (UpsertSingleStructuredDataResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(UpsertSingleStructuredDataResponse)));
        }

        /// <summary>
        /// [EXPERIMENTAL] Upsert a Configuration Recipe. This creates or updates the data in Lusid. Update or insert one Configuration Recipe in a single scope. An item will be updated if it already exists  and inserted if it does not.                The response will return the successfully updated or inserted Configuration Recipe or failure message if unsuccessful                It is important to always check to verify success (or failure).
        /// </summary>
        /// <exception cref="Lusid.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="upsertRecipeRequest">The Configuration Recipe to update or insert</param>
        /// <returns>Task of UpsertSingleStructuredDataResponse</returns>
        public async System.Threading.Tasks.Task<UpsertSingleStructuredDataResponse> UpsertConfigurationRecipeAsync (UpsertRecipeRequest upsertRecipeRequest)
        {
             ApiResponse<UpsertSingleStructuredDataResponse> localVarResponse = await UpsertConfigurationRecipeAsyncWithHttpInfo(upsertRecipeRequest);
             return localVarResponse.Data;

        }

        /// <summary>
        /// [EXPERIMENTAL] Upsert a Configuration Recipe. This creates or updates the data in Lusid. Update or insert one Configuration Recipe in a single scope. An item will be updated if it already exists  and inserted if it does not.                The response will return the successfully updated or inserted Configuration Recipe or failure message if unsuccessful                It is important to always check to verify success (or failure).
        /// </summary>
        /// <exception cref="Lusid.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="upsertRecipeRequest">The Configuration Recipe to update or insert</param>
        /// <returns>Task of ApiResponse (UpsertSingleStructuredDataResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<UpsertSingleStructuredDataResponse>> UpsertConfigurationRecipeAsyncWithHttpInfo (UpsertRecipeRequest upsertRecipeRequest)
        {
            // verify the required parameter 'upsertRecipeRequest' is set
            if (upsertRecipeRequest == null)
                throw new ApiException(400, "Missing required parameter 'upsertRecipeRequest' when calling ConfigurationRecipeApi->UpsertConfigurationRecipe");

            var localVarPath = "./api/recipes";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (upsertRecipeRequest != null && upsertRecipeRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(upsertRecipeRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = upsertRecipeRequest; // byte array
            }

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            //  set the LUSID header
            localVarHeaderParams["X-LUSID-Sdk-Language"] = "C#";
            localVarHeaderParams["X-LUSID-Sdk-Version"] = "0.11.3422";

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpsertConfigurationRecipe", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<UpsertSingleStructuredDataResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (UpsertSingleStructuredDataResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(UpsertSingleStructuredDataResponse)));
        }

    }
}