/* 
 * LUSID API
 *
 * # Introduction  This page documents the [LUSID APIs](https://www.lusid.com/api/swagger), which allows authorised clients to query and update their data within the LUSID platform.  SDKs to interact with the LUSID APIs are available in the following languages and frameworks:  * [C#](https://github.com/finbourne/lusid-sdk-csharp) * [Java](https://github.com/finbourne/lusid-sdk-java) * [JavaScript](https://github.com/finbourne/lusid-sdk-js) * [Python](https://github.com/finbourne/lusid-sdk-python) * [Angular](https://github.com/finbourne/lusid-sdk-angular)  The LUSID platform is made up of a number of sub-applications. You can find the API / swagger documentation by following the links in the table below.   | Application | Description | API / Swagger Documentation | | - -- -- | - -- -- | - -- - | | LUSID | Open, API-first, developer-friendly investment data platform. | [Swagger](https://www.lusid.com/api/swagger/index.html) | | Web app | User-facing front end for LUSID. | [Swagger](https://www.lusid.com/app/swagger/index.html) | | Scheduler | Automated job scheduler. | [Swagger](https://www.lusid.com/scheduler2/swagger/index.html) | | Insights |Monitoring and troubleshooting service. | [Swagger](https://www.lusid.com/insights/swagger/index.html) | | Identity | Identity management for LUSID (in conjuction with Access) | [Swagger](https://www.lusid.com/identity/swagger/index.html) | | Access | Access control for LUSID (in conjunction with Identity) | [Swagger](https://www.lusid.com/access/swagger/index.html) | | Drive | Secure file repository and manager for collaboration. | [Swagger](https://www.lusid.com/drive/swagger/index.html) | | Luminesce | Data virtualisation service (query data from multiple providers, including LUSID) | [Swagger](https://www.lusid.com/honeycomb/swagger/index.html) | | Notification | Notification service. | [Swagger](https://www.lusid.com/notifications/swagger/index.html) | | Configuration | File store for secrets and other sensitive information. | [Swagger](https://www.lusid.com/configuration/swagger/index.html) | 
 *
 * The version of the OpenAPI document: 0.11.3418
 * Contact: info@finbourne.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp.Portable;
using Lusid.Sdk.Client;
using Lusid.Sdk.Model;

namespace Lusid.Sdk.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ICounterpartiesApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// [EXPERIMENTAL] Delete the Counterparty Agreement of given scope and code
        /// </summary>
        /// <remarks>
        /// Delete the specified Counterparty Agreement from a single scope.  The response will return either detail of the deleted item, or an explanation (failure) as to why this did not succeed.                It is important to always check for any unsuccessful response.
        /// </remarks>
        /// <exception cref="Lusid.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scope">The scope of the Counterparty Agreement to delete.</param>
        /// <param name="code">The Counterparty Agreement to delete.</param>
        /// <returns>AnnulSingleStructuredDataResponse</returns>
        AnnulSingleStructuredDataResponse DeleteCounterpartyAgreement (string scope, string code);

        /// <summary>
        /// [EXPERIMENTAL] Delete the Counterparty Agreement of given scope and code
        /// </summary>
        /// <remarks>
        /// Delete the specified Counterparty Agreement from a single scope.  The response will return either detail of the deleted item, or an explanation (failure) as to why this did not succeed.                It is important to always check for any unsuccessful response.
        /// </remarks>
        /// <exception cref="Lusid.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scope">The scope of the Counterparty Agreement to delete.</param>
        /// <param name="code">The Counterparty Agreement to delete.</param>
        /// <returns>ApiResponse of AnnulSingleStructuredDataResponse</returns>
        ApiResponse<AnnulSingleStructuredDataResponse> DeleteCounterpartyAgreementWithHttpInfo (string scope, string code);
        /// <summary>
        /// [EXPERIMENTAL] Delete the Credit Support Annex of given scope and code
        /// </summary>
        /// <remarks>
        /// Delete the specified Credit Support Annex from a single scope.  The response will return either detail of the deleted item, or an explanation (failure) as to why this did not succeed.                It is important to always check for any unsuccessful response.
        /// </remarks>
        /// <exception cref="Lusid.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scope">The scope of the Credit Support Annex to delete.</param>
        /// <param name="code">The Credit Support Annex to delete.</param>
        /// <returns>AnnulSingleStructuredDataResponse</returns>
        AnnulSingleStructuredDataResponse DeleteCreditSupportAnnex (string scope, string code);

        /// <summary>
        /// [EXPERIMENTAL] Delete the Credit Support Annex of given scope and code
        /// </summary>
        /// <remarks>
        /// Delete the specified Credit Support Annex from a single scope.  The response will return either detail of the deleted item, or an explanation (failure) as to why this did not succeed.                It is important to always check for any unsuccessful response.
        /// </remarks>
        /// <exception cref="Lusid.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scope">The scope of the Credit Support Annex to delete.</param>
        /// <param name="code">The Credit Support Annex to delete.</param>
        /// <returns>ApiResponse of AnnulSingleStructuredDataResponse</returns>
        ApiResponse<AnnulSingleStructuredDataResponse> DeleteCreditSupportAnnexWithHttpInfo (string scope, string code);
        /// <summary>
        /// [EXPERIMENTAL] Get Counterparty Agreement
        /// </summary>
        /// <remarks>
        /// Get a Counterparty Agreement from a single scope.  The response will return either the Counterparty Agreement that has been stored, or a failure explaining why the request was unsuccessful.  It is important to always check for any unsuccessful requests (failures).
        /// </remarks>
        /// <exception cref="Lusid.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scope">The scope of the Counterparty Agreement to retrieve.</param>
        /// <param name="code">The name of the Counterparty Agreement to retrieve the data for.</param>
        /// <param name="asAt">The asAt datetime at which to retrieve the Counterparty Agreement. Defaults to return the latest version if not specified. (optional)</param>
        /// <returns>GetCounterpartyAgreementResponse</returns>
        GetCounterpartyAgreementResponse GetCounterpartyAgreement (string scope, string code, DateTimeOffset? asAt = null);

        /// <summary>
        /// [EXPERIMENTAL] Get Counterparty Agreement
        /// </summary>
        /// <remarks>
        /// Get a Counterparty Agreement from a single scope.  The response will return either the Counterparty Agreement that has been stored, or a failure explaining why the request was unsuccessful.  It is important to always check for any unsuccessful requests (failures).
        /// </remarks>
        /// <exception cref="Lusid.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scope">The scope of the Counterparty Agreement to retrieve.</param>
        /// <param name="code">The name of the Counterparty Agreement to retrieve the data for.</param>
        /// <param name="asAt">The asAt datetime at which to retrieve the Counterparty Agreement. Defaults to return the latest version if not specified. (optional)</param>
        /// <returns>ApiResponse of GetCounterpartyAgreementResponse</returns>
        ApiResponse<GetCounterpartyAgreementResponse> GetCounterpartyAgreementWithHttpInfo (string scope, string code, DateTimeOffset? asAt = null);
        /// <summary>
        /// [EXPERIMENTAL] Get Credit Support Annex
        /// </summary>
        /// <remarks>
        /// Get a Credit Support Annex from a single scope.  The response will return either the Credit Support Annex that has been stored, or a failure explaining why the request was unsuccessful.  It is important to always check for any unsuccessful requests (failures).
        /// </remarks>
        /// <exception cref="Lusid.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scope">The scope of the Credit Support Annex to retrieve.</param>
        /// <param name="code">The name of the Credit Support Annex to retrieve the data for.</param>
        /// <param name="asAt">The asAt datetime at which to retrieve the Credit Support Annex . Defaults to return the latest version if not specified. (optional)</param>
        /// <returns>GetCreditSupportAnnexResponse</returns>
        GetCreditSupportAnnexResponse GetCreditSupportAnnex (string scope, string code, DateTimeOffset? asAt = null);

        /// <summary>
        /// [EXPERIMENTAL] Get Credit Support Annex
        /// </summary>
        /// <remarks>
        /// Get a Credit Support Annex from a single scope.  The response will return either the Credit Support Annex that has been stored, or a failure explaining why the request was unsuccessful.  It is important to always check for any unsuccessful requests (failures).
        /// </remarks>
        /// <exception cref="Lusid.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scope">The scope of the Credit Support Annex to retrieve.</param>
        /// <param name="code">The name of the Credit Support Annex to retrieve the data for.</param>
        /// <param name="asAt">The asAt datetime at which to retrieve the Credit Support Annex . Defaults to return the latest version if not specified. (optional)</param>
        /// <returns>ApiResponse of GetCreditSupportAnnexResponse</returns>
        ApiResponse<GetCreditSupportAnnexResponse> GetCreditSupportAnnexWithHttpInfo (string scope, string code, DateTimeOffset? asAt = null);
        /// <summary>
        /// [EXPERIMENTAL] List the set of Counterparty Agreements
        /// </summary>
        /// <remarks>
        /// List the set of Counterparty Agreements at the specified AsAt date/time
        /// </remarks>
        /// <exception cref="Lusid.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="asAt">The asAt datetime at which to list the Counterparty Agreements. Defaults to latest if not specified. (optional)</param>
        /// <returns>ResourceListOfGetCounterpartyAgreementResponse</returns>
        ResourceListOfGetCounterpartyAgreementResponse ListCounterpartyAgreements (DateTimeOffset? asAt = null);

        /// <summary>
        /// [EXPERIMENTAL] List the set of Counterparty Agreements
        /// </summary>
        /// <remarks>
        /// List the set of Counterparty Agreements at the specified AsAt date/time
        /// </remarks>
        /// <exception cref="Lusid.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="asAt">The asAt datetime at which to list the Counterparty Agreements. Defaults to latest if not specified. (optional)</param>
        /// <returns>ApiResponse of ResourceListOfGetCounterpartyAgreementResponse</returns>
        ApiResponse<ResourceListOfGetCounterpartyAgreementResponse> ListCounterpartyAgreementsWithHttpInfo (DateTimeOffset? asAt = null);
        /// <summary>
        /// [EXPERIMENTAL] List the set of Credit Support Annexes
        /// </summary>
        /// <remarks>
        /// List the set of Credit Support Annexes at the specified AsAt date/time
        /// </remarks>
        /// <exception cref="Lusid.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="asAt">The asAt datetime at which to list the Credit Support Annexes. Defaults to latest if not specified. (optional)</param>
        /// <returns>ResourceListOfGetCreditSupportAnnexResponse</returns>
        ResourceListOfGetCreditSupportAnnexResponse ListCreditSupportAnnexes (DateTimeOffset? asAt = null);

        /// <summary>
        /// [EXPERIMENTAL] List the set of Credit Support Annexes
        /// </summary>
        /// <remarks>
        /// List the set of Credit Support Annexes at the specified AsAt date/time
        /// </remarks>
        /// <exception cref="Lusid.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="asAt">The asAt datetime at which to list the Credit Support Annexes. Defaults to latest if not specified. (optional)</param>
        /// <returns>ApiResponse of ResourceListOfGetCreditSupportAnnexResponse</returns>
        ApiResponse<ResourceListOfGetCreditSupportAnnexResponse> ListCreditSupportAnnexesWithHttpInfo (DateTimeOffset? asAt = null);
        /// <summary>
        /// [EXPERIMENTAL] Upsert Counterparty Agreement
        /// </summary>
        /// <remarks>
        /// Update or insert Counterparty Agreement in a single scope. An item will be updated if it already exists and inserted if it does not.                The response will return the successfully updated or inserted Counterparty Agreement or failure message if unsuccessful                It is important to always check to verify success (or failure).
        /// </remarks>
        /// <exception cref="Lusid.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="upsertCounterpartyAgreementRequest">The Counterparty Agreement to update or insert</param>
        /// <returns>UpsertSingleStructuredDataResponse</returns>
        UpsertSingleStructuredDataResponse UpsertCounterpartyAgreement (UpsertCounterpartyAgreementRequest upsertCounterpartyAgreementRequest);

        /// <summary>
        /// [EXPERIMENTAL] Upsert Counterparty Agreement
        /// </summary>
        /// <remarks>
        /// Update or insert Counterparty Agreement in a single scope. An item will be updated if it already exists and inserted if it does not.                The response will return the successfully updated or inserted Counterparty Agreement or failure message if unsuccessful                It is important to always check to verify success (or failure).
        /// </remarks>
        /// <exception cref="Lusid.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="upsertCounterpartyAgreementRequest">The Counterparty Agreement to update or insert</param>
        /// <returns>ApiResponse of UpsertSingleStructuredDataResponse</returns>
        ApiResponse<UpsertSingleStructuredDataResponse> UpsertCounterpartyAgreementWithHttpInfo (UpsertCounterpartyAgreementRequest upsertCounterpartyAgreementRequest);
        /// <summary>
        /// [EXPERIMENTAL] Upsert Credit Support Annex
        /// </summary>
        /// <remarks>
        /// Update or insert Credit Support Annex in a single scope. An item will be updated if it already exists and inserted if it does not.                The response will return the successfully updated or inserted Credit Support Annex or failure message if unsuccessful                It is important to always check to verify success (or failure).
        /// </remarks>
        /// <exception cref="Lusid.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="upsertCreditSupportAnnexRequest">The Credit Support Annex to update or insert</param>
        /// <returns>UpsertSingleStructuredDataResponse</returns>
        UpsertSingleStructuredDataResponse UpsertCreditSupportAnnex (UpsertCreditSupportAnnexRequest upsertCreditSupportAnnexRequest);

        /// <summary>
        /// [EXPERIMENTAL] Upsert Credit Support Annex
        /// </summary>
        /// <remarks>
        /// Update or insert Credit Support Annex in a single scope. An item will be updated if it already exists and inserted if it does not.                The response will return the successfully updated or inserted Credit Support Annex or failure message if unsuccessful                It is important to always check to verify success (or failure).
        /// </remarks>
        /// <exception cref="Lusid.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="upsertCreditSupportAnnexRequest">The Credit Support Annex to update or insert</param>
        /// <returns>ApiResponse of UpsertSingleStructuredDataResponse</returns>
        ApiResponse<UpsertSingleStructuredDataResponse> UpsertCreditSupportAnnexWithHttpInfo (UpsertCreditSupportAnnexRequest upsertCreditSupportAnnexRequest);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// [EXPERIMENTAL] Delete the Counterparty Agreement of given scope and code
        /// </summary>
        /// <remarks>
        /// Delete the specified Counterparty Agreement from a single scope.  The response will return either detail of the deleted item, or an explanation (failure) as to why this did not succeed.                It is important to always check for any unsuccessful response.
        /// </remarks>
        /// <exception cref="Lusid.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scope">The scope of the Counterparty Agreement to delete.</param>
        /// <param name="code">The Counterparty Agreement to delete.</param>
        /// <returns>Task of AnnulSingleStructuredDataResponse</returns>
        System.Threading.Tasks.Task<AnnulSingleStructuredDataResponse> DeleteCounterpartyAgreementAsync (string scope, string code);

        /// <summary>
        /// [EXPERIMENTAL] Delete the Counterparty Agreement of given scope and code
        /// </summary>
        /// <remarks>
        /// Delete the specified Counterparty Agreement from a single scope.  The response will return either detail of the deleted item, or an explanation (failure) as to why this did not succeed.                It is important to always check for any unsuccessful response.
        /// </remarks>
        /// <exception cref="Lusid.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scope">The scope of the Counterparty Agreement to delete.</param>
        /// <param name="code">The Counterparty Agreement to delete.</param>
        /// <returns>Task of ApiResponse (AnnulSingleStructuredDataResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<AnnulSingleStructuredDataResponse>> DeleteCounterpartyAgreementAsyncWithHttpInfo (string scope, string code);
        /// <summary>
        /// [EXPERIMENTAL] Delete the Credit Support Annex of given scope and code
        /// </summary>
        /// <remarks>
        /// Delete the specified Credit Support Annex from a single scope.  The response will return either detail of the deleted item, or an explanation (failure) as to why this did not succeed.                It is important to always check for any unsuccessful response.
        /// </remarks>
        /// <exception cref="Lusid.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scope">The scope of the Credit Support Annex to delete.</param>
        /// <param name="code">The Credit Support Annex to delete.</param>
        /// <returns>Task of AnnulSingleStructuredDataResponse</returns>
        System.Threading.Tasks.Task<AnnulSingleStructuredDataResponse> DeleteCreditSupportAnnexAsync (string scope, string code);

        /// <summary>
        /// [EXPERIMENTAL] Delete the Credit Support Annex of given scope and code
        /// </summary>
        /// <remarks>
        /// Delete the specified Credit Support Annex from a single scope.  The response will return either detail of the deleted item, or an explanation (failure) as to why this did not succeed.                It is important to always check for any unsuccessful response.
        /// </remarks>
        /// <exception cref="Lusid.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scope">The scope of the Credit Support Annex to delete.</param>
        /// <param name="code">The Credit Support Annex to delete.</param>
        /// <returns>Task of ApiResponse (AnnulSingleStructuredDataResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<AnnulSingleStructuredDataResponse>> DeleteCreditSupportAnnexAsyncWithHttpInfo (string scope, string code);
        /// <summary>
        /// [EXPERIMENTAL] Get Counterparty Agreement
        /// </summary>
        /// <remarks>
        /// Get a Counterparty Agreement from a single scope.  The response will return either the Counterparty Agreement that has been stored, or a failure explaining why the request was unsuccessful.  It is important to always check for any unsuccessful requests (failures).
        /// </remarks>
        /// <exception cref="Lusid.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scope">The scope of the Counterparty Agreement to retrieve.</param>
        /// <param name="code">The name of the Counterparty Agreement to retrieve the data for.</param>
        /// <param name="asAt">The asAt datetime at which to retrieve the Counterparty Agreement. Defaults to return the latest version if not specified. (optional)</param>
        /// <returns>Task of GetCounterpartyAgreementResponse</returns>
        System.Threading.Tasks.Task<GetCounterpartyAgreementResponse> GetCounterpartyAgreementAsync (string scope, string code, DateTimeOffset? asAt = null);

        /// <summary>
        /// [EXPERIMENTAL] Get Counterparty Agreement
        /// </summary>
        /// <remarks>
        /// Get a Counterparty Agreement from a single scope.  The response will return either the Counterparty Agreement that has been stored, or a failure explaining why the request was unsuccessful.  It is important to always check for any unsuccessful requests (failures).
        /// </remarks>
        /// <exception cref="Lusid.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scope">The scope of the Counterparty Agreement to retrieve.</param>
        /// <param name="code">The name of the Counterparty Agreement to retrieve the data for.</param>
        /// <param name="asAt">The asAt datetime at which to retrieve the Counterparty Agreement. Defaults to return the latest version if not specified. (optional)</param>
        /// <returns>Task of ApiResponse (GetCounterpartyAgreementResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetCounterpartyAgreementResponse>> GetCounterpartyAgreementAsyncWithHttpInfo (string scope, string code, DateTimeOffset? asAt = null);
        /// <summary>
        /// [EXPERIMENTAL] Get Credit Support Annex
        /// </summary>
        /// <remarks>
        /// Get a Credit Support Annex from a single scope.  The response will return either the Credit Support Annex that has been stored, or a failure explaining why the request was unsuccessful.  It is important to always check for any unsuccessful requests (failures).
        /// </remarks>
        /// <exception cref="Lusid.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scope">The scope of the Credit Support Annex to retrieve.</param>
        /// <param name="code">The name of the Credit Support Annex to retrieve the data for.</param>
        /// <param name="asAt">The asAt datetime at which to retrieve the Credit Support Annex . Defaults to return the latest version if not specified. (optional)</param>
        /// <returns>Task of GetCreditSupportAnnexResponse</returns>
        System.Threading.Tasks.Task<GetCreditSupportAnnexResponse> GetCreditSupportAnnexAsync (string scope, string code, DateTimeOffset? asAt = null);

        /// <summary>
        /// [EXPERIMENTAL] Get Credit Support Annex
        /// </summary>
        /// <remarks>
        /// Get a Credit Support Annex from a single scope.  The response will return either the Credit Support Annex that has been stored, or a failure explaining why the request was unsuccessful.  It is important to always check for any unsuccessful requests (failures).
        /// </remarks>
        /// <exception cref="Lusid.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scope">The scope of the Credit Support Annex to retrieve.</param>
        /// <param name="code">The name of the Credit Support Annex to retrieve the data for.</param>
        /// <param name="asAt">The asAt datetime at which to retrieve the Credit Support Annex . Defaults to return the latest version if not specified. (optional)</param>
        /// <returns>Task of ApiResponse (GetCreditSupportAnnexResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetCreditSupportAnnexResponse>> GetCreditSupportAnnexAsyncWithHttpInfo (string scope, string code, DateTimeOffset? asAt = null);
        /// <summary>
        /// [EXPERIMENTAL] List the set of Counterparty Agreements
        /// </summary>
        /// <remarks>
        /// List the set of Counterparty Agreements at the specified AsAt date/time
        /// </remarks>
        /// <exception cref="Lusid.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="asAt">The asAt datetime at which to list the Counterparty Agreements. Defaults to latest if not specified. (optional)</param>
        /// <returns>Task of ResourceListOfGetCounterpartyAgreementResponse</returns>
        System.Threading.Tasks.Task<ResourceListOfGetCounterpartyAgreementResponse> ListCounterpartyAgreementsAsync (DateTimeOffset? asAt = null);

        /// <summary>
        /// [EXPERIMENTAL] List the set of Counterparty Agreements
        /// </summary>
        /// <remarks>
        /// List the set of Counterparty Agreements at the specified AsAt date/time
        /// </remarks>
        /// <exception cref="Lusid.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="asAt">The asAt datetime at which to list the Counterparty Agreements. Defaults to latest if not specified. (optional)</param>
        /// <returns>Task of ApiResponse (ResourceListOfGetCounterpartyAgreementResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ResourceListOfGetCounterpartyAgreementResponse>> ListCounterpartyAgreementsAsyncWithHttpInfo (DateTimeOffset? asAt = null);
        /// <summary>
        /// [EXPERIMENTAL] List the set of Credit Support Annexes
        /// </summary>
        /// <remarks>
        /// List the set of Credit Support Annexes at the specified AsAt date/time
        /// </remarks>
        /// <exception cref="Lusid.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="asAt">The asAt datetime at which to list the Credit Support Annexes. Defaults to latest if not specified. (optional)</param>
        /// <returns>Task of ResourceListOfGetCreditSupportAnnexResponse</returns>
        System.Threading.Tasks.Task<ResourceListOfGetCreditSupportAnnexResponse> ListCreditSupportAnnexesAsync (DateTimeOffset? asAt = null);

        /// <summary>
        /// [EXPERIMENTAL] List the set of Credit Support Annexes
        /// </summary>
        /// <remarks>
        /// List the set of Credit Support Annexes at the specified AsAt date/time
        /// </remarks>
        /// <exception cref="Lusid.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="asAt">The asAt datetime at which to list the Credit Support Annexes. Defaults to latest if not specified. (optional)</param>
        /// <returns>Task of ApiResponse (ResourceListOfGetCreditSupportAnnexResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ResourceListOfGetCreditSupportAnnexResponse>> ListCreditSupportAnnexesAsyncWithHttpInfo (DateTimeOffset? asAt = null);
        /// <summary>
        /// [EXPERIMENTAL] Upsert Counterparty Agreement
        /// </summary>
        /// <remarks>
        /// Update or insert Counterparty Agreement in a single scope. An item will be updated if it already exists and inserted if it does not.                The response will return the successfully updated or inserted Counterparty Agreement or failure message if unsuccessful                It is important to always check to verify success (or failure).
        /// </remarks>
        /// <exception cref="Lusid.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="upsertCounterpartyAgreementRequest">The Counterparty Agreement to update or insert</param>
        /// <returns>Task of UpsertSingleStructuredDataResponse</returns>
        System.Threading.Tasks.Task<UpsertSingleStructuredDataResponse> UpsertCounterpartyAgreementAsync (UpsertCounterpartyAgreementRequest upsertCounterpartyAgreementRequest);

        /// <summary>
        /// [EXPERIMENTAL] Upsert Counterparty Agreement
        /// </summary>
        /// <remarks>
        /// Update or insert Counterparty Agreement in a single scope. An item will be updated if it already exists and inserted if it does not.                The response will return the successfully updated or inserted Counterparty Agreement or failure message if unsuccessful                It is important to always check to verify success (or failure).
        /// </remarks>
        /// <exception cref="Lusid.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="upsertCounterpartyAgreementRequest">The Counterparty Agreement to update or insert</param>
        /// <returns>Task of ApiResponse (UpsertSingleStructuredDataResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<UpsertSingleStructuredDataResponse>> UpsertCounterpartyAgreementAsyncWithHttpInfo (UpsertCounterpartyAgreementRequest upsertCounterpartyAgreementRequest);
        /// <summary>
        /// [EXPERIMENTAL] Upsert Credit Support Annex
        /// </summary>
        /// <remarks>
        /// Update or insert Credit Support Annex in a single scope. An item will be updated if it already exists and inserted if it does not.                The response will return the successfully updated or inserted Credit Support Annex or failure message if unsuccessful                It is important to always check to verify success (or failure).
        /// </remarks>
        /// <exception cref="Lusid.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="upsertCreditSupportAnnexRequest">The Credit Support Annex to update or insert</param>
        /// <returns>Task of UpsertSingleStructuredDataResponse</returns>
        System.Threading.Tasks.Task<UpsertSingleStructuredDataResponse> UpsertCreditSupportAnnexAsync (UpsertCreditSupportAnnexRequest upsertCreditSupportAnnexRequest);

        /// <summary>
        /// [EXPERIMENTAL] Upsert Credit Support Annex
        /// </summary>
        /// <remarks>
        /// Update or insert Credit Support Annex in a single scope. An item will be updated if it already exists and inserted if it does not.                The response will return the successfully updated or inserted Credit Support Annex or failure message if unsuccessful                It is important to always check to verify success (or failure).
        /// </remarks>
        /// <exception cref="Lusid.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="upsertCreditSupportAnnexRequest">The Credit Support Annex to update or insert</param>
        /// <returns>Task of ApiResponse (UpsertSingleStructuredDataResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<UpsertSingleStructuredDataResponse>> UpsertCreditSupportAnnexAsyncWithHttpInfo (UpsertCreditSupportAnnexRequest upsertCreditSupportAnnexRequest);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class CounterpartiesApi : ICounterpartiesApi
    {
        private Lusid.Sdk.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="CounterpartiesApi"/> class.
        /// </summary>
        /// <returns></returns>
        public CounterpartiesApi(String basePath)
        {
            this.Configuration = new Lusid.Sdk.Client.Configuration { BasePath = basePath };

            ExceptionFactory = Lusid.Sdk.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="CounterpartiesApi"/> class
        /// </summary>
        /// <returns></returns>
        public CounterpartiesApi()
        {
            this.Configuration = Lusid.Sdk.Client.Configuration.Default;

            ExceptionFactory = Lusid.Sdk.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="CounterpartiesApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public CounterpartiesApi(Lusid.Sdk.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Lusid.Sdk.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = Lusid.Sdk.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Lusid.Sdk.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Lusid.Sdk.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// [EXPERIMENTAL] Delete the Counterparty Agreement of given scope and code Delete the specified Counterparty Agreement from a single scope.  The response will return either detail of the deleted item, or an explanation (failure) as to why this did not succeed.                It is important to always check for any unsuccessful response.
        /// </summary>
        /// <exception cref="Lusid.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scope">The scope of the Counterparty Agreement to delete.</param>
        /// <param name="code">The Counterparty Agreement to delete.</param>
        /// <returns>AnnulSingleStructuredDataResponse</returns>
        public AnnulSingleStructuredDataResponse DeleteCounterpartyAgreement (string scope, string code)
        {
             ApiResponse<AnnulSingleStructuredDataResponse> localVarResponse = DeleteCounterpartyAgreementWithHttpInfo(scope, code);
             return localVarResponse.Data;
        }

        /// <summary>
        /// [EXPERIMENTAL] Delete the Counterparty Agreement of given scope and code Delete the specified Counterparty Agreement from a single scope.  The response will return either detail of the deleted item, or an explanation (failure) as to why this did not succeed.                It is important to always check for any unsuccessful response.
        /// </summary>
        /// <exception cref="Lusid.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scope">The scope of the Counterparty Agreement to delete.</param>
        /// <param name="code">The Counterparty Agreement to delete.</param>
        /// <returns>ApiResponse of AnnulSingleStructuredDataResponse</returns>
        public ApiResponse< AnnulSingleStructuredDataResponse > DeleteCounterpartyAgreementWithHttpInfo (string scope, string code)
        {
            // verify the required parameter 'scope' is set
            if (scope == null)
                throw new ApiException(400, "Missing required parameter 'scope' when calling CounterpartiesApi->DeleteCounterpartyAgreement");
            // verify the required parameter 'code' is set
            if (code == null)
                throw new ApiException(400, "Missing required parameter 'code' when calling CounterpartiesApi->DeleteCounterpartyAgreement");

            var localVarPath = "./api/counterparties/counterpartyagreements/{scope}/{code}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (scope != null) localVarPathParams.Add("scope", this.Configuration.ApiClient.ParameterToString(scope)); // path parameter
            if (code != null) localVarPathParams.Add("code", this.Configuration.ApiClient.ParameterToString(code)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            //  set the LUSID header
            localVarHeaderParams["X-LUSID-SDK-Language"] = "C#";
            localVarHeaderParams["X-LUSID-SDK-Version"] = "0.11.3418";

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteCounterpartyAgreement", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AnnulSingleStructuredDataResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (AnnulSingleStructuredDataResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(AnnulSingleStructuredDataResponse)));
        }

        /// <summary>
        /// [EXPERIMENTAL] Delete the Counterparty Agreement of given scope and code Delete the specified Counterparty Agreement from a single scope.  The response will return either detail of the deleted item, or an explanation (failure) as to why this did not succeed.                It is important to always check for any unsuccessful response.
        /// </summary>
        /// <exception cref="Lusid.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scope">The scope of the Counterparty Agreement to delete.</param>
        /// <param name="code">The Counterparty Agreement to delete.</param>
        /// <returns>Task of AnnulSingleStructuredDataResponse</returns>
        public async System.Threading.Tasks.Task<AnnulSingleStructuredDataResponse> DeleteCounterpartyAgreementAsync (string scope, string code)
        {
             ApiResponse<AnnulSingleStructuredDataResponse> localVarResponse = await DeleteCounterpartyAgreementAsyncWithHttpInfo(scope, code);
             return localVarResponse.Data;

        }

        /// <summary>
        /// [EXPERIMENTAL] Delete the Counterparty Agreement of given scope and code Delete the specified Counterparty Agreement from a single scope.  The response will return either detail of the deleted item, or an explanation (failure) as to why this did not succeed.                It is important to always check for any unsuccessful response.
        /// </summary>
        /// <exception cref="Lusid.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scope">The scope of the Counterparty Agreement to delete.</param>
        /// <param name="code">The Counterparty Agreement to delete.</param>
        /// <returns>Task of ApiResponse (AnnulSingleStructuredDataResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<AnnulSingleStructuredDataResponse>> DeleteCounterpartyAgreementAsyncWithHttpInfo (string scope, string code)
        {
            // verify the required parameter 'scope' is set
            if (scope == null)
                throw new ApiException(400, "Missing required parameter 'scope' when calling CounterpartiesApi->DeleteCounterpartyAgreement");
            // verify the required parameter 'code' is set
            if (code == null)
                throw new ApiException(400, "Missing required parameter 'code' when calling CounterpartiesApi->DeleteCounterpartyAgreement");

            var localVarPath = "./api/counterparties/counterpartyagreements/{scope}/{code}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (scope != null) localVarPathParams.Add("scope", this.Configuration.ApiClient.ParameterToString(scope)); // path parameter
            if (code != null) localVarPathParams.Add("code", this.Configuration.ApiClient.ParameterToString(code)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            //  set the LUSID header
            localVarHeaderParams["X-LUSID-Sdk-Language"] = "C#";
            localVarHeaderParams["X-LUSID-Sdk-Version"] = "0.11.3418";

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteCounterpartyAgreement", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AnnulSingleStructuredDataResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (AnnulSingleStructuredDataResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(AnnulSingleStructuredDataResponse)));
        }

        /// <summary>
        /// [EXPERIMENTAL] Delete the Credit Support Annex of given scope and code Delete the specified Credit Support Annex from a single scope.  The response will return either detail of the deleted item, or an explanation (failure) as to why this did not succeed.                It is important to always check for any unsuccessful response.
        /// </summary>
        /// <exception cref="Lusid.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scope">The scope of the Credit Support Annex to delete.</param>
        /// <param name="code">The Credit Support Annex to delete.</param>
        /// <returns>AnnulSingleStructuredDataResponse</returns>
        public AnnulSingleStructuredDataResponse DeleteCreditSupportAnnex (string scope, string code)
        {
             ApiResponse<AnnulSingleStructuredDataResponse> localVarResponse = DeleteCreditSupportAnnexWithHttpInfo(scope, code);
             return localVarResponse.Data;
        }

        /// <summary>
        /// [EXPERIMENTAL] Delete the Credit Support Annex of given scope and code Delete the specified Credit Support Annex from a single scope.  The response will return either detail of the deleted item, or an explanation (failure) as to why this did not succeed.                It is important to always check for any unsuccessful response.
        /// </summary>
        /// <exception cref="Lusid.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scope">The scope of the Credit Support Annex to delete.</param>
        /// <param name="code">The Credit Support Annex to delete.</param>
        /// <returns>ApiResponse of AnnulSingleStructuredDataResponse</returns>
        public ApiResponse< AnnulSingleStructuredDataResponse > DeleteCreditSupportAnnexWithHttpInfo (string scope, string code)
        {
            // verify the required parameter 'scope' is set
            if (scope == null)
                throw new ApiException(400, "Missing required parameter 'scope' when calling CounterpartiesApi->DeleteCreditSupportAnnex");
            // verify the required parameter 'code' is set
            if (code == null)
                throw new ApiException(400, "Missing required parameter 'code' when calling CounterpartiesApi->DeleteCreditSupportAnnex");

            var localVarPath = "./api/counterparties/creditsupportannexes/{scope}/{code}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (scope != null) localVarPathParams.Add("scope", this.Configuration.ApiClient.ParameterToString(scope)); // path parameter
            if (code != null) localVarPathParams.Add("code", this.Configuration.ApiClient.ParameterToString(code)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            //  set the LUSID header
            localVarHeaderParams["X-LUSID-SDK-Language"] = "C#";
            localVarHeaderParams["X-LUSID-SDK-Version"] = "0.11.3418";

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteCreditSupportAnnex", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AnnulSingleStructuredDataResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (AnnulSingleStructuredDataResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(AnnulSingleStructuredDataResponse)));
        }

        /// <summary>
        /// [EXPERIMENTAL] Delete the Credit Support Annex of given scope and code Delete the specified Credit Support Annex from a single scope.  The response will return either detail of the deleted item, or an explanation (failure) as to why this did not succeed.                It is important to always check for any unsuccessful response.
        /// </summary>
        /// <exception cref="Lusid.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scope">The scope of the Credit Support Annex to delete.</param>
        /// <param name="code">The Credit Support Annex to delete.</param>
        /// <returns>Task of AnnulSingleStructuredDataResponse</returns>
        public async System.Threading.Tasks.Task<AnnulSingleStructuredDataResponse> DeleteCreditSupportAnnexAsync (string scope, string code)
        {
             ApiResponse<AnnulSingleStructuredDataResponse> localVarResponse = await DeleteCreditSupportAnnexAsyncWithHttpInfo(scope, code);
             return localVarResponse.Data;

        }

        /// <summary>
        /// [EXPERIMENTAL] Delete the Credit Support Annex of given scope and code Delete the specified Credit Support Annex from a single scope.  The response will return either detail of the deleted item, or an explanation (failure) as to why this did not succeed.                It is important to always check for any unsuccessful response.
        /// </summary>
        /// <exception cref="Lusid.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scope">The scope of the Credit Support Annex to delete.</param>
        /// <param name="code">The Credit Support Annex to delete.</param>
        /// <returns>Task of ApiResponse (AnnulSingleStructuredDataResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<AnnulSingleStructuredDataResponse>> DeleteCreditSupportAnnexAsyncWithHttpInfo (string scope, string code)
        {
            // verify the required parameter 'scope' is set
            if (scope == null)
                throw new ApiException(400, "Missing required parameter 'scope' when calling CounterpartiesApi->DeleteCreditSupportAnnex");
            // verify the required parameter 'code' is set
            if (code == null)
                throw new ApiException(400, "Missing required parameter 'code' when calling CounterpartiesApi->DeleteCreditSupportAnnex");

            var localVarPath = "./api/counterparties/creditsupportannexes/{scope}/{code}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (scope != null) localVarPathParams.Add("scope", this.Configuration.ApiClient.ParameterToString(scope)); // path parameter
            if (code != null) localVarPathParams.Add("code", this.Configuration.ApiClient.ParameterToString(code)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            //  set the LUSID header
            localVarHeaderParams["X-LUSID-Sdk-Language"] = "C#";
            localVarHeaderParams["X-LUSID-Sdk-Version"] = "0.11.3418";

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteCreditSupportAnnex", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AnnulSingleStructuredDataResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (AnnulSingleStructuredDataResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(AnnulSingleStructuredDataResponse)));
        }

        /// <summary>
        /// [EXPERIMENTAL] Get Counterparty Agreement Get a Counterparty Agreement from a single scope.  The response will return either the Counterparty Agreement that has been stored, or a failure explaining why the request was unsuccessful.  It is important to always check for any unsuccessful requests (failures).
        /// </summary>
        /// <exception cref="Lusid.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scope">The scope of the Counterparty Agreement to retrieve.</param>
        /// <param name="code">The name of the Counterparty Agreement to retrieve the data for.</param>
        /// <param name="asAt">The asAt datetime at which to retrieve the Counterparty Agreement. Defaults to return the latest version if not specified. (optional)</param>
        /// <returns>GetCounterpartyAgreementResponse</returns>
        public GetCounterpartyAgreementResponse GetCounterpartyAgreement (string scope, string code, DateTimeOffset? asAt = null)
        {
             ApiResponse<GetCounterpartyAgreementResponse> localVarResponse = GetCounterpartyAgreementWithHttpInfo(scope, code, asAt);
             return localVarResponse.Data;
        }

        /// <summary>
        /// [EXPERIMENTAL] Get Counterparty Agreement Get a Counterparty Agreement from a single scope.  The response will return either the Counterparty Agreement that has been stored, or a failure explaining why the request was unsuccessful.  It is important to always check for any unsuccessful requests (failures).
        /// </summary>
        /// <exception cref="Lusid.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scope">The scope of the Counterparty Agreement to retrieve.</param>
        /// <param name="code">The name of the Counterparty Agreement to retrieve the data for.</param>
        /// <param name="asAt">The asAt datetime at which to retrieve the Counterparty Agreement. Defaults to return the latest version if not specified. (optional)</param>
        /// <returns>ApiResponse of GetCounterpartyAgreementResponse</returns>
        public ApiResponse< GetCounterpartyAgreementResponse > GetCounterpartyAgreementWithHttpInfo (string scope, string code, DateTimeOffset? asAt = null)
        {
            // verify the required parameter 'scope' is set
            if (scope == null)
                throw new ApiException(400, "Missing required parameter 'scope' when calling CounterpartiesApi->GetCounterpartyAgreement");
            // verify the required parameter 'code' is set
            if (code == null)
                throw new ApiException(400, "Missing required parameter 'code' when calling CounterpartiesApi->GetCounterpartyAgreement");

            var localVarPath = "./api/counterparties/counterpartyagreements/{scope}/{code}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (scope != null) localVarPathParams.Add("scope", this.Configuration.ApiClient.ParameterToString(scope)); // path parameter
            if (code != null) localVarPathParams.Add("code", this.Configuration.ApiClient.ParameterToString(code)); // path parameter
            if (asAt != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "asAt", asAt)); // query parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            //  set the LUSID header
            localVarHeaderParams["X-LUSID-SDK-Language"] = "C#";
            localVarHeaderParams["X-LUSID-SDK-Version"] = "0.11.3418";

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetCounterpartyAgreement", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetCounterpartyAgreementResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (GetCounterpartyAgreementResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetCounterpartyAgreementResponse)));
        }

        /// <summary>
        /// [EXPERIMENTAL] Get Counterparty Agreement Get a Counterparty Agreement from a single scope.  The response will return either the Counterparty Agreement that has been stored, or a failure explaining why the request was unsuccessful.  It is important to always check for any unsuccessful requests (failures).
        /// </summary>
        /// <exception cref="Lusid.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scope">The scope of the Counterparty Agreement to retrieve.</param>
        /// <param name="code">The name of the Counterparty Agreement to retrieve the data for.</param>
        /// <param name="asAt">The asAt datetime at which to retrieve the Counterparty Agreement. Defaults to return the latest version if not specified. (optional)</param>
        /// <returns>Task of GetCounterpartyAgreementResponse</returns>
        public async System.Threading.Tasks.Task<GetCounterpartyAgreementResponse> GetCounterpartyAgreementAsync (string scope, string code, DateTimeOffset? asAt = null)
        {
             ApiResponse<GetCounterpartyAgreementResponse> localVarResponse = await GetCounterpartyAgreementAsyncWithHttpInfo(scope, code, asAt);
             return localVarResponse.Data;

        }

        /// <summary>
        /// [EXPERIMENTAL] Get Counterparty Agreement Get a Counterparty Agreement from a single scope.  The response will return either the Counterparty Agreement that has been stored, or a failure explaining why the request was unsuccessful.  It is important to always check for any unsuccessful requests (failures).
        /// </summary>
        /// <exception cref="Lusid.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scope">The scope of the Counterparty Agreement to retrieve.</param>
        /// <param name="code">The name of the Counterparty Agreement to retrieve the data for.</param>
        /// <param name="asAt">The asAt datetime at which to retrieve the Counterparty Agreement. Defaults to return the latest version if not specified. (optional)</param>
        /// <returns>Task of ApiResponse (GetCounterpartyAgreementResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<GetCounterpartyAgreementResponse>> GetCounterpartyAgreementAsyncWithHttpInfo (string scope, string code, DateTimeOffset? asAt = null)
        {
            // verify the required parameter 'scope' is set
            if (scope == null)
                throw new ApiException(400, "Missing required parameter 'scope' when calling CounterpartiesApi->GetCounterpartyAgreement");
            // verify the required parameter 'code' is set
            if (code == null)
                throw new ApiException(400, "Missing required parameter 'code' when calling CounterpartiesApi->GetCounterpartyAgreement");

            var localVarPath = "./api/counterparties/counterpartyagreements/{scope}/{code}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (scope != null) localVarPathParams.Add("scope", this.Configuration.ApiClient.ParameterToString(scope)); // path parameter
            if (code != null) localVarPathParams.Add("code", this.Configuration.ApiClient.ParameterToString(code)); // path parameter
            if (asAt != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "asAt", asAt)); // query parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            //  set the LUSID header
            localVarHeaderParams["X-LUSID-Sdk-Language"] = "C#";
            localVarHeaderParams["X-LUSID-Sdk-Version"] = "0.11.3418";

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetCounterpartyAgreement", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetCounterpartyAgreementResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (GetCounterpartyAgreementResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetCounterpartyAgreementResponse)));
        }

        /// <summary>
        /// [EXPERIMENTAL] Get Credit Support Annex Get a Credit Support Annex from a single scope.  The response will return either the Credit Support Annex that has been stored, or a failure explaining why the request was unsuccessful.  It is important to always check for any unsuccessful requests (failures).
        /// </summary>
        /// <exception cref="Lusid.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scope">The scope of the Credit Support Annex to retrieve.</param>
        /// <param name="code">The name of the Credit Support Annex to retrieve the data for.</param>
        /// <param name="asAt">The asAt datetime at which to retrieve the Credit Support Annex . Defaults to return the latest version if not specified. (optional)</param>
        /// <returns>GetCreditSupportAnnexResponse</returns>
        public GetCreditSupportAnnexResponse GetCreditSupportAnnex (string scope, string code, DateTimeOffset? asAt = null)
        {
             ApiResponse<GetCreditSupportAnnexResponse> localVarResponse = GetCreditSupportAnnexWithHttpInfo(scope, code, asAt);
             return localVarResponse.Data;
        }

        /// <summary>
        /// [EXPERIMENTAL] Get Credit Support Annex Get a Credit Support Annex from a single scope.  The response will return either the Credit Support Annex that has been stored, or a failure explaining why the request was unsuccessful.  It is important to always check for any unsuccessful requests (failures).
        /// </summary>
        /// <exception cref="Lusid.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scope">The scope of the Credit Support Annex to retrieve.</param>
        /// <param name="code">The name of the Credit Support Annex to retrieve the data for.</param>
        /// <param name="asAt">The asAt datetime at which to retrieve the Credit Support Annex . Defaults to return the latest version if not specified. (optional)</param>
        /// <returns>ApiResponse of GetCreditSupportAnnexResponse</returns>
        public ApiResponse< GetCreditSupportAnnexResponse > GetCreditSupportAnnexWithHttpInfo (string scope, string code, DateTimeOffset? asAt = null)
        {
            // verify the required parameter 'scope' is set
            if (scope == null)
                throw new ApiException(400, "Missing required parameter 'scope' when calling CounterpartiesApi->GetCreditSupportAnnex");
            // verify the required parameter 'code' is set
            if (code == null)
                throw new ApiException(400, "Missing required parameter 'code' when calling CounterpartiesApi->GetCreditSupportAnnex");

            var localVarPath = "./api/counterparties/creditsupportannexes/{scope}/{code}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (scope != null) localVarPathParams.Add("scope", this.Configuration.ApiClient.ParameterToString(scope)); // path parameter
            if (code != null) localVarPathParams.Add("code", this.Configuration.ApiClient.ParameterToString(code)); // path parameter
            if (asAt != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "asAt", asAt)); // query parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            //  set the LUSID header
            localVarHeaderParams["X-LUSID-SDK-Language"] = "C#";
            localVarHeaderParams["X-LUSID-SDK-Version"] = "0.11.3418";

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetCreditSupportAnnex", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetCreditSupportAnnexResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (GetCreditSupportAnnexResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetCreditSupportAnnexResponse)));
        }

        /// <summary>
        /// [EXPERIMENTAL] Get Credit Support Annex Get a Credit Support Annex from a single scope.  The response will return either the Credit Support Annex that has been stored, or a failure explaining why the request was unsuccessful.  It is important to always check for any unsuccessful requests (failures).
        /// </summary>
        /// <exception cref="Lusid.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scope">The scope of the Credit Support Annex to retrieve.</param>
        /// <param name="code">The name of the Credit Support Annex to retrieve the data for.</param>
        /// <param name="asAt">The asAt datetime at which to retrieve the Credit Support Annex . Defaults to return the latest version if not specified. (optional)</param>
        /// <returns>Task of GetCreditSupportAnnexResponse</returns>
        public async System.Threading.Tasks.Task<GetCreditSupportAnnexResponse> GetCreditSupportAnnexAsync (string scope, string code, DateTimeOffset? asAt = null)
        {
             ApiResponse<GetCreditSupportAnnexResponse> localVarResponse = await GetCreditSupportAnnexAsyncWithHttpInfo(scope, code, asAt);
             return localVarResponse.Data;

        }

        /// <summary>
        /// [EXPERIMENTAL] Get Credit Support Annex Get a Credit Support Annex from a single scope.  The response will return either the Credit Support Annex that has been stored, or a failure explaining why the request was unsuccessful.  It is important to always check for any unsuccessful requests (failures).
        /// </summary>
        /// <exception cref="Lusid.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scope">The scope of the Credit Support Annex to retrieve.</param>
        /// <param name="code">The name of the Credit Support Annex to retrieve the data for.</param>
        /// <param name="asAt">The asAt datetime at which to retrieve the Credit Support Annex . Defaults to return the latest version if not specified. (optional)</param>
        /// <returns>Task of ApiResponse (GetCreditSupportAnnexResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<GetCreditSupportAnnexResponse>> GetCreditSupportAnnexAsyncWithHttpInfo (string scope, string code, DateTimeOffset? asAt = null)
        {
            // verify the required parameter 'scope' is set
            if (scope == null)
                throw new ApiException(400, "Missing required parameter 'scope' when calling CounterpartiesApi->GetCreditSupportAnnex");
            // verify the required parameter 'code' is set
            if (code == null)
                throw new ApiException(400, "Missing required parameter 'code' when calling CounterpartiesApi->GetCreditSupportAnnex");

            var localVarPath = "./api/counterparties/creditsupportannexes/{scope}/{code}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (scope != null) localVarPathParams.Add("scope", this.Configuration.ApiClient.ParameterToString(scope)); // path parameter
            if (code != null) localVarPathParams.Add("code", this.Configuration.ApiClient.ParameterToString(code)); // path parameter
            if (asAt != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "asAt", asAt)); // query parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            //  set the LUSID header
            localVarHeaderParams["X-LUSID-Sdk-Language"] = "C#";
            localVarHeaderParams["X-LUSID-Sdk-Version"] = "0.11.3418";

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetCreditSupportAnnex", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetCreditSupportAnnexResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (GetCreditSupportAnnexResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetCreditSupportAnnexResponse)));
        }

        /// <summary>
        /// [EXPERIMENTAL] List the set of Counterparty Agreements List the set of Counterparty Agreements at the specified AsAt date/time
        /// </summary>
        /// <exception cref="Lusid.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="asAt">The asAt datetime at which to list the Counterparty Agreements. Defaults to latest if not specified. (optional)</param>
        /// <returns>ResourceListOfGetCounterpartyAgreementResponse</returns>
        public ResourceListOfGetCounterpartyAgreementResponse ListCounterpartyAgreements (DateTimeOffset? asAt = null)
        {
             ApiResponse<ResourceListOfGetCounterpartyAgreementResponse> localVarResponse = ListCounterpartyAgreementsWithHttpInfo(asAt);
             return localVarResponse.Data;
        }

        /// <summary>
        /// [EXPERIMENTAL] List the set of Counterparty Agreements List the set of Counterparty Agreements at the specified AsAt date/time
        /// </summary>
        /// <exception cref="Lusid.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="asAt">The asAt datetime at which to list the Counterparty Agreements. Defaults to latest if not specified. (optional)</param>
        /// <returns>ApiResponse of ResourceListOfGetCounterpartyAgreementResponse</returns>
        public ApiResponse< ResourceListOfGetCounterpartyAgreementResponse > ListCounterpartyAgreementsWithHttpInfo (DateTimeOffset? asAt = null)
        {

            var localVarPath = "./api/counterparties/counterpartyagreements";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (asAt != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "asAt", asAt)); // query parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            //  set the LUSID header
            localVarHeaderParams["X-LUSID-SDK-Language"] = "C#";
            localVarHeaderParams["X-LUSID-SDK-Version"] = "0.11.3418";

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ListCounterpartyAgreements", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResourceListOfGetCounterpartyAgreementResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (ResourceListOfGetCounterpartyAgreementResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResourceListOfGetCounterpartyAgreementResponse)));
        }

        /// <summary>
        /// [EXPERIMENTAL] List the set of Counterparty Agreements List the set of Counterparty Agreements at the specified AsAt date/time
        /// </summary>
        /// <exception cref="Lusid.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="asAt">The asAt datetime at which to list the Counterparty Agreements. Defaults to latest if not specified. (optional)</param>
        /// <returns>Task of ResourceListOfGetCounterpartyAgreementResponse</returns>
        public async System.Threading.Tasks.Task<ResourceListOfGetCounterpartyAgreementResponse> ListCounterpartyAgreementsAsync (DateTimeOffset? asAt = null)
        {
             ApiResponse<ResourceListOfGetCounterpartyAgreementResponse> localVarResponse = await ListCounterpartyAgreementsAsyncWithHttpInfo(asAt);
             return localVarResponse.Data;

        }

        /// <summary>
        /// [EXPERIMENTAL] List the set of Counterparty Agreements List the set of Counterparty Agreements at the specified AsAt date/time
        /// </summary>
        /// <exception cref="Lusid.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="asAt">The asAt datetime at which to list the Counterparty Agreements. Defaults to latest if not specified. (optional)</param>
        /// <returns>Task of ApiResponse (ResourceListOfGetCounterpartyAgreementResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ResourceListOfGetCounterpartyAgreementResponse>> ListCounterpartyAgreementsAsyncWithHttpInfo (DateTimeOffset? asAt = null)
        {

            var localVarPath = "./api/counterparties/counterpartyagreements";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (asAt != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "asAt", asAt)); // query parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            //  set the LUSID header
            localVarHeaderParams["X-LUSID-Sdk-Language"] = "C#";
            localVarHeaderParams["X-LUSID-Sdk-Version"] = "0.11.3418";

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ListCounterpartyAgreements", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResourceListOfGetCounterpartyAgreementResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (ResourceListOfGetCounterpartyAgreementResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResourceListOfGetCounterpartyAgreementResponse)));
        }

        /// <summary>
        /// [EXPERIMENTAL] List the set of Credit Support Annexes List the set of Credit Support Annexes at the specified AsAt date/time
        /// </summary>
        /// <exception cref="Lusid.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="asAt">The asAt datetime at which to list the Credit Support Annexes. Defaults to latest if not specified. (optional)</param>
        /// <returns>ResourceListOfGetCreditSupportAnnexResponse</returns>
        public ResourceListOfGetCreditSupportAnnexResponse ListCreditSupportAnnexes (DateTimeOffset? asAt = null)
        {
             ApiResponse<ResourceListOfGetCreditSupportAnnexResponse> localVarResponse = ListCreditSupportAnnexesWithHttpInfo(asAt);
             return localVarResponse.Data;
        }

        /// <summary>
        /// [EXPERIMENTAL] List the set of Credit Support Annexes List the set of Credit Support Annexes at the specified AsAt date/time
        /// </summary>
        /// <exception cref="Lusid.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="asAt">The asAt datetime at which to list the Credit Support Annexes. Defaults to latest if not specified. (optional)</param>
        /// <returns>ApiResponse of ResourceListOfGetCreditSupportAnnexResponse</returns>
        public ApiResponse< ResourceListOfGetCreditSupportAnnexResponse > ListCreditSupportAnnexesWithHttpInfo (DateTimeOffset? asAt = null)
        {

            var localVarPath = "./api/counterparties/creditsupportannexes";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (asAt != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "asAt", asAt)); // query parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            //  set the LUSID header
            localVarHeaderParams["X-LUSID-SDK-Language"] = "C#";
            localVarHeaderParams["X-LUSID-SDK-Version"] = "0.11.3418";

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ListCreditSupportAnnexes", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResourceListOfGetCreditSupportAnnexResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (ResourceListOfGetCreditSupportAnnexResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResourceListOfGetCreditSupportAnnexResponse)));
        }

        /// <summary>
        /// [EXPERIMENTAL] List the set of Credit Support Annexes List the set of Credit Support Annexes at the specified AsAt date/time
        /// </summary>
        /// <exception cref="Lusid.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="asAt">The asAt datetime at which to list the Credit Support Annexes. Defaults to latest if not specified. (optional)</param>
        /// <returns>Task of ResourceListOfGetCreditSupportAnnexResponse</returns>
        public async System.Threading.Tasks.Task<ResourceListOfGetCreditSupportAnnexResponse> ListCreditSupportAnnexesAsync (DateTimeOffset? asAt = null)
        {
             ApiResponse<ResourceListOfGetCreditSupportAnnexResponse> localVarResponse = await ListCreditSupportAnnexesAsyncWithHttpInfo(asAt);
             return localVarResponse.Data;

        }

        /// <summary>
        /// [EXPERIMENTAL] List the set of Credit Support Annexes List the set of Credit Support Annexes at the specified AsAt date/time
        /// </summary>
        /// <exception cref="Lusid.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="asAt">The asAt datetime at which to list the Credit Support Annexes. Defaults to latest if not specified. (optional)</param>
        /// <returns>Task of ApiResponse (ResourceListOfGetCreditSupportAnnexResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ResourceListOfGetCreditSupportAnnexResponse>> ListCreditSupportAnnexesAsyncWithHttpInfo (DateTimeOffset? asAt = null)
        {

            var localVarPath = "./api/counterparties/creditsupportannexes";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (asAt != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "asAt", asAt)); // query parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            //  set the LUSID header
            localVarHeaderParams["X-LUSID-Sdk-Language"] = "C#";
            localVarHeaderParams["X-LUSID-Sdk-Version"] = "0.11.3418";

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ListCreditSupportAnnexes", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResourceListOfGetCreditSupportAnnexResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (ResourceListOfGetCreditSupportAnnexResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResourceListOfGetCreditSupportAnnexResponse)));
        }

        /// <summary>
        /// [EXPERIMENTAL] Upsert Counterparty Agreement Update or insert Counterparty Agreement in a single scope. An item will be updated if it already exists and inserted if it does not.                The response will return the successfully updated or inserted Counterparty Agreement or failure message if unsuccessful                It is important to always check to verify success (or failure).
        /// </summary>
        /// <exception cref="Lusid.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="upsertCounterpartyAgreementRequest">The Counterparty Agreement to update or insert</param>
        /// <returns>UpsertSingleStructuredDataResponse</returns>
        public UpsertSingleStructuredDataResponse UpsertCounterpartyAgreement (UpsertCounterpartyAgreementRequest upsertCounterpartyAgreementRequest)
        {
             ApiResponse<UpsertSingleStructuredDataResponse> localVarResponse = UpsertCounterpartyAgreementWithHttpInfo(upsertCounterpartyAgreementRequest);
             return localVarResponse.Data;
        }

        /// <summary>
        /// [EXPERIMENTAL] Upsert Counterparty Agreement Update or insert Counterparty Agreement in a single scope. An item will be updated if it already exists and inserted if it does not.                The response will return the successfully updated or inserted Counterparty Agreement or failure message if unsuccessful                It is important to always check to verify success (or failure).
        /// </summary>
        /// <exception cref="Lusid.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="upsertCounterpartyAgreementRequest">The Counterparty Agreement to update or insert</param>
        /// <returns>ApiResponse of UpsertSingleStructuredDataResponse</returns>
        public ApiResponse< UpsertSingleStructuredDataResponse > UpsertCounterpartyAgreementWithHttpInfo (UpsertCounterpartyAgreementRequest upsertCounterpartyAgreementRequest)
        {
            // verify the required parameter 'upsertCounterpartyAgreementRequest' is set
            if (upsertCounterpartyAgreementRequest == null)
                throw new ApiException(400, "Missing required parameter 'upsertCounterpartyAgreementRequest' when calling CounterpartiesApi->UpsertCounterpartyAgreement");

            var localVarPath = "./api/counterparties/counterpartyagreements";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (upsertCounterpartyAgreementRequest != null && upsertCounterpartyAgreementRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(upsertCounterpartyAgreementRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = upsertCounterpartyAgreementRequest; // byte array
            }

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            //  set the LUSID header
            localVarHeaderParams["X-LUSID-SDK-Language"] = "C#";
            localVarHeaderParams["X-LUSID-SDK-Version"] = "0.11.3418";

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpsertCounterpartyAgreement", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<UpsertSingleStructuredDataResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (UpsertSingleStructuredDataResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(UpsertSingleStructuredDataResponse)));
        }

        /// <summary>
        /// [EXPERIMENTAL] Upsert Counterparty Agreement Update or insert Counterparty Agreement in a single scope. An item will be updated if it already exists and inserted if it does not.                The response will return the successfully updated or inserted Counterparty Agreement or failure message if unsuccessful                It is important to always check to verify success (or failure).
        /// </summary>
        /// <exception cref="Lusid.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="upsertCounterpartyAgreementRequest">The Counterparty Agreement to update or insert</param>
        /// <returns>Task of UpsertSingleStructuredDataResponse</returns>
        public async System.Threading.Tasks.Task<UpsertSingleStructuredDataResponse> UpsertCounterpartyAgreementAsync (UpsertCounterpartyAgreementRequest upsertCounterpartyAgreementRequest)
        {
             ApiResponse<UpsertSingleStructuredDataResponse> localVarResponse = await UpsertCounterpartyAgreementAsyncWithHttpInfo(upsertCounterpartyAgreementRequest);
             return localVarResponse.Data;

        }

        /// <summary>
        /// [EXPERIMENTAL] Upsert Counterparty Agreement Update or insert Counterparty Agreement in a single scope. An item will be updated if it already exists and inserted if it does not.                The response will return the successfully updated or inserted Counterparty Agreement or failure message if unsuccessful                It is important to always check to verify success (or failure).
        /// </summary>
        /// <exception cref="Lusid.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="upsertCounterpartyAgreementRequest">The Counterparty Agreement to update or insert</param>
        /// <returns>Task of ApiResponse (UpsertSingleStructuredDataResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<UpsertSingleStructuredDataResponse>> UpsertCounterpartyAgreementAsyncWithHttpInfo (UpsertCounterpartyAgreementRequest upsertCounterpartyAgreementRequest)
        {
            // verify the required parameter 'upsertCounterpartyAgreementRequest' is set
            if (upsertCounterpartyAgreementRequest == null)
                throw new ApiException(400, "Missing required parameter 'upsertCounterpartyAgreementRequest' when calling CounterpartiesApi->UpsertCounterpartyAgreement");

            var localVarPath = "./api/counterparties/counterpartyagreements";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (upsertCounterpartyAgreementRequest != null && upsertCounterpartyAgreementRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(upsertCounterpartyAgreementRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = upsertCounterpartyAgreementRequest; // byte array
            }

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            //  set the LUSID header
            localVarHeaderParams["X-LUSID-Sdk-Language"] = "C#";
            localVarHeaderParams["X-LUSID-Sdk-Version"] = "0.11.3418";

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpsertCounterpartyAgreement", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<UpsertSingleStructuredDataResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (UpsertSingleStructuredDataResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(UpsertSingleStructuredDataResponse)));
        }

        /// <summary>
        /// [EXPERIMENTAL] Upsert Credit Support Annex Update or insert Credit Support Annex in a single scope. An item will be updated if it already exists and inserted if it does not.                The response will return the successfully updated or inserted Credit Support Annex or failure message if unsuccessful                It is important to always check to verify success (or failure).
        /// </summary>
        /// <exception cref="Lusid.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="upsertCreditSupportAnnexRequest">The Credit Support Annex to update or insert</param>
        /// <returns>UpsertSingleStructuredDataResponse</returns>
        public UpsertSingleStructuredDataResponse UpsertCreditSupportAnnex (UpsertCreditSupportAnnexRequest upsertCreditSupportAnnexRequest)
        {
             ApiResponse<UpsertSingleStructuredDataResponse> localVarResponse = UpsertCreditSupportAnnexWithHttpInfo(upsertCreditSupportAnnexRequest);
             return localVarResponse.Data;
        }

        /// <summary>
        /// [EXPERIMENTAL] Upsert Credit Support Annex Update or insert Credit Support Annex in a single scope. An item will be updated if it already exists and inserted if it does not.                The response will return the successfully updated or inserted Credit Support Annex or failure message if unsuccessful                It is important to always check to verify success (or failure).
        /// </summary>
        /// <exception cref="Lusid.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="upsertCreditSupportAnnexRequest">The Credit Support Annex to update or insert</param>
        /// <returns>ApiResponse of UpsertSingleStructuredDataResponse</returns>
        public ApiResponse< UpsertSingleStructuredDataResponse > UpsertCreditSupportAnnexWithHttpInfo (UpsertCreditSupportAnnexRequest upsertCreditSupportAnnexRequest)
        {
            // verify the required parameter 'upsertCreditSupportAnnexRequest' is set
            if (upsertCreditSupportAnnexRequest == null)
                throw new ApiException(400, "Missing required parameter 'upsertCreditSupportAnnexRequest' when calling CounterpartiesApi->UpsertCreditSupportAnnex");

            var localVarPath = "./api/counterparties/creditsupportannexes";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (upsertCreditSupportAnnexRequest != null && upsertCreditSupportAnnexRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(upsertCreditSupportAnnexRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = upsertCreditSupportAnnexRequest; // byte array
            }

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            //  set the LUSID header
            localVarHeaderParams["X-LUSID-SDK-Language"] = "C#";
            localVarHeaderParams["X-LUSID-SDK-Version"] = "0.11.3418";

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpsertCreditSupportAnnex", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<UpsertSingleStructuredDataResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (UpsertSingleStructuredDataResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(UpsertSingleStructuredDataResponse)));
        }

        /// <summary>
        /// [EXPERIMENTAL] Upsert Credit Support Annex Update or insert Credit Support Annex in a single scope. An item will be updated if it already exists and inserted if it does not.                The response will return the successfully updated or inserted Credit Support Annex or failure message if unsuccessful                It is important to always check to verify success (or failure).
        /// </summary>
        /// <exception cref="Lusid.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="upsertCreditSupportAnnexRequest">The Credit Support Annex to update or insert</param>
        /// <returns>Task of UpsertSingleStructuredDataResponse</returns>
        public async System.Threading.Tasks.Task<UpsertSingleStructuredDataResponse> UpsertCreditSupportAnnexAsync (UpsertCreditSupportAnnexRequest upsertCreditSupportAnnexRequest)
        {
             ApiResponse<UpsertSingleStructuredDataResponse> localVarResponse = await UpsertCreditSupportAnnexAsyncWithHttpInfo(upsertCreditSupportAnnexRequest);
             return localVarResponse.Data;

        }

        /// <summary>
        /// [EXPERIMENTAL] Upsert Credit Support Annex Update or insert Credit Support Annex in a single scope. An item will be updated if it already exists and inserted if it does not.                The response will return the successfully updated or inserted Credit Support Annex or failure message if unsuccessful                It is important to always check to verify success (or failure).
        /// </summary>
        /// <exception cref="Lusid.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="upsertCreditSupportAnnexRequest">The Credit Support Annex to update or insert</param>
        /// <returns>Task of ApiResponse (UpsertSingleStructuredDataResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<UpsertSingleStructuredDataResponse>> UpsertCreditSupportAnnexAsyncWithHttpInfo (UpsertCreditSupportAnnexRequest upsertCreditSupportAnnexRequest)
        {
            // verify the required parameter 'upsertCreditSupportAnnexRequest' is set
            if (upsertCreditSupportAnnexRequest == null)
                throw new ApiException(400, "Missing required parameter 'upsertCreditSupportAnnexRequest' when calling CounterpartiesApi->UpsertCreditSupportAnnex");

            var localVarPath = "./api/counterparties/creditsupportannexes";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (upsertCreditSupportAnnexRequest != null && upsertCreditSupportAnnexRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(upsertCreditSupportAnnexRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = upsertCreditSupportAnnexRequest; // byte array
            }

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            //  set the LUSID header
            localVarHeaderParams["X-LUSID-Sdk-Language"] = "C#";
            localVarHeaderParams["X-LUSID-Sdk-Version"] = "0.11.3418";

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpsertCreditSupportAnnex", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<UpsertSingleStructuredDataResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (UpsertSingleStructuredDataResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(UpsertSingleStructuredDataResponse)));
        }

    }
}