/* 
 * LUSID API
 *
 * # Introduction  This page documents the [LUSID APIs](https://www.lusid.com/api/swagger), which allows authorised clients to query and update their data within the LUSID platform.  SDKs to interact with the LUSID APIs are available in the following languages and frameworks:  * [C#](https://github.com/finbourne/lusid-sdk-csharp) * [Java](https://github.com/finbourne/lusid-sdk-java) * [JavaScript](https://github.com/finbourne/lusid-sdk-js) * [Python](https://github.com/finbourne/lusid-sdk-python) * [Angular](https://github.com/finbourne/lusid-sdk-angular)  The LUSID platform is made up of a number of sub-applications. You can find the API / swagger documentation by following the links in the table below.   | Application | Description | API / Swagger Documentation | | - -- -- | - -- -- | - -- - | | LUSID | Open, API-first, developer-friendly investment data platform. | [Swagger](https://www.lusid.com/api/swagger/index.html) | | Web app | User-facing front end for LUSID. | [Swagger](https://www.lusid.com/app/swagger/index.html) | | Scheduler | Automated job scheduler. | [Swagger](https://www.lusid.com/scheduler2/swagger/index.html) | | Insights |Monitoring and troubleshooting service. | [Swagger](https://www.lusid.com/insights/swagger/index.html) | | Identity | Identity management for LUSID (in conjuction with Access) | [Swagger](https://www.lusid.com/identity/swagger/index.html) | | Access | Access control for LUSID (in conjunction with Identity) | [Swagger](https://www.lusid.com/access/swagger/index.html) | | Drive | Secure file repository and manager for collaboration. | [Swagger](https://www.lusid.com/drive/swagger/index.html) | | Luminesce | Data virtualisation service (query data from multiple providers, including LUSID) | [Swagger](https://www.lusid.com/honeycomb/swagger/index.html) | | Notification | Notification service. | [Swagger](https://www.lusid.com/notifications/swagger/index.html) | | Configuration | File store for secrets and other sensitive information. | [Swagger](https://www.lusid.com/configuration/swagger/index.html) | 
 *
 * The version of the OpenAPI document: 0.11.3436
 * Contact: info@finbourne.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp.Portable;
using Lusid.Sdk.Client;
using Lusid.Sdk.Model;

namespace Lusid.Sdk.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ISystemConfigurationApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// [EARLY ACCESS] Create transaction type
        /// </summary>
        /// <remarks>
        /// Create a new transaction type by specifying a definition and mappings to movements.
        /// </remarks>
        /// <exception cref="Lusid.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="transactionConfigurationDataRequest">A transaction type definition. (optional)</param>
        /// <returns>TransactionSetConfigurationData</returns>
        TransactionSetConfigurationData CreateConfigurationTransactionType (TransactionConfigurationDataRequest transactionConfigurationDataRequest = null);

        /// <summary>
        /// [EARLY ACCESS] Create transaction type
        /// </summary>
        /// <remarks>
        /// Create a new transaction type by specifying a definition and mappings to movements.
        /// </remarks>
        /// <exception cref="Lusid.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="transactionConfigurationDataRequest">A transaction type definition. (optional)</param>
        /// <returns>ApiResponse of TransactionSetConfigurationData</returns>
        ApiResponse<TransactionSetConfigurationData> CreateConfigurationTransactionTypeWithHttpInfo (TransactionConfigurationDataRequest transactionConfigurationDataRequest = null);
        /// <summary>
        /// [EXPERIMENTAL] Create side definition
        /// </summary>
        /// <remarks>
        /// Create a new side definition for use in a transaction type. For more information, see https://support.lusid.com/knowledgebase/article/KA-01875.
        /// </remarks>
        /// <exception cref="Lusid.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sideConfigurationDataRequest">The definition of the side. (optional)</param>
        /// <returns>TransactionSetConfigurationData</returns>
        TransactionSetConfigurationData CreateSideDefinition (SideConfigurationDataRequest sideConfigurationDataRequest = null);

        /// <summary>
        /// [EXPERIMENTAL] Create side definition
        /// </summary>
        /// <remarks>
        /// Create a new side definition for use in a transaction type. For more information, see https://support.lusid.com/knowledgebase/article/KA-01875.
        /// </remarks>
        /// <exception cref="Lusid.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sideConfigurationDataRequest">The definition of the side. (optional)</param>
        /// <returns>ApiResponse of TransactionSetConfigurationData</returns>
        ApiResponse<TransactionSetConfigurationData> CreateSideDefinitionWithHttpInfo (SideConfigurationDataRequest sideConfigurationDataRequest = null);
        /// <summary>
        /// [EARLY ACCESS] List transaction types
        /// </summary>
        /// <remarks>
        /// Get the list of current transaction types. For information on the default transaction types provided with  LUSID, see https://support.lusid.com/knowledgebase/article/KA-01873/.
        /// </remarks>
        /// <exception cref="Lusid.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="asAt">The asAt datetime at which to retrieve the transaction types. Defaults              to returning the latest versions if not specified. (optional)</param>
        /// <returns>TransactionSetConfigurationData</returns>
        TransactionSetConfigurationData ListConfigurationTransactionTypes (DateTimeOffset? asAt = null);

        /// <summary>
        /// [EARLY ACCESS] List transaction types
        /// </summary>
        /// <remarks>
        /// Get the list of current transaction types. For information on the default transaction types provided with  LUSID, see https://support.lusid.com/knowledgebase/article/KA-01873/.
        /// </remarks>
        /// <exception cref="Lusid.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="asAt">The asAt datetime at which to retrieve the transaction types. Defaults              to returning the latest versions if not specified. (optional)</param>
        /// <returns>ApiResponse of TransactionSetConfigurationData</returns>
        ApiResponse<TransactionSetConfigurationData> ListConfigurationTransactionTypesWithHttpInfo (DateTimeOffset? asAt = null);
        /// <summary>
        /// [EXPERIMENTAL] Set transaction types
        /// </summary>
        /// <remarks>
        /// Configure all existing transaction types. Note it is not possible to configure a single existing transaction type on its own.                WARNING! Changing existing transaction types has a material impact on how data, new and old, is processed and aggregated by LUSID, and will affect your whole organisation. Only call this API if you are fully aware of the implications of the change.
        /// </remarks>
        /// <exception cref="Lusid.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="transactionSetConfigurationDataRequest">The complete set of transaction type definitions. (optional)</param>
        /// <returns>TransactionSetConfigurationData</returns>
        TransactionSetConfigurationData SetConfigurationTransactionTypes (TransactionSetConfigurationDataRequest transactionSetConfigurationDataRequest = null);

        /// <summary>
        /// [EXPERIMENTAL] Set transaction types
        /// </summary>
        /// <remarks>
        /// Configure all existing transaction types. Note it is not possible to configure a single existing transaction type on its own.                WARNING! Changing existing transaction types has a material impact on how data, new and old, is processed and aggregated by LUSID, and will affect your whole organisation. Only call this API if you are fully aware of the implications of the change.
        /// </remarks>
        /// <exception cref="Lusid.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="transactionSetConfigurationDataRequest">The complete set of transaction type definitions. (optional)</param>
        /// <returns>ApiResponse of TransactionSetConfigurationData</returns>
        ApiResponse<TransactionSetConfigurationData> SetConfigurationTransactionTypesWithHttpInfo (TransactionSetConfigurationDataRequest transactionSetConfigurationDataRequest = null);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// [EARLY ACCESS] Create transaction type
        /// </summary>
        /// <remarks>
        /// Create a new transaction type by specifying a definition and mappings to movements.
        /// </remarks>
        /// <exception cref="Lusid.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="transactionConfigurationDataRequest">A transaction type definition. (optional)</param>
        /// <returns>Task of TransactionSetConfigurationData</returns>
        System.Threading.Tasks.Task<TransactionSetConfigurationData> CreateConfigurationTransactionTypeAsync (TransactionConfigurationDataRequest transactionConfigurationDataRequest = null);

        /// <summary>
        /// [EARLY ACCESS] Create transaction type
        /// </summary>
        /// <remarks>
        /// Create a new transaction type by specifying a definition and mappings to movements.
        /// </remarks>
        /// <exception cref="Lusid.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="transactionConfigurationDataRequest">A transaction type definition. (optional)</param>
        /// <returns>Task of ApiResponse (TransactionSetConfigurationData)</returns>
        System.Threading.Tasks.Task<ApiResponse<TransactionSetConfigurationData>> CreateConfigurationTransactionTypeAsyncWithHttpInfo (TransactionConfigurationDataRequest transactionConfigurationDataRequest = null);
        /// <summary>
        /// [EXPERIMENTAL] Create side definition
        /// </summary>
        /// <remarks>
        /// Create a new side definition for use in a transaction type. For more information, see https://support.lusid.com/knowledgebase/article/KA-01875.
        /// </remarks>
        /// <exception cref="Lusid.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sideConfigurationDataRequest">The definition of the side. (optional)</param>
        /// <returns>Task of TransactionSetConfigurationData</returns>
        System.Threading.Tasks.Task<TransactionSetConfigurationData> CreateSideDefinitionAsync (SideConfigurationDataRequest sideConfigurationDataRequest = null);

        /// <summary>
        /// [EXPERIMENTAL] Create side definition
        /// </summary>
        /// <remarks>
        /// Create a new side definition for use in a transaction type. For more information, see https://support.lusid.com/knowledgebase/article/KA-01875.
        /// </remarks>
        /// <exception cref="Lusid.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sideConfigurationDataRequest">The definition of the side. (optional)</param>
        /// <returns>Task of ApiResponse (TransactionSetConfigurationData)</returns>
        System.Threading.Tasks.Task<ApiResponse<TransactionSetConfigurationData>> CreateSideDefinitionAsyncWithHttpInfo (SideConfigurationDataRequest sideConfigurationDataRequest = null);
        /// <summary>
        /// [EARLY ACCESS] List transaction types
        /// </summary>
        /// <remarks>
        /// Get the list of current transaction types. For information on the default transaction types provided with  LUSID, see https://support.lusid.com/knowledgebase/article/KA-01873/.
        /// </remarks>
        /// <exception cref="Lusid.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="asAt">The asAt datetime at which to retrieve the transaction types. Defaults              to returning the latest versions if not specified. (optional)</param>
        /// <returns>Task of TransactionSetConfigurationData</returns>
        System.Threading.Tasks.Task<TransactionSetConfigurationData> ListConfigurationTransactionTypesAsync (DateTimeOffset? asAt = null);

        /// <summary>
        /// [EARLY ACCESS] List transaction types
        /// </summary>
        /// <remarks>
        /// Get the list of current transaction types. For information on the default transaction types provided with  LUSID, see https://support.lusid.com/knowledgebase/article/KA-01873/.
        /// </remarks>
        /// <exception cref="Lusid.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="asAt">The asAt datetime at which to retrieve the transaction types. Defaults              to returning the latest versions if not specified. (optional)</param>
        /// <returns>Task of ApiResponse (TransactionSetConfigurationData)</returns>
        System.Threading.Tasks.Task<ApiResponse<TransactionSetConfigurationData>> ListConfigurationTransactionTypesAsyncWithHttpInfo (DateTimeOffset? asAt = null);
        /// <summary>
        /// [EXPERIMENTAL] Set transaction types
        /// </summary>
        /// <remarks>
        /// Configure all existing transaction types. Note it is not possible to configure a single existing transaction type on its own.                WARNING! Changing existing transaction types has a material impact on how data, new and old, is processed and aggregated by LUSID, and will affect your whole organisation. Only call this API if you are fully aware of the implications of the change.
        /// </remarks>
        /// <exception cref="Lusid.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="transactionSetConfigurationDataRequest">The complete set of transaction type definitions. (optional)</param>
        /// <returns>Task of TransactionSetConfigurationData</returns>
        System.Threading.Tasks.Task<TransactionSetConfigurationData> SetConfigurationTransactionTypesAsync (TransactionSetConfigurationDataRequest transactionSetConfigurationDataRequest = null);

        /// <summary>
        /// [EXPERIMENTAL] Set transaction types
        /// </summary>
        /// <remarks>
        /// Configure all existing transaction types. Note it is not possible to configure a single existing transaction type on its own.                WARNING! Changing existing transaction types has a material impact on how data, new and old, is processed and aggregated by LUSID, and will affect your whole organisation. Only call this API if you are fully aware of the implications of the change.
        /// </remarks>
        /// <exception cref="Lusid.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="transactionSetConfigurationDataRequest">The complete set of transaction type definitions. (optional)</param>
        /// <returns>Task of ApiResponse (TransactionSetConfigurationData)</returns>
        System.Threading.Tasks.Task<ApiResponse<TransactionSetConfigurationData>> SetConfigurationTransactionTypesAsyncWithHttpInfo (TransactionSetConfigurationDataRequest transactionSetConfigurationDataRequest = null);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class SystemConfigurationApi : ISystemConfigurationApi
    {
        private Lusid.Sdk.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="SystemConfigurationApi"/> class.
        /// </summary>
        /// <returns></returns>
        public SystemConfigurationApi(String basePath)
        {
            this.Configuration = new Lusid.Sdk.Client.Configuration { BasePath = basePath };

            ExceptionFactory = Lusid.Sdk.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="SystemConfigurationApi"/> class
        /// </summary>
        /// <returns></returns>
        public SystemConfigurationApi()
        {
            this.Configuration = Lusid.Sdk.Client.Configuration.Default;

            ExceptionFactory = Lusid.Sdk.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="SystemConfigurationApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public SystemConfigurationApi(Lusid.Sdk.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Lusid.Sdk.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = Lusid.Sdk.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Lusid.Sdk.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Lusid.Sdk.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// [EARLY ACCESS] Create transaction type Create a new transaction type by specifying a definition and mappings to movements.
        /// </summary>
        /// <exception cref="Lusid.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="transactionConfigurationDataRequest">A transaction type definition. (optional)</param>
        /// <returns>TransactionSetConfigurationData</returns>
        public TransactionSetConfigurationData CreateConfigurationTransactionType (TransactionConfigurationDataRequest transactionConfigurationDataRequest = null)
        {
             ApiResponse<TransactionSetConfigurationData> localVarResponse = CreateConfigurationTransactionTypeWithHttpInfo(transactionConfigurationDataRequest);
             return localVarResponse.Data;
        }

        /// <summary>
        /// [EARLY ACCESS] Create transaction type Create a new transaction type by specifying a definition and mappings to movements.
        /// </summary>
        /// <exception cref="Lusid.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="transactionConfigurationDataRequest">A transaction type definition. (optional)</param>
        /// <returns>ApiResponse of TransactionSetConfigurationData</returns>
        public ApiResponse< TransactionSetConfigurationData > CreateConfigurationTransactionTypeWithHttpInfo (TransactionConfigurationDataRequest transactionConfigurationDataRequest = null)
        {

            var localVarPath = "./api/systemconfiguration/transactions/type";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (transactionConfigurationDataRequest != null && transactionConfigurationDataRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(transactionConfigurationDataRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = transactionConfigurationDataRequest; // byte array
            }

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            //  set the LUSID header
            localVarHeaderParams["X-LUSID-SDK-Language"] = "C#";
            localVarHeaderParams["X-LUSID-SDK-Version"] = "0.11.3436";

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateConfigurationTransactionType", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TransactionSetConfigurationData>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (TransactionSetConfigurationData) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TransactionSetConfigurationData)));
        }

        /// <summary>
        /// [EARLY ACCESS] Create transaction type Create a new transaction type by specifying a definition and mappings to movements.
        /// </summary>
        /// <exception cref="Lusid.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="transactionConfigurationDataRequest">A transaction type definition. (optional)</param>
        /// <returns>Task of TransactionSetConfigurationData</returns>
        public async System.Threading.Tasks.Task<TransactionSetConfigurationData> CreateConfigurationTransactionTypeAsync (TransactionConfigurationDataRequest transactionConfigurationDataRequest = null)
        {
             ApiResponse<TransactionSetConfigurationData> localVarResponse = await CreateConfigurationTransactionTypeAsyncWithHttpInfo(transactionConfigurationDataRequest);
             return localVarResponse.Data;

        }

        /// <summary>
        /// [EARLY ACCESS] Create transaction type Create a new transaction type by specifying a definition and mappings to movements.
        /// </summary>
        /// <exception cref="Lusid.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="transactionConfigurationDataRequest">A transaction type definition. (optional)</param>
        /// <returns>Task of ApiResponse (TransactionSetConfigurationData)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<TransactionSetConfigurationData>> CreateConfigurationTransactionTypeAsyncWithHttpInfo (TransactionConfigurationDataRequest transactionConfigurationDataRequest = null)
        {

            var localVarPath = "./api/systemconfiguration/transactions/type";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (transactionConfigurationDataRequest != null && transactionConfigurationDataRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(transactionConfigurationDataRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = transactionConfigurationDataRequest; // byte array
            }

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            //  set the LUSID header
            localVarHeaderParams["X-LUSID-Sdk-Language"] = "C#";
            localVarHeaderParams["X-LUSID-Sdk-Version"] = "0.11.3436";

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateConfigurationTransactionType", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TransactionSetConfigurationData>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (TransactionSetConfigurationData) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TransactionSetConfigurationData)));
        }

        /// <summary>
        /// [EXPERIMENTAL] Create side definition Create a new side definition for use in a transaction type. For more information, see https://support.lusid.com/knowledgebase/article/KA-01875.
        /// </summary>
        /// <exception cref="Lusid.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sideConfigurationDataRequest">The definition of the side. (optional)</param>
        /// <returns>TransactionSetConfigurationData</returns>
        public TransactionSetConfigurationData CreateSideDefinition (SideConfigurationDataRequest sideConfigurationDataRequest = null)
        {
             ApiResponse<TransactionSetConfigurationData> localVarResponse = CreateSideDefinitionWithHttpInfo(sideConfigurationDataRequest);
             return localVarResponse.Data;
        }

        /// <summary>
        /// [EXPERIMENTAL] Create side definition Create a new side definition for use in a transaction type. For more information, see https://support.lusid.com/knowledgebase/article/KA-01875.
        /// </summary>
        /// <exception cref="Lusid.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sideConfigurationDataRequest">The definition of the side. (optional)</param>
        /// <returns>ApiResponse of TransactionSetConfigurationData</returns>
        public ApiResponse< TransactionSetConfigurationData > CreateSideDefinitionWithHttpInfo (SideConfigurationDataRequest sideConfigurationDataRequest = null)
        {

            var localVarPath = "./api/systemconfiguration/transactions/side";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (sideConfigurationDataRequest != null && sideConfigurationDataRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(sideConfigurationDataRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = sideConfigurationDataRequest; // byte array
            }

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            //  set the LUSID header
            localVarHeaderParams["X-LUSID-SDK-Language"] = "C#";
            localVarHeaderParams["X-LUSID-SDK-Version"] = "0.11.3436";

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateSideDefinition", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TransactionSetConfigurationData>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (TransactionSetConfigurationData) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TransactionSetConfigurationData)));
        }

        /// <summary>
        /// [EXPERIMENTAL] Create side definition Create a new side definition for use in a transaction type. For more information, see https://support.lusid.com/knowledgebase/article/KA-01875.
        /// </summary>
        /// <exception cref="Lusid.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sideConfigurationDataRequest">The definition of the side. (optional)</param>
        /// <returns>Task of TransactionSetConfigurationData</returns>
        public async System.Threading.Tasks.Task<TransactionSetConfigurationData> CreateSideDefinitionAsync (SideConfigurationDataRequest sideConfigurationDataRequest = null)
        {
             ApiResponse<TransactionSetConfigurationData> localVarResponse = await CreateSideDefinitionAsyncWithHttpInfo(sideConfigurationDataRequest);
             return localVarResponse.Data;

        }

        /// <summary>
        /// [EXPERIMENTAL] Create side definition Create a new side definition for use in a transaction type. For more information, see https://support.lusid.com/knowledgebase/article/KA-01875.
        /// </summary>
        /// <exception cref="Lusid.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sideConfigurationDataRequest">The definition of the side. (optional)</param>
        /// <returns>Task of ApiResponse (TransactionSetConfigurationData)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<TransactionSetConfigurationData>> CreateSideDefinitionAsyncWithHttpInfo (SideConfigurationDataRequest sideConfigurationDataRequest = null)
        {

            var localVarPath = "./api/systemconfiguration/transactions/side";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (sideConfigurationDataRequest != null && sideConfigurationDataRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(sideConfigurationDataRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = sideConfigurationDataRequest; // byte array
            }

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            //  set the LUSID header
            localVarHeaderParams["X-LUSID-Sdk-Language"] = "C#";
            localVarHeaderParams["X-LUSID-Sdk-Version"] = "0.11.3436";

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateSideDefinition", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TransactionSetConfigurationData>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (TransactionSetConfigurationData) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TransactionSetConfigurationData)));
        }

        /// <summary>
        /// [EARLY ACCESS] List transaction types Get the list of current transaction types. For information on the default transaction types provided with  LUSID, see https://support.lusid.com/knowledgebase/article/KA-01873/.
        /// </summary>
        /// <exception cref="Lusid.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="asAt">The asAt datetime at which to retrieve the transaction types. Defaults              to returning the latest versions if not specified. (optional)</param>
        /// <returns>TransactionSetConfigurationData</returns>
        public TransactionSetConfigurationData ListConfigurationTransactionTypes (DateTimeOffset? asAt = null)
        {
             ApiResponse<TransactionSetConfigurationData> localVarResponse = ListConfigurationTransactionTypesWithHttpInfo(asAt);
             return localVarResponse.Data;
        }

        /// <summary>
        /// [EARLY ACCESS] List transaction types Get the list of current transaction types. For information on the default transaction types provided with  LUSID, see https://support.lusid.com/knowledgebase/article/KA-01873/.
        /// </summary>
        /// <exception cref="Lusid.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="asAt">The asAt datetime at which to retrieve the transaction types. Defaults              to returning the latest versions if not specified. (optional)</param>
        /// <returns>ApiResponse of TransactionSetConfigurationData</returns>
        public ApiResponse< TransactionSetConfigurationData > ListConfigurationTransactionTypesWithHttpInfo (DateTimeOffset? asAt = null)
        {

            var localVarPath = "./api/systemconfiguration/transactions";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (asAt != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "asAt", asAt)); // query parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            //  set the LUSID header
            localVarHeaderParams["X-LUSID-SDK-Language"] = "C#";
            localVarHeaderParams["X-LUSID-SDK-Version"] = "0.11.3436";

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ListConfigurationTransactionTypes", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TransactionSetConfigurationData>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (TransactionSetConfigurationData) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TransactionSetConfigurationData)));
        }

        /// <summary>
        /// [EARLY ACCESS] List transaction types Get the list of current transaction types. For information on the default transaction types provided with  LUSID, see https://support.lusid.com/knowledgebase/article/KA-01873/.
        /// </summary>
        /// <exception cref="Lusid.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="asAt">The asAt datetime at which to retrieve the transaction types. Defaults              to returning the latest versions if not specified. (optional)</param>
        /// <returns>Task of TransactionSetConfigurationData</returns>
        public async System.Threading.Tasks.Task<TransactionSetConfigurationData> ListConfigurationTransactionTypesAsync (DateTimeOffset? asAt = null)
        {
             ApiResponse<TransactionSetConfigurationData> localVarResponse = await ListConfigurationTransactionTypesAsyncWithHttpInfo(asAt);
             return localVarResponse.Data;

        }

        /// <summary>
        /// [EARLY ACCESS] List transaction types Get the list of current transaction types. For information on the default transaction types provided with  LUSID, see https://support.lusid.com/knowledgebase/article/KA-01873/.
        /// </summary>
        /// <exception cref="Lusid.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="asAt">The asAt datetime at which to retrieve the transaction types. Defaults              to returning the latest versions if not specified. (optional)</param>
        /// <returns>Task of ApiResponse (TransactionSetConfigurationData)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<TransactionSetConfigurationData>> ListConfigurationTransactionTypesAsyncWithHttpInfo (DateTimeOffset? asAt = null)
        {

            var localVarPath = "./api/systemconfiguration/transactions";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (asAt != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "asAt", asAt)); // query parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            //  set the LUSID header
            localVarHeaderParams["X-LUSID-Sdk-Language"] = "C#";
            localVarHeaderParams["X-LUSID-Sdk-Version"] = "0.11.3436";

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ListConfigurationTransactionTypes", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TransactionSetConfigurationData>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (TransactionSetConfigurationData) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TransactionSetConfigurationData)));
        }

        /// <summary>
        /// [EXPERIMENTAL] Set transaction types Configure all existing transaction types. Note it is not possible to configure a single existing transaction type on its own.                WARNING! Changing existing transaction types has a material impact on how data, new and old, is processed and aggregated by LUSID, and will affect your whole organisation. Only call this API if you are fully aware of the implications of the change.
        /// </summary>
        /// <exception cref="Lusid.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="transactionSetConfigurationDataRequest">The complete set of transaction type definitions. (optional)</param>
        /// <returns>TransactionSetConfigurationData</returns>
        public TransactionSetConfigurationData SetConfigurationTransactionTypes (TransactionSetConfigurationDataRequest transactionSetConfigurationDataRequest = null)
        {
             ApiResponse<TransactionSetConfigurationData> localVarResponse = SetConfigurationTransactionTypesWithHttpInfo(transactionSetConfigurationDataRequest);
             return localVarResponse.Data;
        }

        /// <summary>
        /// [EXPERIMENTAL] Set transaction types Configure all existing transaction types. Note it is not possible to configure a single existing transaction type on its own.                WARNING! Changing existing transaction types has a material impact on how data, new and old, is processed and aggregated by LUSID, and will affect your whole organisation. Only call this API if you are fully aware of the implications of the change.
        /// </summary>
        /// <exception cref="Lusid.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="transactionSetConfigurationDataRequest">The complete set of transaction type definitions. (optional)</param>
        /// <returns>ApiResponse of TransactionSetConfigurationData</returns>
        public ApiResponse< TransactionSetConfigurationData > SetConfigurationTransactionTypesWithHttpInfo (TransactionSetConfigurationDataRequest transactionSetConfigurationDataRequest = null)
        {

            var localVarPath = "./api/systemconfiguration/transactions";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (transactionSetConfigurationDataRequest != null && transactionSetConfigurationDataRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(transactionSetConfigurationDataRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = transactionSetConfigurationDataRequest; // byte array
            }

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            //  set the LUSID header
            localVarHeaderParams["X-LUSID-SDK-Language"] = "C#";
            localVarHeaderParams["X-LUSID-SDK-Version"] = "0.11.3436";

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SetConfigurationTransactionTypes", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TransactionSetConfigurationData>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (TransactionSetConfigurationData) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TransactionSetConfigurationData)));
        }

        /// <summary>
        /// [EXPERIMENTAL] Set transaction types Configure all existing transaction types. Note it is not possible to configure a single existing transaction type on its own.                WARNING! Changing existing transaction types has a material impact on how data, new and old, is processed and aggregated by LUSID, and will affect your whole organisation. Only call this API if you are fully aware of the implications of the change.
        /// </summary>
        /// <exception cref="Lusid.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="transactionSetConfigurationDataRequest">The complete set of transaction type definitions. (optional)</param>
        /// <returns>Task of TransactionSetConfigurationData</returns>
        public async System.Threading.Tasks.Task<TransactionSetConfigurationData> SetConfigurationTransactionTypesAsync (TransactionSetConfigurationDataRequest transactionSetConfigurationDataRequest = null)
        {
             ApiResponse<TransactionSetConfigurationData> localVarResponse = await SetConfigurationTransactionTypesAsyncWithHttpInfo(transactionSetConfigurationDataRequest);
             return localVarResponse.Data;

        }

        /// <summary>
        /// [EXPERIMENTAL] Set transaction types Configure all existing transaction types. Note it is not possible to configure a single existing transaction type on its own.                WARNING! Changing existing transaction types has a material impact on how data, new and old, is processed and aggregated by LUSID, and will affect your whole organisation. Only call this API if you are fully aware of the implications of the change.
        /// </summary>
        /// <exception cref="Lusid.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="transactionSetConfigurationDataRequest">The complete set of transaction type definitions. (optional)</param>
        /// <returns>Task of ApiResponse (TransactionSetConfigurationData)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<TransactionSetConfigurationData>> SetConfigurationTransactionTypesAsyncWithHttpInfo (TransactionSetConfigurationDataRequest transactionSetConfigurationDataRequest = null)
        {

            var localVarPath = "./api/systemconfiguration/transactions";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (transactionSetConfigurationDataRequest != null && transactionSetConfigurationDataRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(transactionSetConfigurationDataRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = transactionSetConfigurationDataRequest; // byte array
            }

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            //  set the LUSID header
            localVarHeaderParams["X-LUSID-Sdk-Language"] = "C#";
            localVarHeaderParams["X-LUSID-Sdk-Version"] = "0.11.3436";

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SetConfigurationTransactionTypes", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TransactionSetConfigurationData>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (TransactionSetConfigurationData) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TransactionSetConfigurationData)));
        }

    }
}