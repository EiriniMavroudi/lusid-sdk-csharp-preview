/*
 * LUSID API
 *
 * # Introduction  This page documents the [LUSID APIs](https://www.lusid.com/api/swagger), which allows authorised clients to query and update their data within the LUSID platform.  SDKs to interact with the LUSID APIs are available in the following languages and frameworks:  * [C#](https://github.com/finbourne/lusid-sdk-csharp) * [Java](https://github.com/finbourne/lusid-sdk-java) * [JavaScript](https://github.com/finbourne/lusid-sdk-js) * [Python](https://github.com/finbourne/lusid-sdk-python) * [Angular](https://github.com/finbourne/lusid-sdk-angular)  The LUSID platform is made up of a number of sub-applications. You can find the API / swagger documentation by following the links in the table below.   | Application | Description | API / Swagger Documentation | | - -- -- | - -- -- | - -- - | | LUSID | Open, API-first, developer-friendly investment data platform. | [Swagger](https://www.lusid.com/api/swagger/index.html) | | Web app | User-facing front end for LUSID. | [Swagger](https://www.lusid.com/app/swagger/index.html) | | Scheduler | Automated job scheduler. | [Swagger](https://www.lusid.com/scheduler2/swagger/index.html) | | Insights |Monitoring and troubleshooting service. | [Swagger](https://www.lusid.com/insights/swagger/index.html) | | Identity | Identity management for LUSID (in conjuction with Access) | [Swagger](https://www.lusid.com/identity/swagger/index.html) | | Access | Access control for LUSID (in conjunction with Identity) | [Swagger](https://www.lusid.com/access/swagger/index.html) | | Drive | Secure file repository and manager for collaboration. | [Swagger](https://www.lusid.com/drive/swagger/index.html) | | Luminesce | Data virtualisation service (query data from multiple providers, including LUSID) | [Swagger](https://www.lusid.com/honeycomb/swagger/index.html) | | Notification | Notification service. | [Swagger](https://www.lusid.com/notifications/swagger/index.html) | | Configuration | File store for secrets and other sensitive information. | [Swagger](https://www.lusid.com/configuration/swagger/index.html) | 
 *
 * The version of the OpenAPI document: 0.11.3472
 * Contact: info@finbourne.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Lusid.Sdk.Client.OpenAPIDateConverter;

namespace Lusid.Sdk.Model
{
    /// <summary>
    /// The request used in the AggregatedReturns.
    /// </summary>
    [DataContract(Name = "AggregatedReturnsRequest")]
    public partial class AggregatedReturnsRequest : IEquatable<AggregatedReturnsRequest>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="AggregatedReturnsRequest" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected AggregatedReturnsRequest() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="AggregatedReturnsRequest" /> class.
        /// </summary>
        /// <param name="metrics">A list of metrics to calculate in the AggregatedReturns. (required).</param>
        /// <param name="recipeId">recipeId.</param>
        /// <param name="compositeMethod">The method used to calculate the Portfolio performance: Equal/Asset..</param>
        /// <param name="period">The type of the returns used to calculate the aggregation result: Daily/Monthly..</param>
        /// <param name="outputFrequency">The type of calculated output: Daily/Weekly/Monthly/Quarterly/Half-Yearly/Yearly..</param>
        public AggregatedReturnsRequest(List<PerformanceReturnsMetric> metrics = default(List<PerformanceReturnsMetric>), ResourceId recipeId = default(ResourceId), string compositeMethod = default(string), string period = default(string), string outputFrequency = default(string))
        {
            // to ensure "metrics" is required (not null)
            this.Metrics = metrics ?? throw new ArgumentNullException("metrics is a required property for AggregatedReturnsRequest and cannot be null");
            this.RecipeId = recipeId;
            this.CompositeMethod = compositeMethod;
            this.Period = period;
            this.OutputFrequency = outputFrequency;
        }

        /// <summary>
        /// A list of metrics to calculate in the AggregatedReturns.
        /// </summary>
        /// <value>A list of metrics to calculate in the AggregatedReturns.</value>
        [DataMember(Name = "metrics", IsRequired = true, EmitDefaultValue = false)]
        public List<PerformanceReturnsMetric> Metrics { get; set; }

        /// <summary>
        /// Gets or Sets RecipeId
        /// </summary>
        [DataMember(Name = "recipeId", EmitDefaultValue = false)]
        public ResourceId RecipeId { get; set; }

        /// <summary>
        /// The method used to calculate the Portfolio performance: Equal/Asset.
        /// </summary>
        /// <value>The method used to calculate the Portfolio performance: Equal/Asset.</value>
        [DataMember(Name = "compositeMethod", EmitDefaultValue = true)]
        public string CompositeMethod { get; set; }

        /// <summary>
        /// The type of the returns used to calculate the aggregation result: Daily/Monthly.
        /// </summary>
        /// <value>The type of the returns used to calculate the aggregation result: Daily/Monthly.</value>
        [DataMember(Name = "period", EmitDefaultValue = true)]
        public string Period { get; set; }

        /// <summary>
        /// The type of calculated output: Daily/Weekly/Monthly/Quarterly/Half-Yearly/Yearly.
        /// </summary>
        /// <value>The type of calculated output: Daily/Weekly/Monthly/Quarterly/Half-Yearly/Yearly.</value>
        [DataMember(Name = "outputFrequency", EmitDefaultValue = true)]
        public string OutputFrequency { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class AggregatedReturnsRequest {\n");
            sb.Append("  Metrics: ").Append(Metrics).Append("\n");
            sb.Append("  RecipeId: ").Append(RecipeId).Append("\n");
            sb.Append("  CompositeMethod: ").Append(CompositeMethod).Append("\n");
            sb.Append("  Period: ").Append(Period).Append("\n");
            sb.Append("  OutputFrequency: ").Append(OutputFrequency).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as AggregatedReturnsRequest);
        }

        /// <summary>
        /// Returns true if AggregatedReturnsRequest instances are equal
        /// </summary>
        /// <param name="input">Instance of AggregatedReturnsRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(AggregatedReturnsRequest input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Metrics == input.Metrics ||
                    this.Metrics != null &&
                    input.Metrics != null &&
                    this.Metrics.SequenceEqual(input.Metrics)
                ) && 
                (
                    this.RecipeId == input.RecipeId ||
                    (this.RecipeId != null &&
                    this.RecipeId.Equals(input.RecipeId))
                ) && 
                (
                    this.CompositeMethod == input.CompositeMethod ||
                    (this.CompositeMethod != null &&
                    this.CompositeMethod.Equals(input.CompositeMethod))
                ) && 
                (
                    this.Period == input.Period ||
                    (this.Period != null &&
                    this.Period.Equals(input.Period))
                ) && 
                (
                    this.OutputFrequency == input.OutputFrequency ||
                    (this.OutputFrequency != null &&
                    this.OutputFrequency.Equals(input.OutputFrequency))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Metrics != null)
                    hashCode = hashCode * 59 + this.Metrics.GetHashCode();
                if (this.RecipeId != null)
                    hashCode = hashCode * 59 + this.RecipeId.GetHashCode();
                if (this.CompositeMethod != null)
                    hashCode = hashCode * 59 + this.CompositeMethod.GetHashCode();
                if (this.Period != null)
                    hashCode = hashCode * 59 + this.Period.GetHashCode();
                if (this.OutputFrequency != null)
                    hashCode = hashCode * 59 + this.OutputFrequency.GetHashCode();
                return hashCode;
            }
        }

    }
}
