/* 
 * LUSID API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.10.1381
 * Contact: info@finbourne.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using OpenAPIDateConverter = Lusid.Sdk.Client.OpenAPIDateConverter;

namespace Lusid.Sdk.Model
{
    /// <summary>
    /// Options for controlling the default aspects and behaviour of the aggregation.
    /// </summary>
    [DataContract]
    public partial class AggregationOptions :  IEquatable<AggregationOptions>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="AggregationOptions" /> class.
        /// </summary>
        /// <param name="useAnsiLikeSyntax">Should the aggregation behave like ANSI Sql or MySql with respect to a conceptual request which is equivalent to \&quot;select a,sum(a) from results\&quot;;  ANSI Sql would report an error if a was not unique where MySql would simply view a,suma(a) as equivalent to firstof(a),sum(a)..</param>
        public AggregationOptions(bool? useAnsiLikeSyntax = default(bool?))
        {
            this.UseAnsiLikeSyntax = useAnsiLikeSyntax;
        }
        
        /// <summary>
        /// Should the aggregation behave like ANSI Sql or MySql with respect to a conceptual request which is equivalent to \&quot;select a,sum(a) from results\&quot;;  ANSI Sql would report an error if a was not unique where MySql would simply view a,suma(a) as equivalent to firstof(a),sum(a).
        /// </summary>
        /// <value>Should the aggregation behave like ANSI Sql or MySql with respect to a conceptual request which is equivalent to \&quot;select a,sum(a) from results\&quot;;  ANSI Sql would report an error if a was not unique where MySql would simply view a,suma(a) as equivalent to firstof(a),sum(a).</value>
        [DataMember(Name="useAnsiLikeSyntax", EmitDefaultValue=false)]
        public bool? UseAnsiLikeSyntax { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class AggregationOptions {\n");
            sb.Append("  UseAnsiLikeSyntax: ").Append(UseAnsiLikeSyntax).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as AggregationOptions);
        }

        /// <summary>
        /// Returns true if AggregationOptions instances are equal
        /// </summary>
        /// <param name="input">Instance of AggregationOptions to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(AggregationOptions input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.UseAnsiLikeSyntax == input.UseAnsiLikeSyntax ||
                    (this.UseAnsiLikeSyntax != null &&
                    this.UseAnsiLikeSyntax.Equals(input.UseAnsiLikeSyntax))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.UseAnsiLikeSyntax != null)
                    hashCode = hashCode * 59 + this.UseAnsiLikeSyntax.GetHashCode();
                return hashCode;
            }
        }
    }

}
