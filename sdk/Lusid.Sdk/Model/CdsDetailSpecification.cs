/* 
 * LUSID API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.10.1390
 * Contact: info@finbourne.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using OpenAPIDateConverter = Lusid.Sdk.Client.OpenAPIDateConverter;

namespace Lusid.Sdk.Model
{
    /// <summary>
    /// CDSs generally conform to fairly standard definitions, but can be tweaked in a number of different ways.  This class gathers a number of common features which may deviate. These will default to the market standard when  no overrides are provided
    /// </summary>
    [DataContract]
    public partial class CdsDetailSpecification :  IEquatable<CdsDetailSpecification>
    {
        /// <summary>
        /// The seniority level of the CDS
        /// </summary>
        /// <value>The seniority level of the CDS</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum SeniorityEnum
        {
            /// <summary>
            /// Enum Unknown for value: Unknown
            /// </summary>
            [EnumMember(Value = "Unknown")]
            Unknown = 1,

            /// <summary>
            /// Enum SNR for value: SNR
            /// </summary>
            [EnumMember(Value = "SNR")]
            SNR = 2,

            /// <summary>
            /// Enum SUB for value: SUB
            /// </summary>
            [EnumMember(Value = "SUB")]
            SUB = 3,

            /// <summary>
            /// Enum JRSUBUT2 for value: JRSUBUT2
            /// </summary>
            [EnumMember(Value = "JRSUBUT2")]
            JRSUBUT2 = 4,

            /// <summary>
            /// Enum PREFT1 for value: PREFT1
            /// </summary>
            [EnumMember(Value = "PREFT1")]
            PREFT1 = 5,

            /// <summary>
            /// Enum SECDOM for value: SECDOM
            /// </summary>
            [EnumMember(Value = "SECDOM")]
            SECDOM = 6,

            /// <summary>
            /// Enum SNRFOR for value: SNRFOR
            /// </summary>
            [EnumMember(Value = "SNRFOR")]
            SNRFOR = 7,

            /// <summary>
            /// Enum SUBLT2 for value: SUBLT2
            /// </summary>
            [EnumMember(Value = "SUBLT2")]
            SUBLT2 = 8

        }

        /// <summary>
        /// The seniority level of the CDS
        /// </summary>
        /// <value>The seniority level of the CDS</value>
        [DataMember(Name="seniority", EmitDefaultValue=false)]
        public SeniorityEnum Seniority { get; set; }
        /// <summary>
        /// The restructuring clause
        /// </summary>
        /// <value>The restructuring clause</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum RestructuringTypeEnum
        {
            /// <summary>
            /// Enum Unknown for value: Unknown
            /// </summary>
            [EnumMember(Value = "Unknown")]
            Unknown = 1,

            /// <summary>
            /// Enum CR for value: CR
            /// </summary>
            [EnumMember(Value = "CR")]
            CR = 2,

            /// <summary>
            /// Enum MR for value: MR
            /// </summary>
            [EnumMember(Value = "MR")]
            MR = 3,

            /// <summary>
            /// Enum MM for value: MM
            /// </summary>
            [EnumMember(Value = "MM")]
            MM = 4,

            /// <summary>
            /// Enum XR for value: XR
            /// </summary>
            [EnumMember(Value = "XR")]
            XR = 5

        }

        /// <summary>
        /// The restructuring clause
        /// </summary>
        /// <value>The restructuring clause</value>
        [DataMember(Name="restructuringType", EmitDefaultValue=false)]
        public RestructuringTypeEnum RestructuringType { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="CdsDetailSpecification" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected CdsDetailSpecification() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="CdsDetailSpecification" /> class.
        /// </summary>
        /// <param name="seniority">The seniority level of the CDS (required).</param>
        /// <param name="restructuringType">The restructuring clause (required).</param>
        /// <param name="protectStartDay">Does the protection leg pay out in the case of default on the start date (required).</param>
        /// <param name="payAccruedInterestOnDefault">Should accrued interest on the premium leg be paid if a credit event occurs (required).</param>
        /// <param name="rollFrequency">rollFrequency (required).</param>
        public CdsDetailSpecification(SeniorityEnum seniority = default(SeniorityEnum), RestructuringTypeEnum restructuringType = default(RestructuringTypeEnum), bool? protectStartDay = default(bool?), bool? payAccruedInterestOnDefault = default(bool?), Tenor rollFrequency = default(Tenor))
        {
            // to ensure "seniority" is required (not null)
            if (seniority == null)
            {
                throw new InvalidDataException("seniority is a required property for CdsDetailSpecification and cannot be null");
            }
            else
            {
                this.Seniority = seniority;
            }
            
            // to ensure "restructuringType" is required (not null)
            if (restructuringType == null)
            {
                throw new InvalidDataException("restructuringType is a required property for CdsDetailSpecification and cannot be null");
            }
            else
            {
                this.RestructuringType = restructuringType;
            }
            
            // to ensure "protectStartDay" is required (not null)
            if (protectStartDay == null)
            {
                throw new InvalidDataException("protectStartDay is a required property for CdsDetailSpecification and cannot be null");
            }
            else
            {
                this.ProtectStartDay = protectStartDay;
            }
            
            // to ensure "payAccruedInterestOnDefault" is required (not null)
            if (payAccruedInterestOnDefault == null)
            {
                throw new InvalidDataException("payAccruedInterestOnDefault is a required property for CdsDetailSpecification and cannot be null");
            }
            else
            {
                this.PayAccruedInterestOnDefault = payAccruedInterestOnDefault;
            }
            
            // to ensure "rollFrequency" is required (not null)
            if (rollFrequency == null)
            {
                throw new InvalidDataException("rollFrequency is a required property for CdsDetailSpecification and cannot be null");
            }
            else
            {
                this.RollFrequency = rollFrequency;
            }
            
        }
        


        /// <summary>
        /// Does the protection leg pay out in the case of default on the start date
        /// </summary>
        /// <value>Does the protection leg pay out in the case of default on the start date</value>
        [DataMember(Name="protectStartDay", EmitDefaultValue=false)]
        public bool? ProtectStartDay { get; set; }

        /// <summary>
        /// Should accrued interest on the premium leg be paid if a credit event occurs
        /// </summary>
        /// <value>Should accrued interest on the premium leg be paid if a credit event occurs</value>
        [DataMember(Name="payAccruedInterestOnDefault", EmitDefaultValue=false)]
        public bool? PayAccruedInterestOnDefault { get; set; }

        /// <summary>
        /// Gets or Sets RollFrequency
        /// </summary>
        [DataMember(Name="rollFrequency", EmitDefaultValue=false)]
        public Tenor RollFrequency { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CdsDetailSpecification {\n");
            sb.Append("  Seniority: ").Append(Seniority).Append("\n");
            sb.Append("  RestructuringType: ").Append(RestructuringType).Append("\n");
            sb.Append("  ProtectStartDay: ").Append(ProtectStartDay).Append("\n");
            sb.Append("  PayAccruedInterestOnDefault: ").Append(PayAccruedInterestOnDefault).Append("\n");
            sb.Append("  RollFrequency: ").Append(RollFrequency).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as CdsDetailSpecification);
        }

        /// <summary>
        /// Returns true if CdsDetailSpecification instances are equal
        /// </summary>
        /// <param name="input">Instance of CdsDetailSpecification to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CdsDetailSpecification input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Seniority == input.Seniority ||
                    (this.Seniority != null &&
                    this.Seniority.Equals(input.Seniority))
                ) && 
                (
                    this.RestructuringType == input.RestructuringType ||
                    (this.RestructuringType != null &&
                    this.RestructuringType.Equals(input.RestructuringType))
                ) && 
                (
                    this.ProtectStartDay == input.ProtectStartDay ||
                    (this.ProtectStartDay != null &&
                    this.ProtectStartDay.Equals(input.ProtectStartDay))
                ) && 
                (
                    this.PayAccruedInterestOnDefault == input.PayAccruedInterestOnDefault ||
                    (this.PayAccruedInterestOnDefault != null &&
                    this.PayAccruedInterestOnDefault.Equals(input.PayAccruedInterestOnDefault))
                ) && 
                (
                    this.RollFrequency == input.RollFrequency ||
                    (this.RollFrequency != null &&
                    this.RollFrequency.Equals(input.RollFrequency))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Seniority != null)
                    hashCode = hashCode * 59 + this.Seniority.GetHashCode();
                if (this.RestructuringType != null)
                    hashCode = hashCode * 59 + this.RestructuringType.GetHashCode();
                if (this.ProtectStartDay != null)
                    hashCode = hashCode * 59 + this.ProtectStartDay.GetHashCode();
                if (this.PayAccruedInterestOnDefault != null)
                    hashCode = hashCode * 59 + this.PayAccruedInterestOnDefault.GetHashCode();
                if (this.RollFrequency != null)
                    hashCode = hashCode * 59 + this.RollFrequency.GetHashCode();
                return hashCode;
            }
        }
    }

}
