/* 
 * LUSID API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.10.1383
 * Contact: info@finbourne.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using OpenAPIDateConverter = Lusid.Sdk.Client.OpenAPIDateConverter;

namespace Lusid.Sdk.Model
{
    /// <summary>
    /// A &#39;transition&#39; within a corporate action, representing a set of output movements paired to a single input position
    /// </summary>
    [DataContract]
    public partial class CorporateActionTransition :  IEquatable<CorporateActionTransition>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CorporateActionTransition" /> class.
        /// </summary>
        /// <param name="inputTransition">inputTransition.</param>
        /// <param name="outputTransitions">What will be generated relative to the input transition.</param>
        public CorporateActionTransition(CorporateActionTransitionComponent inputTransition = default(CorporateActionTransitionComponent), List<CorporateActionTransitionComponent> outputTransitions = default(List<CorporateActionTransitionComponent>))
        {
            this.InputTransition = inputTransition;
            this.OutputTransitions = outputTransitions;
        }
        
        /// <summary>
        /// Gets or Sets InputTransition
        /// </summary>
        [DataMember(Name="inputTransition", EmitDefaultValue=false)]
        public CorporateActionTransitionComponent InputTransition { get; set; }

        /// <summary>
        /// What will be generated relative to the input transition
        /// </summary>
        /// <value>What will be generated relative to the input transition</value>
        [DataMember(Name="outputTransitions", EmitDefaultValue=false)]
        public List<CorporateActionTransitionComponent> OutputTransitions { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CorporateActionTransition {\n");
            sb.Append("  InputTransition: ").Append(InputTransition).Append("\n");
            sb.Append("  OutputTransitions: ").Append(OutputTransitions).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as CorporateActionTransition);
        }

        /// <summary>
        /// Returns true if CorporateActionTransition instances are equal
        /// </summary>
        /// <param name="input">Instance of CorporateActionTransition to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CorporateActionTransition input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.InputTransition == input.InputTransition ||
                    (this.InputTransition != null &&
                    this.InputTransition.Equals(input.InputTransition))
                ) && 
                (
                    this.OutputTransitions == input.OutputTransitions ||
                    this.OutputTransitions != null &&
                    input.OutputTransitions != null &&
                    this.OutputTransitions.SequenceEqual(input.OutputTransitions)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.InputTransition != null)
                    hashCode = hashCode * 59 + this.InputTransition.GetHashCode();
                if (this.OutputTransitions != null)
                    hashCode = hashCode * 59 + this.OutputTransitions.GetHashCode();
                return hashCode;
            }
        }
    }

}
