/* 
 * LUSID API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.10.1387
 * Contact: info@finbourne.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using OpenAPIDateConverter = Lusid.Sdk.Client.OpenAPIDateConverter;

namespace Lusid.Sdk.Model
{
    /// <summary>
    /// CorporateActionTransitionComponentRequest
    /// </summary>
    [DataContract]
    public partial class CorporateActionTransitionComponentRequest :  IEquatable<CorporateActionTransitionComponentRequest>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CorporateActionTransitionComponentRequest" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected CorporateActionTransitionComponentRequest() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="CorporateActionTransitionComponentRequest" /> class.
        /// </summary>
        /// <param name="instrumentIdentifiers">Unique instrument identifiers (required).</param>
        /// <param name="unitsFactor">unitsFactor (required).</param>
        /// <param name="costFactor">costFactor (required).</param>
        public CorporateActionTransitionComponentRequest(Dictionary<string, string> instrumentIdentifiers = default(Dictionary<string, string>), decimal? unitsFactor = default(decimal?), decimal? costFactor = default(decimal?))
        {
            // to ensure "instrumentIdentifiers" is required (not null)
            if (instrumentIdentifiers == null)
            {
                throw new InvalidDataException("instrumentIdentifiers is a required property for CorporateActionTransitionComponentRequest and cannot be null");
            }
            else
            {
                this.InstrumentIdentifiers = instrumentIdentifiers;
            }
            
            // to ensure "unitsFactor" is required (not null)
            if (unitsFactor == null)
            {
                throw new InvalidDataException("unitsFactor is a required property for CorporateActionTransitionComponentRequest and cannot be null");
            }
            else
            {
                this.UnitsFactor = unitsFactor;
            }
            
            // to ensure "costFactor" is required (not null)
            if (costFactor == null)
            {
                throw new InvalidDataException("costFactor is a required property for CorporateActionTransitionComponentRequest and cannot be null");
            }
            else
            {
                this.CostFactor = costFactor;
            }
            
        }
        
        /// <summary>
        /// Unique instrument identifiers
        /// </summary>
        /// <value>Unique instrument identifiers</value>
        [DataMember(Name="instrumentIdentifiers", EmitDefaultValue=false)]
        public Dictionary<string, string> InstrumentIdentifiers { get; set; }

        /// <summary>
        /// Gets or Sets UnitsFactor
        /// </summary>
        [DataMember(Name="unitsFactor", EmitDefaultValue=false)]
        public decimal? UnitsFactor { get; set; }

        /// <summary>
        /// Gets or Sets CostFactor
        /// </summary>
        [DataMember(Name="costFactor", EmitDefaultValue=false)]
        public decimal? CostFactor { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CorporateActionTransitionComponentRequest {\n");
            sb.Append("  InstrumentIdentifiers: ").Append(InstrumentIdentifiers).Append("\n");
            sb.Append("  UnitsFactor: ").Append(UnitsFactor).Append("\n");
            sb.Append("  CostFactor: ").Append(CostFactor).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as CorporateActionTransitionComponentRequest);
        }

        /// <summary>
        /// Returns true if CorporateActionTransitionComponentRequest instances are equal
        /// </summary>
        /// <param name="input">Instance of CorporateActionTransitionComponentRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CorporateActionTransitionComponentRequest input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.InstrumentIdentifiers == input.InstrumentIdentifiers ||
                    this.InstrumentIdentifiers != null &&
                    input.InstrumentIdentifiers != null &&
                    this.InstrumentIdentifiers.SequenceEqual(input.InstrumentIdentifiers)
                ) && 
                (
                    this.UnitsFactor == input.UnitsFactor ||
                    (this.UnitsFactor != null &&
                    this.UnitsFactor.Equals(input.UnitsFactor))
                ) && 
                (
                    this.CostFactor == input.CostFactor ||
                    (this.CostFactor != null &&
                    this.CostFactor.Equals(input.CostFactor))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.InstrumentIdentifiers != null)
                    hashCode = hashCode * 59 + this.InstrumentIdentifiers.GetHashCode();
                if (this.UnitsFactor != null)
                    hashCode = hashCode * 59 + this.UnitsFactor.GetHashCode();
                if (this.CostFactor != null)
                    hashCode = hashCode * 59 + this.CostFactor.GetHashCode();
                return hashCode;
            }
        }
    }

}
