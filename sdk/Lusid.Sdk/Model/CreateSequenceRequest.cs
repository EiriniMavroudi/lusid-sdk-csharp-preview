/*
 * LUSID API
 *
 * # Introduction  This page documents the [LUSID APIs](https://www.lusid.com/api/swagger), which allows authorised clients to query and update their data within the LUSID platform.  SDKs to interact with the LUSID APIs are available in the following languages and frameworks:  * [C#](https://github.com/finbourne/lusid-sdk-csharp) * [Java](https://github.com/finbourne/lusid-sdk-java) * [JavaScript](https://github.com/finbourne/lusid-sdk-js) * [Python](https://github.com/finbourne/lusid-sdk-python) * [Angular](https://github.com/finbourne/lusid-sdk-angular)  The LUSID platform is made up of a number of sub-applications. You can find the API / swagger documentation by following the links in the table below.   | Application | Description | API / Swagger Documentation | | - -- -- | - -- -- | - -- - | | LUSID | Open, API-first, developer-friendly investment data platform. | [Swagger](https://www.lusid.com/api/swagger/index.html) | | Web app | User-facing front end for LUSID. | [Swagger](https://www.lusid.com/app/swagger/index.html) | | Scheduler | Automated job scheduler. | [Swagger](https://www.lusid.com/scheduler2/swagger/index.html) | | Insights |Monitoring and troubleshooting service. | [Swagger](https://www.lusid.com/insights/swagger/index.html) | | Identity | Identity management for LUSID (in conjuction with Access) | [Swagger](https://www.lusid.com/identity/swagger/index.html) | | Access | Access control for LUSID (in conjunction with Identity) | [Swagger](https://www.lusid.com/access/swagger/index.html) | | Drive | Secure file repository and manager for collaboration. | [Swagger](https://www.lusid.com/drive/swagger/index.html) | | Luminesce | Data virtualisation service (query data from multiple providers, including LUSID) | [Swagger](https://www.lusid.com/honeycomb/swagger/index.html) | | Notification | Notification service. | [Swagger](https://www.lusid.com/notifications/swagger/index.html) | | Configuration | File store for secrets and other sensitive information. | [Swagger](https://www.lusid.com/configuration/swagger/index.html) | 
 *
 * The version of the OpenAPI document: 0.11.3502
 * Contact: info@finbourne.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Lusid.Sdk.Client.OpenAPIDateConverter;

namespace Lusid.Sdk.Model
{
    /// <summary>
    /// CreateSequenceRequest
    /// </summary>
    [DataContract(Name = "CreateSequenceRequest")]
    public partial class CreateSequenceRequest : IEquatable<CreateSequenceRequest>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CreateSequenceRequest" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected CreateSequenceRequest() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="CreateSequenceRequest" /> class.
        /// </summary>
        /// <param name="code">The code of the sequence definition to create (required).</param>
        /// <param name="increment">The value to increment between each value in the sequence.</param>
        /// <param name="minValue">The minimum value of the sequence.</param>
        /// <param name="maxValue">The maximum value of the sequence.</param>
        /// <param name="start">The start value of the sequence.</param>
        /// <param name="cycle">Indicates if the sequence would start from minimun value once it reaches maximum value. If set to false, a failure would return if the sequence reaches maximum value. Default to false..</param>
        /// <param name="pattern">The pattern to be used to generate next values in the sequence. Default to null. Please provide a null value until further notice..</param>
        /// <param name="links">Collection of links..</param>
        public CreateSequenceRequest(string code = default(string), long? increment = default(long?), long? minValue = default(long?), long? maxValue = default(long?), long? start = default(long?), bool cycle = default(bool), string pattern = default(string), List<Link> links = default(List<Link>))
        {
            // to ensure "code" is required (not null)
            this.Code = code ?? throw new ArgumentNullException("code is a required property for CreateSequenceRequest and cannot be null");
            this.Increment = increment;
            this.MinValue = minValue;
            this.MaxValue = maxValue;
            this.Start = start;
            this.Cycle = cycle;
            this.Pattern = pattern;
            this.Links = links;
        }

        /// <summary>
        /// The code of the sequence definition to create
        /// </summary>
        /// <value>The code of the sequence definition to create</value>
        [DataMember(Name = "code", IsRequired = true, EmitDefaultValue = false)]
        public string Code { get; set; }

        /// <summary>
        /// The value to increment between each value in the sequence
        /// </summary>
        /// <value>The value to increment between each value in the sequence</value>
        [DataMember(Name = "increment", EmitDefaultValue = true)]
        public long? Increment { get; set; }

        /// <summary>
        /// The minimum value of the sequence
        /// </summary>
        /// <value>The minimum value of the sequence</value>
        [DataMember(Name = "minValue", EmitDefaultValue = true)]
        public long? MinValue { get; set; }

        /// <summary>
        /// The maximum value of the sequence
        /// </summary>
        /// <value>The maximum value of the sequence</value>
        [DataMember(Name = "maxValue", EmitDefaultValue = true)]
        public long? MaxValue { get; set; }

        /// <summary>
        /// The start value of the sequence
        /// </summary>
        /// <value>The start value of the sequence</value>
        [DataMember(Name = "start", EmitDefaultValue = true)]
        public long? Start { get; set; }

        /// <summary>
        /// Indicates if the sequence would start from minimun value once it reaches maximum value. If set to false, a failure would return if the sequence reaches maximum value. Default to false.
        /// </summary>
        /// <value>Indicates if the sequence would start from minimun value once it reaches maximum value. If set to false, a failure would return if the sequence reaches maximum value. Default to false.</value>
        [DataMember(Name = "cycle", EmitDefaultValue = true)]
        public bool Cycle { get; set; }

        /// <summary>
        /// The pattern to be used to generate next values in the sequence. Default to null. Please provide a null value until further notice.
        /// </summary>
        /// <value>The pattern to be used to generate next values in the sequence. Default to null. Please provide a null value until further notice.</value>
        [DataMember(Name = "pattern", EmitDefaultValue = true)]
        public string Pattern { get; set; }

        /// <summary>
        /// Collection of links.
        /// </summary>
        /// <value>Collection of links.</value>
        [DataMember(Name = "links", EmitDefaultValue = true)]
        public List<Link> Links { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CreateSequenceRequest {\n");
            sb.Append("  Code: ").Append(Code).Append("\n");
            sb.Append("  Increment: ").Append(Increment).Append("\n");
            sb.Append("  MinValue: ").Append(MinValue).Append("\n");
            sb.Append("  MaxValue: ").Append(MaxValue).Append("\n");
            sb.Append("  Start: ").Append(Start).Append("\n");
            sb.Append("  Cycle: ").Append(Cycle).Append("\n");
            sb.Append("  Pattern: ").Append(Pattern).Append("\n");
            sb.Append("  Links: ").Append(Links).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as CreateSequenceRequest);
        }

        /// <summary>
        /// Returns true if CreateSequenceRequest instances are equal
        /// </summary>
        /// <param name="input">Instance of CreateSequenceRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CreateSequenceRequest input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Code == input.Code ||
                    (this.Code != null &&
                    this.Code.Equals(input.Code))
                ) && 
                (
                    this.Increment == input.Increment ||
                    (this.Increment != null &&
                    this.Increment.Equals(input.Increment))
                ) && 
                (
                    this.MinValue == input.MinValue ||
                    (this.MinValue != null &&
                    this.MinValue.Equals(input.MinValue))
                ) && 
                (
                    this.MaxValue == input.MaxValue ||
                    (this.MaxValue != null &&
                    this.MaxValue.Equals(input.MaxValue))
                ) && 
                (
                    this.Start == input.Start ||
                    (this.Start != null &&
                    this.Start.Equals(input.Start))
                ) && 
                (
                    this.Cycle == input.Cycle ||
                    this.Cycle.Equals(input.Cycle)
                ) && 
                (
                    this.Pattern == input.Pattern ||
                    (this.Pattern != null &&
                    this.Pattern.Equals(input.Pattern))
                ) && 
                (
                    this.Links == input.Links ||
                    this.Links != null &&
                    input.Links != null &&
                    this.Links.SequenceEqual(input.Links)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Code != null)
                    hashCode = hashCode * 59 + this.Code.GetHashCode();
                if (this.Increment != null)
                    hashCode = hashCode * 59 + this.Increment.GetHashCode();
                if (this.MinValue != null)
                    hashCode = hashCode * 59 + this.MinValue.GetHashCode();
                if (this.MaxValue != null)
                    hashCode = hashCode * 59 + this.MaxValue.GetHashCode();
                if (this.Start != null)
                    hashCode = hashCode * 59 + this.Start.GetHashCode();
                hashCode = hashCode * 59 + this.Cycle.GetHashCode();
                if (this.Pattern != null)
                    hashCode = hashCode * 59 + this.Pattern.GetHashCode();
                if (this.Links != null)
                    hashCode = hashCode * 59 + this.Links.GetHashCode();
                return hashCode;
            }
        }

    }
}
