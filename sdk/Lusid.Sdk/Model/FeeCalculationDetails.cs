/*
 * LUSID API
 *
 * # Introduction  This page documents the [LUSID APIs](https://www.lusid.com/api/swagger), which allows authorised clients to query and update their data within the LUSID platform.  SDKs to interact with the LUSID APIs are available in the following languages and frameworks:  * [C#](https://github.com/finbourne/lusid-sdk-csharp) * [Java](https://github.com/finbourne/lusid-sdk-java) * [JavaScript](https://github.com/finbourne/lusid-sdk-js) * [Python](https://github.com/finbourne/lusid-sdk-python) * [Angular](https://github.com/finbourne/lusid-sdk-angular)  The LUSID platform is made up of a number of sub-applications. You can find the API / swagger documentation by following the links in the table below.   | Application | Description | API / Swagger Documentation | | - -- -- | - -- -- | - -- - | | LUSID | Open, API-first, developer-friendly investment data platform. | [Swagger](https://www.lusid.com/api/swagger/index.html) | | Web app | User-facing front end for LUSID. | [Swagger](https://www.lusid.com/app/swagger/index.html) | | Scheduler | Automated job scheduler. | [Swagger](https://www.lusid.com/scheduler2/swagger/index.html) | | Insights |Monitoring and troubleshooting service. | [Swagger](https://www.lusid.com/insights/swagger/index.html) | | Identity | Identity management for LUSID (in conjuction with Access) | [Swagger](https://www.lusid.com/identity/swagger/index.html) | | Access | Access control for LUSID (in conjunction with Identity) | [Swagger](https://www.lusid.com/access/swagger/index.html) | | Drive | Secure file repository and manager for collaboration. | [Swagger](https://www.lusid.com/drive/swagger/index.html) | | Luminesce | Data virtualisation service (query data from multiple providers, including LUSID) | [Swagger](https://www.lusid.com/honeycomb/swagger/index.html) | | Notification | Notification service. | [Swagger](https://www.lusid.com/notifications/swagger/index.html) | | Configuration | File store for secrets and other sensitive information. | [Swagger](https://www.lusid.com/configuration/swagger/index.html) | 
 *
 * The version of the OpenAPI document: 0.11.3477
 * Contact: info@finbourne.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Lusid.Sdk.Client.OpenAPIDateConverter;

namespace Lusid.Sdk.Model
{
    /// <summary>
    /// FeeCalculationDetails
    /// </summary>
    [DataContract(Name = "FeeCalculationDetails")]
    public partial class FeeCalculationDetails : IEquatable<FeeCalculationDetails>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="FeeCalculationDetails" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected FeeCalculationDetails() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="FeeCalculationDetails" /> class.
        /// </summary>
        /// <param name="ruleType">Rule Type (required).</param>
        /// <param name="ruleInformation">Rule Sub Type (required).</param>
        /// <param name="additionalInformation">Other property keys populated for the fee (required).</param>
        /// <param name="propertyKey">The property key which uniquely identifies the property. The format for the property key is {domain}/{scope}/{code}, e.g. &#39;Portfolio/Manager/Id&#39;. (required).</param>
        /// <param name="calculationMethod">Method of calculating the fees or commission eg. BPS or Fraction (required).</param>
        /// <param name="amount">Calculation value (required).</param>
        /// <param name="min">Calculation value (required).</param>
        /// <param name="max">Calculation value (required).</param>
        public FeeCalculationDetails(string ruleType = default(string), string ruleInformation = default(string), Dictionary<string, string> additionalInformation = default(Dictionary<string, string>), string propertyKey = default(string), string calculationMethod = default(string), decimal amount = default(decimal), decimal min = default(decimal), decimal max = default(decimal))
        {
            // to ensure "ruleType" is required (not null)
            this.RuleType = ruleType ?? throw new ArgumentNullException("ruleType is a required property for FeeCalculationDetails and cannot be null");
            // to ensure "ruleInformation" is required (not null)
            this.RuleInformation = ruleInformation ?? throw new ArgumentNullException("ruleInformation is a required property for FeeCalculationDetails and cannot be null");
            // to ensure "additionalInformation" is required (not null)
            this.AdditionalInformation = additionalInformation ?? throw new ArgumentNullException("additionalInformation is a required property for FeeCalculationDetails and cannot be null");
            // to ensure "propertyKey" is required (not null)
            this.PropertyKey = propertyKey ?? throw new ArgumentNullException("propertyKey is a required property for FeeCalculationDetails and cannot be null");
            // to ensure "calculationMethod" is required (not null)
            this.CalculationMethod = calculationMethod ?? throw new ArgumentNullException("calculationMethod is a required property for FeeCalculationDetails and cannot be null");
            this.Amount = amount;
            this.Min = min;
            this.Max = max;
        }

        /// <summary>
        /// Rule Type
        /// </summary>
        /// <value>Rule Type</value>
        [DataMember(Name = "ruleType", IsRequired = true, EmitDefaultValue = false)]
        public string RuleType { get; set; }

        /// <summary>
        /// Rule Sub Type
        /// </summary>
        /// <value>Rule Sub Type</value>
        [DataMember(Name = "ruleInformation", IsRequired = true, EmitDefaultValue = false)]
        public string RuleInformation { get; set; }

        /// <summary>
        /// Other property keys populated for the fee
        /// </summary>
        /// <value>Other property keys populated for the fee</value>
        [DataMember(Name = "additionalInformation", IsRequired = true, EmitDefaultValue = false)]
        public Dictionary<string, string> AdditionalInformation { get; set; }

        /// <summary>
        /// The property key which uniquely identifies the property. The format for the property key is {domain}/{scope}/{code}, e.g. &#39;Portfolio/Manager/Id&#39;.
        /// </summary>
        /// <value>The property key which uniquely identifies the property. The format for the property key is {domain}/{scope}/{code}, e.g. &#39;Portfolio/Manager/Id&#39;.</value>
        [DataMember(Name = "propertyKey", IsRequired = true, EmitDefaultValue = false)]
        public string PropertyKey { get; set; }

        /// <summary>
        /// Method of calculating the fees or commission eg. BPS or Fraction
        /// </summary>
        /// <value>Method of calculating the fees or commission eg. BPS or Fraction</value>
        [DataMember(Name = "calculationMethod", IsRequired = true, EmitDefaultValue = false)]
        public string CalculationMethod { get; set; }

        /// <summary>
        /// Calculation value
        /// </summary>
        /// <value>Calculation value</value>
        [DataMember(Name = "amount", IsRequired = true, EmitDefaultValue = true)]
        public decimal Amount { get; set; }

        /// <summary>
        /// Calculation value
        /// </summary>
        /// <value>Calculation value</value>
        [DataMember(Name = "min", IsRequired = true, EmitDefaultValue = true)]
        public decimal Min { get; set; }

        /// <summary>
        /// Calculation value
        /// </summary>
        /// <value>Calculation value</value>
        [DataMember(Name = "max", IsRequired = true, EmitDefaultValue = true)]
        public decimal Max { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class FeeCalculationDetails {\n");
            sb.Append("  RuleType: ").Append(RuleType).Append("\n");
            sb.Append("  RuleInformation: ").Append(RuleInformation).Append("\n");
            sb.Append("  AdditionalInformation: ").Append(AdditionalInformation).Append("\n");
            sb.Append("  PropertyKey: ").Append(PropertyKey).Append("\n");
            sb.Append("  CalculationMethod: ").Append(CalculationMethod).Append("\n");
            sb.Append("  Amount: ").Append(Amount).Append("\n");
            sb.Append("  Min: ").Append(Min).Append("\n");
            sb.Append("  Max: ").Append(Max).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as FeeCalculationDetails);
        }

        /// <summary>
        /// Returns true if FeeCalculationDetails instances are equal
        /// </summary>
        /// <param name="input">Instance of FeeCalculationDetails to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(FeeCalculationDetails input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.RuleType == input.RuleType ||
                    (this.RuleType != null &&
                    this.RuleType.Equals(input.RuleType))
                ) && 
                (
                    this.RuleInformation == input.RuleInformation ||
                    (this.RuleInformation != null &&
                    this.RuleInformation.Equals(input.RuleInformation))
                ) && 
                (
                    this.AdditionalInformation == input.AdditionalInformation ||
                    this.AdditionalInformation != null &&
                    input.AdditionalInformation != null &&
                    this.AdditionalInformation.SequenceEqual(input.AdditionalInformation)
                ) && 
                (
                    this.PropertyKey == input.PropertyKey ||
                    (this.PropertyKey != null &&
                    this.PropertyKey.Equals(input.PropertyKey))
                ) && 
                (
                    this.CalculationMethod == input.CalculationMethod ||
                    (this.CalculationMethod != null &&
                    this.CalculationMethod.Equals(input.CalculationMethod))
                ) && 
                (
                    this.Amount == input.Amount ||
                    this.Amount.Equals(input.Amount)
                ) && 
                (
                    this.Min == input.Min ||
                    this.Min.Equals(input.Min)
                ) && 
                (
                    this.Max == input.Max ||
                    this.Max.Equals(input.Max)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.RuleType != null)
                    hashCode = hashCode * 59 + this.RuleType.GetHashCode();
                if (this.RuleInformation != null)
                    hashCode = hashCode * 59 + this.RuleInformation.GetHashCode();
                if (this.AdditionalInformation != null)
                    hashCode = hashCode * 59 + this.AdditionalInformation.GetHashCode();
                if (this.PropertyKey != null)
                    hashCode = hashCode * 59 + this.PropertyKey.GetHashCode();
                if (this.CalculationMethod != null)
                    hashCode = hashCode * 59 + this.CalculationMethod.GetHashCode();
                hashCode = hashCode * 59 + this.Amount.GetHashCode();
                hashCode = hashCode * 59 + this.Min.GetHashCode();
                hashCode = hashCode * 59 + this.Max.GetHashCode();
                return hashCode;
            }
        }

    }
}
