/* 
 * LUSID API
 *
 * # Introduction  This page documents the [LUSID APIs](https://www.lusid.com/api/swagger), which allows authorised clients to query and update their data within the LUSID platform.  SDKs to interact with the LUSID APIs are available in the following languages and frameworks:  * [C#](https://github.com/finbourne/lusid-sdk-csharp) * [Java](https://github.com/finbourne/lusid-sdk-java) * [JavaScript](https://github.com/finbourne/lusid-sdk-js) * [Python](https://github.com/finbourne/lusid-sdk-python) * [Angular](https://github.com/finbourne/lusid-sdk-angular)  The LUSID platform is made up of a number of sub-applications. You can find the API / swagger documentation by following the links in the table below.   | Application | Description | API / Swagger Documentation | | - -- -- | - -- -- | - -- - | | LUSID | Open, API-first, developer-friendly investment data platform. | [Swagger](https://www.lusid.com/api/swagger/index.html) | | Web app | User-facing front end for LUSID. | [Swagger](https://www.lusid.com/app/swagger/index.html) | | Scheduler | Automated job scheduler. | [Swagger](https://www.lusid.com/scheduler2/swagger/index.html) | | Insights |Monitoring and troubleshooting service. | [Swagger](https://www.lusid.com/insights/swagger/index.html) | | Identity | Identity management for LUSID (in conjuction with Access) | [Swagger](https://www.lusid.com/identity/swagger/index.html) | | Access | Access control for LUSID (in conjunction with Identity) | [Swagger](https://www.lusid.com/access/swagger/index.html) | | Drive | Secure file repository and manager for collaboration. | [Swagger](https://www.lusid.com/drive/swagger/index.html) | | Luminesce | Data virtualisation service (query data from multiple providers, including LUSID) | [Swagger](https://www.lusid.com/honeycomb/swagger/index.html) | | Notification | Notification service. | [Swagger](https://www.lusid.com/notifications/swagger/index.html) | | Configuration | File store for secrets and other sensitive information. | [Swagger](https://www.lusid.com/configuration/swagger/index.html) | 
 *
 * The version of the OpenAPI document: 0.11.3433
 * Contact: info@finbourne.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using OpenAPIDateConverter = Lusid.Sdk.Client.OpenAPIDateConverter;

namespace Lusid.Sdk.Model
{
    /// <summary>
    /// Most, if not all, information about contracts is standardized. See, e.g. https://www.cmegroup.com/ for              common codes and similar data. This appears to be in common use by well known market information providers, e.g. Bloomberg and Refinitiv.
    /// </summary>
    [DataContract]
    public partial class FuturesContractDetails :  IEquatable<FuturesContractDetails>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="FuturesContractDetails" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected FuturesContractDetails() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="FuturesContractDetails" /> class.
        /// </summary>
        /// <param name="domCcy">currency in which the contract is paid. (required).</param>
        /// <param name="contractCode">The two letter contract code abbreviation. e.g. CL &#x3D;&gt; Crude Oil. (required).</param>
        /// <param name="contractMonth">which month does the contract trade for.  Supported string (enumeration) values are: [F, G, H, J, K, M, N, Q, U, V, X, Z]. (required).</param>
        /// <param name="contractSize">Size of a single contract. By default this should be set to 1000 if otherwise unknown and is defaulted to such. (required).</param>
        /// <param name="convention">If appropriate, the day count convention method used in pricing (rates futures) (required).</param>
        /// <param name="country">Country (code) for the exchange. (required).</param>
        /// <param name="description">Description of contract (required).</param>
        /// <param name="exchangeCode">Exchange code for contract  Supported string (enumeration) values are: [ASX, CBOT, CBF, CME, CMX, EOP, HKG, KFE, MFM, OSE, SGX, NYBOT, KCBT, MGE, MATIF, SFE, NYFE, NYM, LIFFE, EUREX, ICE, MSE]. (required).</param>
        /// <param name="exchangeName">Exchange name (for when code is not automatically recognized) (required).</param>
        /// <param name="tickerStep">Minimal step size change in ticker (required).</param>
        /// <param name="unitValue">The value in the currency of a 1 unit change in the contract price (required).</param>
        public FuturesContractDetails(string domCcy = default(string), string contractCode = default(string), string contractMonth = default(string), decimal? contractSize = default(decimal?), string convention = default(string), string country = default(string), string description = default(string), string exchangeCode = default(string), string exchangeName = default(string), decimal? tickerStep = default(decimal?), decimal? unitValue = default(decimal?))
        {
            // to ensure "domCcy" is required (not null)
            if (domCcy == null)
            {
                throw new InvalidDataException("domCcy is a required property for FuturesContractDetails and cannot be null");
            }
            else
            {
                this.DomCcy = domCcy;
            }
            
            // to ensure "contractCode" is required (not null)
            if (contractCode == null)
            {
                throw new InvalidDataException("contractCode is a required property for FuturesContractDetails and cannot be null");
            }
            else
            {
                this.ContractCode = contractCode;
            }
            
            // to ensure "contractMonth" is required (not null)
            if (contractMonth == null)
            {
                throw new InvalidDataException("contractMonth is a required property for FuturesContractDetails and cannot be null");
            }
            else
            {
                this.ContractMonth = contractMonth;
            }
            
            // to ensure "contractSize" is required (not null)
            if (contractSize == null)
            {
                throw new InvalidDataException("contractSize is a required property for FuturesContractDetails and cannot be null");
            }
            else
            {
                this.ContractSize = contractSize;
            }
            
            // to ensure "convention" is required (not null)
            if (convention == null)
            {
                throw new InvalidDataException("convention is a required property for FuturesContractDetails and cannot be null");
            }
            else
            {
                this.Convention = convention;
            }
            
            // to ensure "country" is required (not null)
            if (country == null)
            {
                throw new InvalidDataException("country is a required property for FuturesContractDetails and cannot be null");
            }
            else
            {
                this.Country = country;
            }
            
            // to ensure "description" is required (not null)
            if (description == null)
            {
                throw new InvalidDataException("description is a required property for FuturesContractDetails and cannot be null");
            }
            else
            {
                this.Description = description;
            }
            
            // to ensure "exchangeCode" is required (not null)
            if (exchangeCode == null)
            {
                throw new InvalidDataException("exchangeCode is a required property for FuturesContractDetails and cannot be null");
            }
            else
            {
                this.ExchangeCode = exchangeCode;
            }
            
            // to ensure "exchangeName" is required (not null)
            if (exchangeName == null)
            {
                throw new InvalidDataException("exchangeName is a required property for FuturesContractDetails and cannot be null");
            }
            else
            {
                this.ExchangeName = exchangeName;
            }
            
            // to ensure "tickerStep" is required (not null)
            if (tickerStep == null)
            {
                throw new InvalidDataException("tickerStep is a required property for FuturesContractDetails and cannot be null");
            }
            else
            {
                this.TickerStep = tickerStep;
            }
            
            // to ensure "unitValue" is required (not null)
            if (unitValue == null)
            {
                throw new InvalidDataException("unitValue is a required property for FuturesContractDetails and cannot be null");
            }
            else
            {
                this.UnitValue = unitValue;
            }
            
        }
        
        /// <summary>
        /// currency in which the contract is paid.
        /// </summary>
        /// <value>currency in which the contract is paid.</value>
        [DataMember(Name="domCcy", EmitDefaultValue=false)]
        public string DomCcy { get; set; }

        /// <summary>
        /// The two letter contract code abbreviation. e.g. CL &#x3D;&gt; Crude Oil.
        /// </summary>
        /// <value>The two letter contract code abbreviation. e.g. CL &#x3D;&gt; Crude Oil.</value>
        [DataMember(Name="contractCode", EmitDefaultValue=false)]
        public string ContractCode { get; set; }

        /// <summary>
        /// which month does the contract trade for.  Supported string (enumeration) values are: [F, G, H, J, K, M, N, Q, U, V, X, Z].
        /// </summary>
        /// <value>which month does the contract trade for.  Supported string (enumeration) values are: [F, G, H, J, K, M, N, Q, U, V, X, Z].</value>
        [DataMember(Name="contractMonth", EmitDefaultValue=false)]
        public string ContractMonth { get; set; }

        /// <summary>
        /// Size of a single contract. By default this should be set to 1000 if otherwise unknown and is defaulted to such.
        /// </summary>
        /// <value>Size of a single contract. By default this should be set to 1000 if otherwise unknown and is defaulted to such.</value>
        [DataMember(Name="contractSize", EmitDefaultValue=false)]
        public decimal? ContractSize { get; set; }

        /// <summary>
        /// If appropriate, the day count convention method used in pricing (rates futures)
        /// </summary>
        /// <value>If appropriate, the day count convention method used in pricing (rates futures)</value>
        [DataMember(Name="convention", EmitDefaultValue=false)]
        public string Convention { get; set; }

        /// <summary>
        /// Country (code) for the exchange.
        /// </summary>
        /// <value>Country (code) for the exchange.</value>
        [DataMember(Name="country", EmitDefaultValue=false)]
        public string Country { get; set; }

        /// <summary>
        /// Description of contract
        /// </summary>
        /// <value>Description of contract</value>
        [DataMember(Name="description", EmitDefaultValue=false)]
        public string Description { get; set; }

        /// <summary>
        /// Exchange code for contract  Supported string (enumeration) values are: [ASX, CBOT, CBF, CME, CMX, EOP, HKG, KFE, MFM, OSE, SGX, NYBOT, KCBT, MGE, MATIF, SFE, NYFE, NYM, LIFFE, EUREX, ICE, MSE].
        /// </summary>
        /// <value>Exchange code for contract  Supported string (enumeration) values are: [ASX, CBOT, CBF, CME, CMX, EOP, HKG, KFE, MFM, OSE, SGX, NYBOT, KCBT, MGE, MATIF, SFE, NYFE, NYM, LIFFE, EUREX, ICE, MSE].</value>
        [DataMember(Name="exchangeCode", EmitDefaultValue=false)]
        public string ExchangeCode { get; set; }

        /// <summary>
        /// Exchange name (for when code is not automatically recognized)
        /// </summary>
        /// <value>Exchange name (for when code is not automatically recognized)</value>
        [DataMember(Name="exchangeName", EmitDefaultValue=false)]
        public string ExchangeName { get; set; }

        /// <summary>
        /// Minimal step size change in ticker
        /// </summary>
        /// <value>Minimal step size change in ticker</value>
        [DataMember(Name="tickerStep", EmitDefaultValue=false)]
        public decimal? TickerStep { get; set; }

        /// <summary>
        /// The value in the currency of a 1 unit change in the contract price
        /// </summary>
        /// <value>The value in the currency of a 1 unit change in the contract price</value>
        [DataMember(Name="unitValue", EmitDefaultValue=false)]
        public decimal? UnitValue { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class FuturesContractDetails {\n");
            sb.Append("  DomCcy: ").Append(DomCcy).Append("\n");
            sb.Append("  ContractCode: ").Append(ContractCode).Append("\n");
            sb.Append("  ContractMonth: ").Append(ContractMonth).Append("\n");
            sb.Append("  ContractSize: ").Append(ContractSize).Append("\n");
            sb.Append("  Convention: ").Append(Convention).Append("\n");
            sb.Append("  Country: ").Append(Country).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  ExchangeCode: ").Append(ExchangeCode).Append("\n");
            sb.Append("  ExchangeName: ").Append(ExchangeName).Append("\n");
            sb.Append("  TickerStep: ").Append(TickerStep).Append("\n");
            sb.Append("  UnitValue: ").Append(UnitValue).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as FuturesContractDetails);
        }

        /// <summary>
        /// Returns true if FuturesContractDetails instances are equal
        /// </summary>
        /// <param name="input">Instance of FuturesContractDetails to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(FuturesContractDetails input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.DomCcy == input.DomCcy ||
                    (this.DomCcy != null &&
                    this.DomCcy.Equals(input.DomCcy))
                ) && 
                (
                    this.ContractCode == input.ContractCode ||
                    (this.ContractCode != null &&
                    this.ContractCode.Equals(input.ContractCode))
                ) && 
                (
                    this.ContractMonth == input.ContractMonth ||
                    (this.ContractMonth != null &&
                    this.ContractMonth.Equals(input.ContractMonth))
                ) && 
                (
                    this.ContractSize == input.ContractSize ||
                    (this.ContractSize != null &&
                    this.ContractSize.Equals(input.ContractSize))
                ) && 
                (
                    this.Convention == input.Convention ||
                    (this.Convention != null &&
                    this.Convention.Equals(input.Convention))
                ) && 
                (
                    this.Country == input.Country ||
                    (this.Country != null &&
                    this.Country.Equals(input.Country))
                ) && 
                (
                    this.Description == input.Description ||
                    (this.Description != null &&
                    this.Description.Equals(input.Description))
                ) && 
                (
                    this.ExchangeCode == input.ExchangeCode ||
                    (this.ExchangeCode != null &&
                    this.ExchangeCode.Equals(input.ExchangeCode))
                ) && 
                (
                    this.ExchangeName == input.ExchangeName ||
                    (this.ExchangeName != null &&
                    this.ExchangeName.Equals(input.ExchangeName))
                ) && 
                (
                    this.TickerStep == input.TickerStep ||
                    (this.TickerStep != null &&
                    this.TickerStep.Equals(input.TickerStep))
                ) && 
                (
                    this.UnitValue == input.UnitValue ||
                    (this.UnitValue != null &&
                    this.UnitValue.Equals(input.UnitValue))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.DomCcy != null)
                    hashCode = hashCode * 59 + this.DomCcy.GetHashCode();
                if (this.ContractCode != null)
                    hashCode = hashCode * 59 + this.ContractCode.GetHashCode();
                if (this.ContractMonth != null)
                    hashCode = hashCode * 59 + this.ContractMonth.GetHashCode();
                if (this.ContractSize != null)
                    hashCode = hashCode * 59 + this.ContractSize.GetHashCode();
                if (this.Convention != null)
                    hashCode = hashCode * 59 + this.Convention.GetHashCode();
                if (this.Country != null)
                    hashCode = hashCode * 59 + this.Country.GetHashCode();
                if (this.Description != null)
                    hashCode = hashCode * 59 + this.Description.GetHashCode();
                if (this.ExchangeCode != null)
                    hashCode = hashCode * 59 + this.ExchangeCode.GetHashCode();
                if (this.ExchangeName != null)
                    hashCode = hashCode * 59 + this.ExchangeName.GetHashCode();
                if (this.TickerStep != null)
                    hashCode = hashCode * 59 + this.TickerStep.GetHashCode();
                if (this.UnitValue != null)
                    hashCode = hashCode * 59 + this.UnitValue.GetHashCode();
                return hashCode;
            }
        }
    }

}
