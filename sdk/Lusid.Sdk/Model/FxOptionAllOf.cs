/* 
 * LUSID API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.10.1389
 * Contact: info@finbourne.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using OpenAPIDateConverter = Lusid.Sdk.Client.OpenAPIDateConverter;

namespace Lusid.Sdk.Model
{
    /// <summary>
    /// FxOptionAllOf
    /// </summary>
    [DataContract]
    public partial class FxOptionAllOf :  IEquatable<FxOptionAllOf>
    {
        /// <summary>
        /// Instrument type, must be property for JSON.
        /// </summary>
        /// <value>Instrument type, must be property for JSON.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum InstrumentTypeEnum
        {
            /// <summary>
            /// Enum QuotedSecurity for value: QuotedSecurity
            /// </summary>
            [EnumMember(Value = "QuotedSecurity")]
            QuotedSecurity = 1,

            /// <summary>
            /// Enum InterestRateSwap for value: InterestRateSwap
            /// </summary>
            [EnumMember(Value = "InterestRateSwap")]
            InterestRateSwap = 2,

            /// <summary>
            /// Enum FxForward for value: FxForward
            /// </summary>
            [EnumMember(Value = "FxForward")]
            FxForward = 3,

            /// <summary>
            /// Enum Exotic for value: Exotic
            /// </summary>
            [EnumMember(Value = "Exotic")]
            Exotic = 4,

            /// <summary>
            /// Enum FxOption for value: FxOption
            /// </summary>
            [EnumMember(Value = "FxOption")]
            FxOption = 5,

            /// <summary>
            /// Enum CreditDefaultSwap for value: CreditDefaultSwap
            /// </summary>
            [EnumMember(Value = "CreditDefaultSwap")]
            CreditDefaultSwap = 6,

            /// <summary>
            /// Enum InterestRateSwaption for value: InterestRateSwaption
            /// </summary>
            [EnumMember(Value = "InterestRateSwaption")]
            InterestRateSwaption = 7,

            /// <summary>
            /// Enum Bond for value: Bond
            /// </summary>
            [EnumMember(Value = "Bond")]
            Bond = 8,

            /// <summary>
            /// Enum EquityOption for value: EquityOption
            /// </summary>
            [EnumMember(Value = "EquityOption")]
            EquityOption = 9,

            /// <summary>
            /// Enum Unknown for value: Unknown
            /// </summary>
            [EnumMember(Value = "Unknown")]
            Unknown = 10

        }

        /// <summary>
        /// Instrument type, must be property for JSON.
        /// </summary>
        /// <value>Instrument type, must be property for JSON.</value>
        [DataMember(Name="instrumentType", EmitDefaultValue=false)]
        public InstrumentTypeEnum InstrumentType { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="FxOptionAllOf" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected FxOptionAllOf() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="FxOptionAllOf" /> class.
        /// </summary>
        /// <param name="startDate">The start date of the option. (required).</param>
        /// <param name="optionMaturityDate">The maturity date of the option. (required).</param>
        /// <param name="optionSettlementDate">The settlement date of the option. (required).</param>
        /// <param name="isDeliveryNotCash">True of the option is settled in cash false if delivery. (required).</param>
        /// <param name="isCallNotPut">True if the option is a call, false if the option is a put. (required).</param>
        /// <param name="strike">The strike of the option. (required).</param>
        /// <param name="domCcy">The domestic currency of the FX. (required).</param>
        /// <param name="fgnCcy">The foreign currency of the FX. (required).</param>
        /// <param name="instrumentType">Instrument type, must be property for JSON. (required).</param>
        public FxOptionAllOf(DateTimeOffset? startDate = default(DateTimeOffset?), DateTimeOffset? optionMaturityDate = default(DateTimeOffset?), DateTimeOffset? optionSettlementDate = default(DateTimeOffset?), bool? isDeliveryNotCash = default(bool?), bool? isCallNotPut = default(bool?), decimal? strike = default(decimal?), string domCcy = default(string), string fgnCcy = default(string), InstrumentTypeEnum instrumentType = default(InstrumentTypeEnum))
        {
            // to ensure "startDate" is required (not null)
            if (startDate == null)
            {
                throw new InvalidDataException("startDate is a required property for FxOptionAllOf and cannot be null");
            }
            else
            {
                this.StartDate = startDate;
            }
            
            // to ensure "optionMaturityDate" is required (not null)
            if (optionMaturityDate == null)
            {
                throw new InvalidDataException("optionMaturityDate is a required property for FxOptionAllOf and cannot be null");
            }
            else
            {
                this.OptionMaturityDate = optionMaturityDate;
            }
            
            // to ensure "optionSettlementDate" is required (not null)
            if (optionSettlementDate == null)
            {
                throw new InvalidDataException("optionSettlementDate is a required property for FxOptionAllOf and cannot be null");
            }
            else
            {
                this.OptionSettlementDate = optionSettlementDate;
            }
            
            // to ensure "isDeliveryNotCash" is required (not null)
            if (isDeliveryNotCash == null)
            {
                throw new InvalidDataException("isDeliveryNotCash is a required property for FxOptionAllOf and cannot be null");
            }
            else
            {
                this.IsDeliveryNotCash = isDeliveryNotCash;
            }
            
            // to ensure "isCallNotPut" is required (not null)
            if (isCallNotPut == null)
            {
                throw new InvalidDataException("isCallNotPut is a required property for FxOptionAllOf and cannot be null");
            }
            else
            {
                this.IsCallNotPut = isCallNotPut;
            }
            
            // to ensure "strike" is required (not null)
            if (strike == null)
            {
                throw new InvalidDataException("strike is a required property for FxOptionAllOf and cannot be null");
            }
            else
            {
                this.Strike = strike;
            }
            
            // to ensure "domCcy" is required (not null)
            if (domCcy == null)
            {
                throw new InvalidDataException("domCcy is a required property for FxOptionAllOf and cannot be null");
            }
            else
            {
                this.DomCcy = domCcy;
            }
            
            // to ensure "fgnCcy" is required (not null)
            if (fgnCcy == null)
            {
                throw new InvalidDataException("fgnCcy is a required property for FxOptionAllOf and cannot be null");
            }
            else
            {
                this.FgnCcy = fgnCcy;
            }
            
            // to ensure "instrumentType" is required (not null)
            if (instrumentType == null)
            {
                throw new InvalidDataException("instrumentType is a required property for FxOptionAllOf and cannot be null");
            }
            else
            {
                this.InstrumentType = instrumentType;
            }
            
        }
        
        /// <summary>
        /// The start date of the option.
        /// </summary>
        /// <value>The start date of the option.</value>
        [DataMember(Name="startDate", EmitDefaultValue=false)]
        public DateTimeOffset? StartDate { get; set; }

        /// <summary>
        /// The maturity date of the option.
        /// </summary>
        /// <value>The maturity date of the option.</value>
        [DataMember(Name="optionMaturityDate", EmitDefaultValue=false)]
        public DateTimeOffset? OptionMaturityDate { get; set; }

        /// <summary>
        /// The settlement date of the option.
        /// </summary>
        /// <value>The settlement date of the option.</value>
        [DataMember(Name="optionSettlementDate", EmitDefaultValue=false)]
        public DateTimeOffset? OptionSettlementDate { get; set; }

        /// <summary>
        /// True of the option is settled in cash false if delivery.
        /// </summary>
        /// <value>True of the option is settled in cash false if delivery.</value>
        [DataMember(Name="isDeliveryNotCash", EmitDefaultValue=false)]
        public bool? IsDeliveryNotCash { get; set; }

        /// <summary>
        /// True if the option is a call, false if the option is a put.
        /// </summary>
        /// <value>True if the option is a call, false if the option is a put.</value>
        [DataMember(Name="isCallNotPut", EmitDefaultValue=false)]
        public bool? IsCallNotPut { get; set; }

        /// <summary>
        /// The strike of the option.
        /// </summary>
        /// <value>The strike of the option.</value>
        [DataMember(Name="strike", EmitDefaultValue=false)]
        public decimal? Strike { get; set; }

        /// <summary>
        /// The domestic currency of the FX.
        /// </summary>
        /// <value>The domestic currency of the FX.</value>
        [DataMember(Name="domCcy", EmitDefaultValue=false)]
        public string DomCcy { get; set; }

        /// <summary>
        /// The foreign currency of the FX.
        /// </summary>
        /// <value>The foreign currency of the FX.</value>
        [DataMember(Name="fgnCcy", EmitDefaultValue=false)]
        public string FgnCcy { get; set; }


        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class FxOptionAllOf {\n");
            sb.Append("  StartDate: ").Append(StartDate).Append("\n");
            sb.Append("  OptionMaturityDate: ").Append(OptionMaturityDate).Append("\n");
            sb.Append("  OptionSettlementDate: ").Append(OptionSettlementDate).Append("\n");
            sb.Append("  IsDeliveryNotCash: ").Append(IsDeliveryNotCash).Append("\n");
            sb.Append("  IsCallNotPut: ").Append(IsCallNotPut).Append("\n");
            sb.Append("  Strike: ").Append(Strike).Append("\n");
            sb.Append("  DomCcy: ").Append(DomCcy).Append("\n");
            sb.Append("  FgnCcy: ").Append(FgnCcy).Append("\n");
            sb.Append("  InstrumentType: ").Append(InstrumentType).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as FxOptionAllOf);
        }

        /// <summary>
        /// Returns true if FxOptionAllOf instances are equal
        /// </summary>
        /// <param name="input">Instance of FxOptionAllOf to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(FxOptionAllOf input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.StartDate == input.StartDate ||
                    (this.StartDate != null &&
                    this.StartDate.Equals(input.StartDate))
                ) && 
                (
                    this.OptionMaturityDate == input.OptionMaturityDate ||
                    (this.OptionMaturityDate != null &&
                    this.OptionMaturityDate.Equals(input.OptionMaturityDate))
                ) && 
                (
                    this.OptionSettlementDate == input.OptionSettlementDate ||
                    (this.OptionSettlementDate != null &&
                    this.OptionSettlementDate.Equals(input.OptionSettlementDate))
                ) && 
                (
                    this.IsDeliveryNotCash == input.IsDeliveryNotCash ||
                    (this.IsDeliveryNotCash != null &&
                    this.IsDeliveryNotCash.Equals(input.IsDeliveryNotCash))
                ) && 
                (
                    this.IsCallNotPut == input.IsCallNotPut ||
                    (this.IsCallNotPut != null &&
                    this.IsCallNotPut.Equals(input.IsCallNotPut))
                ) && 
                (
                    this.Strike == input.Strike ||
                    (this.Strike != null &&
                    this.Strike.Equals(input.Strike))
                ) && 
                (
                    this.DomCcy == input.DomCcy ||
                    (this.DomCcy != null &&
                    this.DomCcy.Equals(input.DomCcy))
                ) && 
                (
                    this.FgnCcy == input.FgnCcy ||
                    (this.FgnCcy != null &&
                    this.FgnCcy.Equals(input.FgnCcy))
                ) && 
                (
                    this.InstrumentType == input.InstrumentType ||
                    (this.InstrumentType != null &&
                    this.InstrumentType.Equals(input.InstrumentType))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.StartDate != null)
                    hashCode = hashCode * 59 + this.StartDate.GetHashCode();
                if (this.OptionMaturityDate != null)
                    hashCode = hashCode * 59 + this.OptionMaturityDate.GetHashCode();
                if (this.OptionSettlementDate != null)
                    hashCode = hashCode * 59 + this.OptionSettlementDate.GetHashCode();
                if (this.IsDeliveryNotCash != null)
                    hashCode = hashCode * 59 + this.IsDeliveryNotCash.GetHashCode();
                if (this.IsCallNotPut != null)
                    hashCode = hashCode * 59 + this.IsCallNotPut.GetHashCode();
                if (this.Strike != null)
                    hashCode = hashCode * 59 + this.Strike.GetHashCode();
                if (this.DomCcy != null)
                    hashCode = hashCode * 59 + this.DomCcy.GetHashCode();
                if (this.FgnCcy != null)
                    hashCode = hashCode * 59 + this.FgnCcy.GetHashCode();
                if (this.InstrumentType != null)
                    hashCode = hashCode * 59 + this.InstrumentType.GetHashCode();
                return hashCode;
            }
        }
    }

}
