/* 
 * LUSID API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.10.1391
 * Contact: info@finbourne.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using OpenAPIDateConverter = Lusid.Sdk.Client.OpenAPIDateConverter;

namespace Lusid.Sdk.Model
{
    /// <summary>
    /// Specification for an inline aggregation request consisting of an aggregation request and an inlined portfolio on which it is to be performed
    /// </summary>
    [DataContract]
    public partial class InlineAggregationRequest :  IEquatable<InlineAggregationRequest>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="InlineAggregationRequest" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected InlineAggregationRequest() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="InlineAggregationRequest" /> class.
        /// </summary>
        /// <param name="request">request (required).</param>
        /// <param name="instruments">The set of instruments, weighted by the quantities held that are required.  It is identified by an identifier tag that can be used to identify it externally.  For a single, unique trade or transaction this can be thought of as equivalent to the transaction identifier, or  a composite of the sub-holding keys for a regular sub-holding. When there are multiple transactions sharing the same underlying instrument  such as purchase of shares on multiple dates where tax implications are different this would not be the case. (required).</param>
        public InlineAggregationRequest(AggregationRequest request = default(AggregationRequest), List<WeightedInstrument> instruments = default(List<WeightedInstrument>))
        {
            // to ensure "request" is required (not null)
            if (request == null)
            {
                throw new InvalidDataException("request is a required property for InlineAggregationRequest and cannot be null");
            }
            else
            {
                this.Request = request;
            }
            
            // to ensure "instruments" is required (not null)
            if (instruments == null)
            {
                throw new InvalidDataException("instruments is a required property for InlineAggregationRequest and cannot be null");
            }
            else
            {
                this.Instruments = instruments;
            }
            
        }
        
        /// <summary>
        /// Gets or Sets Request
        /// </summary>
        [DataMember(Name="request", EmitDefaultValue=false)]
        public AggregationRequest Request { get; set; }

        /// <summary>
        /// The set of instruments, weighted by the quantities held that are required.  It is identified by an identifier tag that can be used to identify it externally.  For a single, unique trade or transaction this can be thought of as equivalent to the transaction identifier, or  a composite of the sub-holding keys for a regular sub-holding. When there are multiple transactions sharing the same underlying instrument  such as purchase of shares on multiple dates where tax implications are different this would not be the case.
        /// </summary>
        /// <value>The set of instruments, weighted by the quantities held that are required.  It is identified by an identifier tag that can be used to identify it externally.  For a single, unique trade or transaction this can be thought of as equivalent to the transaction identifier, or  a composite of the sub-holding keys for a regular sub-holding. When there are multiple transactions sharing the same underlying instrument  such as purchase of shares on multiple dates where tax implications are different this would not be the case.</value>
        [DataMember(Name="instruments", EmitDefaultValue=false)]
        public List<WeightedInstrument> Instruments { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class InlineAggregationRequest {\n");
            sb.Append("  Request: ").Append(Request).Append("\n");
            sb.Append("  Instruments: ").Append(Instruments).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as InlineAggregationRequest);
        }

        /// <summary>
        /// Returns true if InlineAggregationRequest instances are equal
        /// </summary>
        /// <param name="input">Instance of InlineAggregationRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(InlineAggregationRequest input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Request == input.Request ||
                    (this.Request != null &&
                    this.Request.Equals(input.Request))
                ) && 
                (
                    this.Instruments == input.Instruments ||
                    this.Instruments != null &&
                    input.Instruments != null &&
                    this.Instruments.SequenceEqual(input.Instruments)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Request != null)
                    hashCode = hashCode * 59 + this.Request.GetHashCode();
                if (this.Instruments != null)
                    hashCode = hashCode * 59 + this.Instruments.GetHashCode();
                return hashCode;
            }
        }
    }

}
