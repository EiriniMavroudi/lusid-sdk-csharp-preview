/* 
 * LUSID API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.10.1390
 * Contact: info@finbourne.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using OpenAPIDateConverter = Lusid.Sdk.Client.OpenAPIDateConverter;

namespace Lusid.Sdk.Model
{
    /// <summary>
    /// The leg of the swap.
    /// </summary>
    [DataContract]
    public partial class InstrumentLeg :  IEquatable<InstrumentLeg>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="InstrumentLeg" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected InstrumentLeg() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="InstrumentLeg" /> class.
        /// </summary>
        /// <param name="conventions">conventions (required).</param>
        /// <param name="isPayNotReceive">True if the holder of the swap pays, false if they receive the flows on this leg. (required).</param>
        /// <param name="isFloatNotFixed">True if the payments float or are fixed. (required).</param>
        /// <param name="fixedRate">If the leg is fixed, the fixed rate. (required).</param>
        public InstrumentLeg(FlowConventions conventions = default(FlowConventions), bool? isPayNotReceive = default(bool?), bool? isFloatNotFixed = default(bool?), decimal? fixedRate = default(decimal?))
        {
            // to ensure "conventions" is required (not null)
            if (conventions == null)
            {
                throw new InvalidDataException("conventions is a required property for InstrumentLeg and cannot be null");
            }
            else
            {
                this.Conventions = conventions;
            }
            
            // to ensure "isPayNotReceive" is required (not null)
            if (isPayNotReceive == null)
            {
                throw new InvalidDataException("isPayNotReceive is a required property for InstrumentLeg and cannot be null");
            }
            else
            {
                this.IsPayNotReceive = isPayNotReceive;
            }
            
            // to ensure "isFloatNotFixed" is required (not null)
            if (isFloatNotFixed == null)
            {
                throw new InvalidDataException("isFloatNotFixed is a required property for InstrumentLeg and cannot be null");
            }
            else
            {
                this.IsFloatNotFixed = isFloatNotFixed;
            }
            
            // to ensure "fixedRate" is required (not null)
            if (fixedRate == null)
            {
                throw new InvalidDataException("fixedRate is a required property for InstrumentLeg and cannot be null");
            }
            else
            {
                this.FixedRate = fixedRate;
            }
            
        }
        
        /// <summary>
        /// Gets or Sets Conventions
        /// </summary>
        [DataMember(Name="conventions", EmitDefaultValue=false)]
        public FlowConventions Conventions { get; set; }

        /// <summary>
        /// True if the holder of the swap pays, false if they receive the flows on this leg.
        /// </summary>
        /// <value>True if the holder of the swap pays, false if they receive the flows on this leg.</value>
        [DataMember(Name="isPayNotReceive", EmitDefaultValue=false)]
        public bool? IsPayNotReceive { get; set; }

        /// <summary>
        /// True if the payments float or are fixed.
        /// </summary>
        /// <value>True if the payments float or are fixed.</value>
        [DataMember(Name="isFloatNotFixed", EmitDefaultValue=false)]
        public bool? IsFloatNotFixed { get; set; }

        /// <summary>
        /// If the leg is fixed, the fixed rate.
        /// </summary>
        /// <value>If the leg is fixed, the fixed rate.</value>
        [DataMember(Name="fixedRate", EmitDefaultValue=false)]
        public decimal? FixedRate { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class InstrumentLeg {\n");
            sb.Append("  Conventions: ").Append(Conventions).Append("\n");
            sb.Append("  IsPayNotReceive: ").Append(IsPayNotReceive).Append("\n");
            sb.Append("  IsFloatNotFixed: ").Append(IsFloatNotFixed).Append("\n");
            sb.Append("  FixedRate: ").Append(FixedRate).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as InstrumentLeg);
        }

        /// <summary>
        /// Returns true if InstrumentLeg instances are equal
        /// </summary>
        /// <param name="input">Instance of InstrumentLeg to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(InstrumentLeg input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Conventions == input.Conventions ||
                    (this.Conventions != null &&
                    this.Conventions.Equals(input.Conventions))
                ) && 
                (
                    this.IsPayNotReceive == input.IsPayNotReceive ||
                    (this.IsPayNotReceive != null &&
                    this.IsPayNotReceive.Equals(input.IsPayNotReceive))
                ) && 
                (
                    this.IsFloatNotFixed == input.IsFloatNotFixed ||
                    (this.IsFloatNotFixed != null &&
                    this.IsFloatNotFixed.Equals(input.IsFloatNotFixed))
                ) && 
                (
                    this.FixedRate == input.FixedRate ||
                    (this.FixedRate != null &&
                    this.FixedRate.Equals(input.FixedRate))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Conventions != null)
                    hashCode = hashCode * 59 + this.Conventions.GetHashCode();
                if (this.IsPayNotReceive != null)
                    hashCode = hashCode * 59 + this.IsPayNotReceive.GetHashCode();
                if (this.IsFloatNotFixed != null)
                    hashCode = hashCode * 59 + this.IsFloatNotFixed.GetHashCode();
                if (this.FixedRate != null)
                    hashCode = hashCode * 59 + this.FixedRate.GetHashCode();
                return hashCode;
            }
        }
    }

}
