/* 
 * LUSID API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.10.1390
 * Contact: info@finbourne.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using OpenAPIDateConverter = Lusid.Sdk.Client.OpenAPIDateConverter;

namespace Lusid.Sdk.Model
{
    /// <summary>
    /// A market data key rule describes a mapping for satisfying a particular market dependency. The supplier, scope, quote type and price side  information define the quote in the market and which Vendor for market data would be used to perform the lookup.  The market data key defines what dependency this satisfies. The key is a rule that describes the asset class, its identifier and any other  specifics required to uniquely describe a specific economic entity (e.g. an Fx currency pair, equity name or credit curve).
    /// </summary>
    [DataContract]
    public partial class MarketDataKeyRule :  IEquatable<MarketDataKeyRule>
    {
        /// <summary>
        /// The market data supplier (where the data comes from)
        /// </summary>
        /// <value>The market data supplier (where the data comes from)</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum SupplierEnum
        {
            /// <summary>
            /// Enum DataScope for value: DataScope
            /// </summary>
            [EnumMember(Value = "DataScope")]
            DataScope = 1,

            /// <summary>
            /// Enum Lusid for value: Lusid
            /// </summary>
            [EnumMember(Value = "Lusid")]
            Lusid = 2,

            /// <summary>
            /// Enum Isda for value: Isda
            /// </summary>
            [EnumMember(Value = "Isda")]
            Isda = 3,

            /// <summary>
            /// Enum Client for value: Client
            /// </summary>
            [EnumMember(Value = "Client")]
            Client = 4,

            /// <summary>
            /// Enum Edi for value: Edi
            /// </summary>
            [EnumMember(Value = "Edi")]
            Edi = 5,

            /// <summary>
            /// Enum TraderMade for value: TraderMade
            /// </summary>
            [EnumMember(Value = "TraderMade")]
            TraderMade = 6,

            /// <summary>
            /// Enum FactSet for value: FactSet
            /// </summary>
            [EnumMember(Value = "FactSet")]
            FactSet = 7

        }

        /// <summary>
        /// The market data supplier (where the data comes from)
        /// </summary>
        /// <value>The market data supplier (where the data comes from)</value>
        [DataMember(Name="supplier", EmitDefaultValue=false)]
        public SupplierEnum Supplier { get; set; }
        /// <summary>
        /// Is the quote to be looked for a price, yield etc.
        /// </summary>
        /// <value>Is the quote to be looked for a price, yield etc.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum QuoteTypeEnum
        {
            /// <summary>
            /// Enum Price for value: Price
            /// </summary>
            [EnumMember(Value = "Price")]
            Price = 1,

            /// <summary>
            /// Enum Spread for value: Spread
            /// </summary>
            [EnumMember(Value = "Spread")]
            Spread = 2,

            /// <summary>
            /// Enum Rate for value: Rate
            /// </summary>
            [EnumMember(Value = "Rate")]
            Rate = 3,

            /// <summary>
            /// Enum LogNormalVol for value: LogNormalVol
            /// </summary>
            [EnumMember(Value = "LogNormalVol")]
            LogNormalVol = 4,

            /// <summary>
            /// Enum NormalVol for value: NormalVol
            /// </summary>
            [EnumMember(Value = "NormalVol")]
            NormalVol = 5,

            /// <summary>
            /// Enum ParSpread for value: ParSpread
            /// </summary>
            [EnumMember(Value = "ParSpread")]
            ParSpread = 6,

            /// <summary>
            /// Enum IsdaSpread for value: IsdaSpread
            /// </summary>
            [EnumMember(Value = "IsdaSpread")]
            IsdaSpread = 7,

            /// <summary>
            /// Enum Upfront for value: Upfront
            /// </summary>
            [EnumMember(Value = "Upfront")]
            Upfront = 8

        }

        /// <summary>
        /// Is the quote to be looked for a price, yield etc.
        /// </summary>
        /// <value>Is the quote to be looked for a price, yield etc.</value>
        [DataMember(Name="quoteType", EmitDefaultValue=false)]
        public QuoteTypeEnum QuoteType { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="MarketDataKeyRule" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected MarketDataKeyRule() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="MarketDataKeyRule" /> class.
        /// </summary>
        /// <param name="key">The market data key pattern which this is a rule for. A dot separated string (A.B.C.D.*) (required).</param>
        /// <param name="supplier">The market data supplier (where the data comes from) (required).</param>
        /// <param name="dataScope">The scope in which the data should be found when using this rule. (required).</param>
        /// <param name="quoteType">Is the quote to be looked for a price, yield etc. (required).</param>
        /// <param name="field">The conceptual qualification for the field, such as bid, mid, or ask.   The field must be one of a defined set for the given supplier, in the same way as it  is for the Finbourne.WebApi.Interface.Dto.Quotes.QuoteSeriesId (required).</param>
        /// <param name="quoteInterval">Shorthand for the time interval used to select market data..</param>
        /// <param name="asAt">The AsAt predicate specification..</param>
        /// <param name="priceSource">The source of the quote. For a given provider/supplier of market data there may be an additional qualifier, e.g. the exchange or bank that provided the quote.</param>
        public MarketDataKeyRule(string key = default(string), SupplierEnum supplier = default(SupplierEnum), string dataScope = default(string), QuoteTypeEnum quoteType = default(QuoteTypeEnum), string field = default(string), string quoteInterval = default(string), DateTimeOffset? asAt = default(DateTimeOffset?), string priceSource = default(string))
        {
            // to ensure "key" is required (not null)
            if (key == null)
            {
                throw new InvalidDataException("key is a required property for MarketDataKeyRule and cannot be null");
            }
            else
            {
                this.Key = key;
            }
            
            // to ensure "supplier" is required (not null)
            if (supplier == null)
            {
                throw new InvalidDataException("supplier is a required property for MarketDataKeyRule and cannot be null");
            }
            else
            {
                this.Supplier = supplier;
            }
            
            // to ensure "dataScope" is required (not null)
            if (dataScope == null)
            {
                throw new InvalidDataException("dataScope is a required property for MarketDataKeyRule and cannot be null");
            }
            else
            {
                this.DataScope = dataScope;
            }
            
            // to ensure "quoteType" is required (not null)
            if (quoteType == null)
            {
                throw new InvalidDataException("quoteType is a required property for MarketDataKeyRule and cannot be null");
            }
            else
            {
                this.QuoteType = quoteType;
            }
            
            // to ensure "field" is required (not null)
            if (field == null)
            {
                throw new InvalidDataException("field is a required property for MarketDataKeyRule and cannot be null");
            }
            else
            {
                this.Field = field;
            }
            
            this.QuoteInterval = quoteInterval;
            this.AsAt = asAt;
            this.PriceSource = priceSource;
        }
        
        /// <summary>
        /// The market data key pattern which this is a rule for. A dot separated string (A.B.C.D.*)
        /// </summary>
        /// <value>The market data key pattern which this is a rule for. A dot separated string (A.B.C.D.*)</value>
        [DataMember(Name="key", EmitDefaultValue=false)]
        public string Key { get; set; }


        /// <summary>
        /// The scope in which the data should be found when using this rule.
        /// </summary>
        /// <value>The scope in which the data should be found when using this rule.</value>
        [DataMember(Name="dataScope", EmitDefaultValue=false)]
        public string DataScope { get; set; }


        /// <summary>
        /// The conceptual qualification for the field, such as bid, mid, or ask.   The field must be one of a defined set for the given supplier, in the same way as it  is for the Finbourne.WebApi.Interface.Dto.Quotes.QuoteSeriesId
        /// </summary>
        /// <value>The conceptual qualification for the field, such as bid, mid, or ask.   The field must be one of a defined set for the given supplier, in the same way as it  is for the Finbourne.WebApi.Interface.Dto.Quotes.QuoteSeriesId</value>
        [DataMember(Name="field", EmitDefaultValue=false)]
        public string Field { get; set; }

        /// <summary>
        /// Shorthand for the time interval used to select market data.
        /// </summary>
        /// <value>Shorthand for the time interval used to select market data.</value>
        [DataMember(Name="quoteInterval", EmitDefaultValue=false)]
        public string QuoteInterval { get; set; }

        /// <summary>
        /// The AsAt predicate specification.
        /// </summary>
        /// <value>The AsAt predicate specification.</value>
        [DataMember(Name="asAt", EmitDefaultValue=false)]
        public DateTimeOffset? AsAt { get; set; }

        /// <summary>
        /// The source of the quote. For a given provider/supplier of market data there may be an additional qualifier, e.g. the exchange or bank that provided the quote
        /// </summary>
        /// <value>The source of the quote. For a given provider/supplier of market data there may be an additional qualifier, e.g. the exchange or bank that provided the quote</value>
        [DataMember(Name="priceSource", EmitDefaultValue=false)]
        public string PriceSource { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class MarketDataKeyRule {\n");
            sb.Append("  Key: ").Append(Key).Append("\n");
            sb.Append("  Supplier: ").Append(Supplier).Append("\n");
            sb.Append("  DataScope: ").Append(DataScope).Append("\n");
            sb.Append("  QuoteType: ").Append(QuoteType).Append("\n");
            sb.Append("  Field: ").Append(Field).Append("\n");
            sb.Append("  QuoteInterval: ").Append(QuoteInterval).Append("\n");
            sb.Append("  AsAt: ").Append(AsAt).Append("\n");
            sb.Append("  PriceSource: ").Append(PriceSource).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as MarketDataKeyRule);
        }

        /// <summary>
        /// Returns true if MarketDataKeyRule instances are equal
        /// </summary>
        /// <param name="input">Instance of MarketDataKeyRule to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(MarketDataKeyRule input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Key == input.Key ||
                    (this.Key != null &&
                    this.Key.Equals(input.Key))
                ) && 
                (
                    this.Supplier == input.Supplier ||
                    (this.Supplier != null &&
                    this.Supplier.Equals(input.Supplier))
                ) && 
                (
                    this.DataScope == input.DataScope ||
                    (this.DataScope != null &&
                    this.DataScope.Equals(input.DataScope))
                ) && 
                (
                    this.QuoteType == input.QuoteType ||
                    (this.QuoteType != null &&
                    this.QuoteType.Equals(input.QuoteType))
                ) && 
                (
                    this.Field == input.Field ||
                    (this.Field != null &&
                    this.Field.Equals(input.Field))
                ) && 
                (
                    this.QuoteInterval == input.QuoteInterval ||
                    (this.QuoteInterval != null &&
                    this.QuoteInterval.Equals(input.QuoteInterval))
                ) && 
                (
                    this.AsAt == input.AsAt ||
                    (this.AsAt != null &&
                    this.AsAt.Equals(input.AsAt))
                ) && 
                (
                    this.PriceSource == input.PriceSource ||
                    (this.PriceSource != null &&
                    this.PriceSource.Equals(input.PriceSource))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Key != null)
                    hashCode = hashCode * 59 + this.Key.GetHashCode();
                if (this.Supplier != null)
                    hashCode = hashCode * 59 + this.Supplier.GetHashCode();
                if (this.DataScope != null)
                    hashCode = hashCode * 59 + this.DataScope.GetHashCode();
                if (this.QuoteType != null)
                    hashCode = hashCode * 59 + this.QuoteType.GetHashCode();
                if (this.Field != null)
                    hashCode = hashCode * 59 + this.Field.GetHashCode();
                if (this.QuoteInterval != null)
                    hashCode = hashCode * 59 + this.QuoteInterval.GetHashCode();
                if (this.AsAt != null)
                    hashCode = hashCode * 59 + this.AsAt.GetHashCode();
                if (this.PriceSource != null)
                    hashCode = hashCode * 59 + this.PriceSource.GetHashCode();
                return hashCode;
            }
        }
    }

}
