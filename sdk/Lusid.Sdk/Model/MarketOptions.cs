/* 
 * LUSID API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.10.1386
 * Contact: info@finbourne.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using OpenAPIDateConverter = Lusid.Sdk.Client.OpenAPIDateConverter;

namespace Lusid.Sdk.Model
{
    /// <summary>
    /// The set of options that control miscellaneous and default market resolution behaviour.  These are aimed at a &#39;crude&#39; level of control for those who do not wish to fine tune the way that data is resolved.  For clients who wish to simply match instruments to prices this is quite possibly sufficient. For those wishing to control market data sources  according to requirements based on accuracy or timeliness it is not. In more advanced cases the options should largely be ignored and rules specified  per source. Be aware that where no specified rule matches the final fallback is on to the logic implied here.
    /// </summary>
    [DataContract]
    public partial class MarketOptions :  IEquatable<MarketOptions>
    {
        /// <summary>
        /// The default supplier of data. This controls which &#39;dialect&#39; is used to find particular market data. e.g. one supplier might address data by RIC, another by PermId
        /// </summary>
        /// <value>The default supplier of data. This controls which &#39;dialect&#39; is used to find particular market data. e.g. one supplier might address data by RIC, another by PermId</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum DefaultSupplierEnum
        {
            /// <summary>
            /// Enum DataScope for value: DataScope
            /// </summary>
            [EnumMember(Value = "DataScope")]
            DataScope = 1,

            /// <summary>
            /// Enum Lusid for value: Lusid
            /// </summary>
            [EnumMember(Value = "Lusid")]
            Lusid = 2,

            /// <summary>
            /// Enum Isda for value: Isda
            /// </summary>
            [EnumMember(Value = "Isda")]
            Isda = 3,

            /// <summary>
            /// Enum Client for value: Client
            /// </summary>
            [EnumMember(Value = "Client")]
            Client = 4,

            /// <summary>
            /// Enum Edi for value: Edi
            /// </summary>
            [EnumMember(Value = "Edi")]
            Edi = 5,

            /// <summary>
            /// Enum TraderMade for value: TraderMade
            /// </summary>
            [EnumMember(Value = "TraderMade")]
            TraderMade = 6,

            /// <summary>
            /// Enum FactSet for value: FactSet
            /// </summary>
            [EnumMember(Value = "FactSet")]
            FactSet = 7

        }

        /// <summary>
        /// The default supplier of data. This controls which &#39;dialect&#39; is used to find particular market data. e.g. one supplier might address data by RIC, another by PermId
        /// </summary>
        /// <value>The default supplier of data. This controls which &#39;dialect&#39; is used to find particular market data. e.g. one supplier might address data by RIC, another by PermId</value>
        [DataMember(Name="defaultSupplier", EmitDefaultValue=false)]
        public DefaultSupplierEnum? DefaultSupplier { get; set; }
        /// <summary>
        /// When instrument quotes are searched for, what identifier should be used by default
        /// </summary>
        /// <value>When instrument quotes are searched for, what identifier should be used by default</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum DefaultInstrumentCodeTypeEnum
        {
            /// <summary>
            /// Enum LusidInstrumentId for value: LusidInstrumentId
            /// </summary>
            [EnumMember(Value = "LusidInstrumentId")]
            LusidInstrumentId = 1,

            /// <summary>
            /// Enum Figi for value: Figi
            /// </summary>
            [EnumMember(Value = "Figi")]
            Figi = 2,

            /// <summary>
            /// Enum RIC for value: RIC
            /// </summary>
            [EnumMember(Value = "RIC")]
            RIC = 3,

            /// <summary>
            /// Enum QuotePermId for value: QuotePermId
            /// </summary>
            [EnumMember(Value = "QuotePermId")]
            QuotePermId = 4,

            /// <summary>
            /// Enum Isin for value: Isin
            /// </summary>
            [EnumMember(Value = "Isin")]
            Isin = 5,

            /// <summary>
            /// Enum CurrencyPair for value: CurrencyPair
            /// </summary>
            [EnumMember(Value = "CurrencyPair")]
            CurrencyPair = 6

        }

        /// <summary>
        /// When instrument quotes are searched for, what identifier should be used by default
        /// </summary>
        /// <value>When instrument quotes are searched for, what identifier should be used by default</value>
        [DataMember(Name="defaultInstrumentCodeType", EmitDefaultValue=false)]
        public DefaultInstrumentCodeTypeEnum? DefaultInstrumentCodeType { get; set; }
        /// <summary>
        /// Defines ManifestLevelOfDetail
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum ManifestLevelOfDetailEnum
        {
            /// <summary>
            /// Enum None for value: None
            /// </summary>
            [EnumMember(Value = "None")]
            None = 1,

            /// <summary>
            /// Enum Full for value: Full
            /// </summary>
            [EnumMember(Value = "Full")]
            Full = 2

        }

        /// <summary>
        /// Gets or Sets ManifestLevelOfDetail
        /// </summary>
        [DataMember(Name="manifestLevelOfDetail", EmitDefaultValue=false)]
        public ManifestLevelOfDetailEnum? ManifestLevelOfDetail { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="MarketOptions" /> class.
        /// </summary>
        /// <param name="defaultSupplier">The default supplier of data. This controls which &#39;dialect&#39; is used to find particular market data. e.g. one supplier might address data by RIC, another by PermId.</param>
        /// <param name="defaultInstrumentCodeType">When instrument quotes are searched for, what identifier should be used by default.</param>
        /// <param name="defaultScope">For default rules, which scope should data be searched for in.</param>
        /// <param name="attemptToInferMissingFx">if true will calculate a missing Fx pair (e.g. THBJPY) from the inverse JPYTHB or from standardised pairs against USD, e.g. THBUSD and JPYUSD.</param>
        /// <param name="manifestLevelOfDetail">manifestLevelOfDetail.</param>
        public MarketOptions(DefaultSupplierEnum? defaultSupplier = default(DefaultSupplierEnum?), DefaultInstrumentCodeTypeEnum? defaultInstrumentCodeType = default(DefaultInstrumentCodeTypeEnum?), string defaultScope = default(string), bool? attemptToInferMissingFx = default(bool?), ManifestLevelOfDetailEnum? manifestLevelOfDetail = default(ManifestLevelOfDetailEnum?))
        {
            this.DefaultSupplier = defaultSupplier;
            this.DefaultInstrumentCodeType = defaultInstrumentCodeType;
            this.DefaultScope = defaultScope;
            this.AttemptToInferMissingFx = attemptToInferMissingFx;
            this.ManifestLevelOfDetail = manifestLevelOfDetail;
        }
        


        /// <summary>
        /// For default rules, which scope should data be searched for in
        /// </summary>
        /// <value>For default rules, which scope should data be searched for in</value>
        [DataMember(Name="defaultScope", EmitDefaultValue=false)]
        public string DefaultScope { get; set; }

        /// <summary>
        /// if true will calculate a missing Fx pair (e.g. THBJPY) from the inverse JPYTHB or from standardised pairs against USD, e.g. THBUSD and JPYUSD
        /// </summary>
        /// <value>if true will calculate a missing Fx pair (e.g. THBJPY) from the inverse JPYTHB or from standardised pairs against USD, e.g. THBUSD and JPYUSD</value>
        [DataMember(Name="attemptToInferMissingFx", EmitDefaultValue=false)]
        public bool? AttemptToInferMissingFx { get; set; }


        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class MarketOptions {\n");
            sb.Append("  DefaultSupplier: ").Append(DefaultSupplier).Append("\n");
            sb.Append("  DefaultInstrumentCodeType: ").Append(DefaultInstrumentCodeType).Append("\n");
            sb.Append("  DefaultScope: ").Append(DefaultScope).Append("\n");
            sb.Append("  AttemptToInferMissingFx: ").Append(AttemptToInferMissingFx).Append("\n");
            sb.Append("  ManifestLevelOfDetail: ").Append(ManifestLevelOfDetail).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as MarketOptions);
        }

        /// <summary>
        /// Returns true if MarketOptions instances are equal
        /// </summary>
        /// <param name="input">Instance of MarketOptions to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(MarketOptions input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.DefaultSupplier == input.DefaultSupplier ||
                    (this.DefaultSupplier != null &&
                    this.DefaultSupplier.Equals(input.DefaultSupplier))
                ) && 
                (
                    this.DefaultInstrumentCodeType == input.DefaultInstrumentCodeType ||
                    (this.DefaultInstrumentCodeType != null &&
                    this.DefaultInstrumentCodeType.Equals(input.DefaultInstrumentCodeType))
                ) && 
                (
                    this.DefaultScope == input.DefaultScope ||
                    (this.DefaultScope != null &&
                    this.DefaultScope.Equals(input.DefaultScope))
                ) && 
                (
                    this.AttemptToInferMissingFx == input.AttemptToInferMissingFx ||
                    (this.AttemptToInferMissingFx != null &&
                    this.AttemptToInferMissingFx.Equals(input.AttemptToInferMissingFx))
                ) && 
                (
                    this.ManifestLevelOfDetail == input.ManifestLevelOfDetail ||
                    (this.ManifestLevelOfDetail != null &&
                    this.ManifestLevelOfDetail.Equals(input.ManifestLevelOfDetail))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.DefaultSupplier != null)
                    hashCode = hashCode * 59 + this.DefaultSupplier.GetHashCode();
                if (this.DefaultInstrumentCodeType != null)
                    hashCode = hashCode * 59 + this.DefaultInstrumentCodeType.GetHashCode();
                if (this.DefaultScope != null)
                    hashCode = hashCode * 59 + this.DefaultScope.GetHashCode();
                if (this.AttemptToInferMissingFx != null)
                    hashCode = hashCode * 59 + this.AttemptToInferMissingFx.GetHashCode();
                if (this.ManifestLevelOfDetail != null)
                    hashCode = hashCode * 59 + this.ManifestLevelOfDetail.GetHashCode();
                return hashCode;
            }
        }
    }

}
