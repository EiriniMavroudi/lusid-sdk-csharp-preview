/* 
 * LUSID API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.10.1387
 * Contact: info@finbourne.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using OpenAPIDateConverter = Lusid.Sdk.Client.OpenAPIDateConverter;

namespace Lusid.Sdk.Model
{
    /// <summary>
    /// The combination of a library to use and a model in that library that defines which pricing code will evaluate instruments  having a particular type/class. This allows us to control the model type and library for a given instrument.
    /// </summary>
    [DataContract]
    public partial class ModelSelection :  IEquatable<ModelSelection>
    {
        /// <summary>
        /// Which library is used for pricing requests
        /// </summary>
        /// <value>Which library is used for pricing requests</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum LibraryEnum
        {
            /// <summary>
            /// Enum Lusid for value: Lusid
            /// </summary>
            [EnumMember(Value = "Lusid")]
            Lusid = 1,

            /// <summary>
            /// Enum RefinitivQps for value: RefinitivQps
            /// </summary>
            [EnumMember(Value = "RefinitivQps")]
            RefinitivQps = 2,

            /// <summary>
            /// Enum RefinitivTracsWeb for value: RefinitivTracsWeb
            /// </summary>
            [EnumMember(Value = "RefinitivTracsWeb")]
            RefinitivTracsWeb = 3,

            /// <summary>
            /// Enum VolMaster for value: VolMaster
            /// </summary>
            [EnumMember(Value = "VolMaster")]
            VolMaster = 4,

            /// <summary>
            /// Enum IsdaCds for value: IsdaCds
            /// </summary>
            [EnumMember(Value = "IsdaCds")]
            IsdaCds = 5

        }

        /// <summary>
        /// Which library is used for pricing requests
        /// </summary>
        /// <value>Which library is used for pricing requests</value>
        [DataMember(Name="library", EmitDefaultValue=false)]
        public LibraryEnum Library { get; set; }
        /// <summary>
        /// Which model should be used for pricing requests
        /// </summary>
        /// <value>Which model should be used for pricing requests</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum ModelEnum
        {
            /// <summary>
            /// Enum SimpleStatic for value: SimpleStatic
            /// </summary>
            [EnumMember(Value = "SimpleStatic")]
            SimpleStatic = 1,

            /// <summary>
            /// Enum Discounting for value: Discounting
            /// </summary>
            [EnumMember(Value = "Discounting")]
            Discounting = 2,

            /// <summary>
            /// Enum VendorDefault for value: VendorDefault
            /// </summary>
            [EnumMember(Value = "VendorDefault")]
            VendorDefault = 3,

            /// <summary>
            /// Enum BlackScholes for value: BlackScholes
            /// </summary>
            [EnumMember(Value = "BlackScholes")]
            BlackScholes = 4

        }

        /// <summary>
        /// Which model should be used for pricing requests
        /// </summary>
        /// <value>Which model should be used for pricing requests</value>
        [DataMember(Name="model", EmitDefaultValue=false)]
        public ModelEnum Model { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="ModelSelection" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected ModelSelection() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="ModelSelection" /> class.
        /// </summary>
        /// <param name="library">Which library is used for pricing requests (required).</param>
        /// <param name="model">Which model should be used for pricing requests (required).</param>
        public ModelSelection(LibraryEnum library = default(LibraryEnum), ModelEnum model = default(ModelEnum))
        {
            // to ensure "library" is required (not null)
            if (library == null)
            {
                throw new InvalidDataException("library is a required property for ModelSelection and cannot be null");
            }
            else
            {
                this.Library = library;
            }
            
            // to ensure "model" is required (not null)
            if (model == null)
            {
                throw new InvalidDataException("model is a required property for ModelSelection and cannot be null");
            }
            else
            {
                this.Model = model;
            }
            
        }
        


        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ModelSelection {\n");
            sb.Append("  Library: ").Append(Library).Append("\n");
            sb.Append("  Model: ").Append(Model).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ModelSelection);
        }

        /// <summary>
        /// Returns true if ModelSelection instances are equal
        /// </summary>
        /// <param name="input">Instance of ModelSelection to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ModelSelection input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Library == input.Library ||
                    (this.Library != null &&
                    this.Library.Equals(input.Library))
                ) && 
                (
                    this.Model == input.Model ||
                    (this.Model != null &&
                    this.Model.Equals(input.Model))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Library != null)
                    hashCode = hashCode * 59 + this.Library.GetHashCode();
                if (this.Model != null)
                    hashCode = hashCode * 59 + this.Model.GetHashCode();
                return hashCode;
            }
        }
    }

}
