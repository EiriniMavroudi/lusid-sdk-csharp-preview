/* 
 * LUSID API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.10.1386
 * Contact: info@finbourne.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using OpenAPIDateConverter = Lusid.Sdk.Client.OpenAPIDateConverter;

namespace Lusid.Sdk.Model
{
    /// <summary>
    /// An identifier that uniquely identifies a set of Quote access control metadata.
    /// </summary>
    [DataContract]
    public partial class QuoteAccessMetadataRuleId :  IEquatable<QuoteAccessMetadataRuleId>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="QuoteAccessMetadataRuleId" /> class.
        /// </summary>
        /// <param name="provider">The platform or vendor that provided the quote, e.g. &#39;DataScope&#39;, &#39;LUSID&#39; etc..</param>
        /// <param name="priceSource">The source or originator of the quote, e.g. a bank or financial institution..</param>
        /// <param name="instrumentId">The value of the instrument identifier that uniquely identifies the instrument that the quote is for, e.g. &#39;BBG00JX0P539&#39;..</param>
        /// <param name="instrumentIdType">The type of instrument identifier used to uniquely identify the instrument that the quote is for, e.g. &#39;Figi&#39;..</param>
        /// <param name="quoteType">The type of the quote. This allows for quotes other than prices e.g. rates or spreads to be used..</param>
        /// <param name="field">The field of the quote e.g. bid, mid, ask etc. This should be consistent across a time series of quotes. The allowed values are dependant on the specified Provider..</param>
        public QuoteAccessMetadataRuleId(string provider = default(string), string priceSource = default(string), string instrumentId = default(string), string instrumentIdType = default(string), string quoteType = default(string), string field = default(string))
        {
            this.Provider = provider;
            this.PriceSource = priceSource;
            this.InstrumentId = instrumentId;
            this.InstrumentIdType = instrumentIdType;
            this.QuoteType = quoteType;
            this.Field = field;
        }
        
        /// <summary>
        /// The platform or vendor that provided the quote, e.g. &#39;DataScope&#39;, &#39;LUSID&#39; etc.
        /// </summary>
        /// <value>The platform or vendor that provided the quote, e.g. &#39;DataScope&#39;, &#39;LUSID&#39; etc.</value>
        [DataMember(Name="provider", EmitDefaultValue=false)]
        public string Provider { get; set; }

        /// <summary>
        /// The source or originator of the quote, e.g. a bank or financial institution.
        /// </summary>
        /// <value>The source or originator of the quote, e.g. a bank or financial institution.</value>
        [DataMember(Name="priceSource", EmitDefaultValue=false)]
        public string PriceSource { get; set; }

        /// <summary>
        /// The value of the instrument identifier that uniquely identifies the instrument that the quote is for, e.g. &#39;BBG00JX0P539&#39;.
        /// </summary>
        /// <value>The value of the instrument identifier that uniquely identifies the instrument that the quote is for, e.g. &#39;BBG00JX0P539&#39;.</value>
        [DataMember(Name="instrumentId", EmitDefaultValue=false)]
        public string InstrumentId { get; set; }

        /// <summary>
        /// The type of instrument identifier used to uniquely identify the instrument that the quote is for, e.g. &#39;Figi&#39;.
        /// </summary>
        /// <value>The type of instrument identifier used to uniquely identify the instrument that the quote is for, e.g. &#39;Figi&#39;.</value>
        [DataMember(Name="instrumentIdType", EmitDefaultValue=false)]
        public string InstrumentIdType { get; set; }

        /// <summary>
        /// The type of the quote. This allows for quotes other than prices e.g. rates or spreads to be used.
        /// </summary>
        /// <value>The type of the quote. This allows for quotes other than prices e.g. rates or spreads to be used.</value>
        [DataMember(Name="quoteType", EmitDefaultValue=false)]
        public string QuoteType { get; set; }

        /// <summary>
        /// The field of the quote e.g. bid, mid, ask etc. This should be consistent across a time series of quotes. The allowed values are dependant on the specified Provider.
        /// </summary>
        /// <value>The field of the quote e.g. bid, mid, ask etc. This should be consistent across a time series of quotes. The allowed values are dependant on the specified Provider.</value>
        [DataMember(Name="field", EmitDefaultValue=false)]
        public string Field { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class QuoteAccessMetadataRuleId {\n");
            sb.Append("  Provider: ").Append(Provider).Append("\n");
            sb.Append("  PriceSource: ").Append(PriceSource).Append("\n");
            sb.Append("  InstrumentId: ").Append(InstrumentId).Append("\n");
            sb.Append("  InstrumentIdType: ").Append(InstrumentIdType).Append("\n");
            sb.Append("  QuoteType: ").Append(QuoteType).Append("\n");
            sb.Append("  Field: ").Append(Field).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as QuoteAccessMetadataRuleId);
        }

        /// <summary>
        /// Returns true if QuoteAccessMetadataRuleId instances are equal
        /// </summary>
        /// <param name="input">Instance of QuoteAccessMetadataRuleId to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(QuoteAccessMetadataRuleId input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Provider == input.Provider ||
                    (this.Provider != null &&
                    this.Provider.Equals(input.Provider))
                ) && 
                (
                    this.PriceSource == input.PriceSource ||
                    (this.PriceSource != null &&
                    this.PriceSource.Equals(input.PriceSource))
                ) && 
                (
                    this.InstrumentId == input.InstrumentId ||
                    (this.InstrumentId != null &&
                    this.InstrumentId.Equals(input.InstrumentId))
                ) && 
                (
                    this.InstrumentIdType == input.InstrumentIdType ||
                    (this.InstrumentIdType != null &&
                    this.InstrumentIdType.Equals(input.InstrumentIdType))
                ) && 
                (
                    this.QuoteType == input.QuoteType ||
                    (this.QuoteType != null &&
                    this.QuoteType.Equals(input.QuoteType))
                ) && 
                (
                    this.Field == input.Field ||
                    (this.Field != null &&
                    this.Field.Equals(input.Field))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Provider != null)
                    hashCode = hashCode * 59 + this.Provider.GetHashCode();
                if (this.PriceSource != null)
                    hashCode = hashCode * 59 + this.PriceSource.GetHashCode();
                if (this.InstrumentId != null)
                    hashCode = hashCode * 59 + this.InstrumentId.GetHashCode();
                if (this.InstrumentIdType != null)
                    hashCode = hashCode * 59 + this.InstrumentIdType.GetHashCode();
                if (this.QuoteType != null)
                    hashCode = hashCode * 59 + this.QuoteType.GetHashCode();
                if (this.Field != null)
                    hashCode = hashCode * 59 + this.Field.GetHashCode();
                return hashCode;
            }
        }
    }

}
