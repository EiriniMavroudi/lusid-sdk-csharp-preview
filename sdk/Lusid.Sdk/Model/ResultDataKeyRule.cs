/* 
 * LUSID API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.10.1381
 * Contact: info@finbourne.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using OpenAPIDateConverter = Lusid.Sdk.Client.OpenAPIDateConverter;

namespace Lusid.Sdk.Model
{
    /// <summary>
    /// A rule that describes how we resolve (unit) result data.
    /// </summary>
    [DataContract]
    public partial class ResultDataKeyRule :  IEquatable<ResultDataKeyRule>
    {
        /// <summary>
        /// the result resource supplier (where the data comes from)
        /// </summary>
        /// <value>the result resource supplier (where the data comes from)</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum SupplierEnum
        {
            /// <summary>
            /// Enum DataScope for value: DataScope
            /// </summary>
            [EnumMember(Value = "DataScope")]
            DataScope = 1,

            /// <summary>
            /// Enum Lusid for value: Lusid
            /// </summary>
            [EnumMember(Value = "Lusid")]
            Lusid = 2,

            /// <summary>
            /// Enum Isda for value: Isda
            /// </summary>
            [EnumMember(Value = "Isda")]
            Isda = 3,

            /// <summary>
            /// Enum Client for value: Client
            /// </summary>
            [EnumMember(Value = "Client")]
            Client = 4,

            /// <summary>
            /// Enum Edi for value: Edi
            /// </summary>
            [EnumMember(Value = "Edi")]
            Edi = 5,

            /// <summary>
            /// Enum TraderMade for value: TraderMade
            /// </summary>
            [EnumMember(Value = "TraderMade")]
            TraderMade = 6,

            /// <summary>
            /// Enum FactSet for value: FactSet
            /// </summary>
            [EnumMember(Value = "FactSet")]
            FactSet = 7

        }

        /// <summary>
        /// the result resource supplier (where the data comes from)
        /// </summary>
        /// <value>the result resource supplier (where the data comes from)</value>
        [DataMember(Name="supplier", EmitDefaultValue=false)]
        public SupplierEnum Supplier { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="ResultDataKeyRule" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected ResultDataKeyRule() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="ResultDataKeyRule" /> class.
        /// </summary>
        /// <param name="resourceKey">The result data key that identifies the address pattern that this is a rule for (required).</param>
        /// <param name="supplier">the result resource supplier (where the data comes from) (required).</param>
        /// <param name="dataScope">which is the scope in which the data should be found (required).</param>
        /// <param name="documentCode">document code that defines which document is desired (required).</param>
        /// <param name="quoteInterval">Shorthand for the time interval used to select result data..</param>
        /// <param name="asAt">The AsAt predicate specification..</param>
        public ResultDataKeyRule(string resourceKey = default(string), SupplierEnum supplier = default(SupplierEnum), string dataScope = default(string), string documentCode = default(string), string quoteInterval = default(string), DateTimeOffset? asAt = default(DateTimeOffset?))
        {
            // to ensure "resourceKey" is required (not null)
            if (resourceKey == null)
            {
                throw new InvalidDataException("resourceKey is a required property for ResultDataKeyRule and cannot be null");
            }
            else
            {
                this.ResourceKey = resourceKey;
            }
            
            // to ensure "supplier" is required (not null)
            if (supplier == null)
            {
                throw new InvalidDataException("supplier is a required property for ResultDataKeyRule and cannot be null");
            }
            else
            {
                this.Supplier = supplier;
            }
            
            // to ensure "dataScope" is required (not null)
            if (dataScope == null)
            {
                throw new InvalidDataException("dataScope is a required property for ResultDataKeyRule and cannot be null");
            }
            else
            {
                this.DataScope = dataScope;
            }
            
            // to ensure "documentCode" is required (not null)
            if (documentCode == null)
            {
                throw new InvalidDataException("documentCode is a required property for ResultDataKeyRule and cannot be null");
            }
            else
            {
                this.DocumentCode = documentCode;
            }
            
            this.QuoteInterval = quoteInterval;
            this.AsAt = asAt;
        }
        
        /// <summary>
        /// The result data key that identifies the address pattern that this is a rule for
        /// </summary>
        /// <value>The result data key that identifies the address pattern that this is a rule for</value>
        [DataMember(Name="resourceKey", EmitDefaultValue=false)]
        public string ResourceKey { get; set; }


        /// <summary>
        /// which is the scope in which the data should be found
        /// </summary>
        /// <value>which is the scope in which the data should be found</value>
        [DataMember(Name="dataScope", EmitDefaultValue=false)]
        public string DataScope { get; set; }

        /// <summary>
        /// document code that defines which document is desired
        /// </summary>
        /// <value>document code that defines which document is desired</value>
        [DataMember(Name="documentCode", EmitDefaultValue=false)]
        public string DocumentCode { get; set; }

        /// <summary>
        /// Shorthand for the time interval used to select result data.
        /// </summary>
        /// <value>Shorthand for the time interval used to select result data.</value>
        [DataMember(Name="quoteInterval", EmitDefaultValue=false)]
        public string QuoteInterval { get; set; }

        /// <summary>
        /// The AsAt predicate specification.
        /// </summary>
        /// <value>The AsAt predicate specification.</value>
        [DataMember(Name="asAt", EmitDefaultValue=false)]
        public DateTimeOffset? AsAt { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ResultDataKeyRule {\n");
            sb.Append("  ResourceKey: ").Append(ResourceKey).Append("\n");
            sb.Append("  Supplier: ").Append(Supplier).Append("\n");
            sb.Append("  DataScope: ").Append(DataScope).Append("\n");
            sb.Append("  DocumentCode: ").Append(DocumentCode).Append("\n");
            sb.Append("  QuoteInterval: ").Append(QuoteInterval).Append("\n");
            sb.Append("  AsAt: ").Append(AsAt).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ResultDataKeyRule);
        }

        /// <summary>
        /// Returns true if ResultDataKeyRule instances are equal
        /// </summary>
        /// <param name="input">Instance of ResultDataKeyRule to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ResultDataKeyRule input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.ResourceKey == input.ResourceKey ||
                    (this.ResourceKey != null &&
                    this.ResourceKey.Equals(input.ResourceKey))
                ) && 
                (
                    this.Supplier == input.Supplier ||
                    (this.Supplier != null &&
                    this.Supplier.Equals(input.Supplier))
                ) && 
                (
                    this.DataScope == input.DataScope ||
                    (this.DataScope != null &&
                    this.DataScope.Equals(input.DataScope))
                ) && 
                (
                    this.DocumentCode == input.DocumentCode ||
                    (this.DocumentCode != null &&
                    this.DocumentCode.Equals(input.DocumentCode))
                ) && 
                (
                    this.QuoteInterval == input.QuoteInterval ||
                    (this.QuoteInterval != null &&
                    this.QuoteInterval.Equals(input.QuoteInterval))
                ) && 
                (
                    this.AsAt == input.AsAt ||
                    (this.AsAt != null &&
                    this.AsAt.Equals(input.AsAt))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.ResourceKey != null)
                    hashCode = hashCode * 59 + this.ResourceKey.GetHashCode();
                if (this.Supplier != null)
                    hashCode = hashCode * 59 + this.Supplier.GetHashCode();
                if (this.DataScope != null)
                    hashCode = hashCode * 59 + this.DataScope.GetHashCode();
                if (this.DocumentCode != null)
                    hashCode = hashCode * 59 + this.DocumentCode.GetHashCode();
                if (this.QuoteInterval != null)
                    hashCode = hashCode * 59 + this.QuoteInterval.GetHashCode();
                if (this.AsAt != null)
                    hashCode = hashCode * 59 + this.AsAt.GetHashCode();
                return hashCode;
            }
        }
    }

}
