/* 
 * LUSID API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.10.1387
 * Contact: info@finbourne.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using OpenAPIDateConverter = Lusid.Sdk.Client.OpenAPIDateConverter;

namespace Lusid.Sdk.Model
{
    /// <summary>
    /// ResultDataSchema
    /// </summary>
    [DataContract]
    public partial class ResultDataSchema :  IEquatable<ResultDataSchema>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ResultDataSchema" /> class.
        /// </summary>
        /// <param name="nodeValueSchema">nodeValueSchema.</param>
        /// <param name="propertySchema">propertySchema.</param>
        public ResultDataSchema(Dictionary<string, FieldSchema> nodeValueSchema = default(Dictionary<string, FieldSchema>), Dictionary<string, FieldSchema> propertySchema = default(Dictionary<string, FieldSchema>))
        {
            this.NodeValueSchema = nodeValueSchema;
            this.PropertySchema = propertySchema;
        }
        
        /// <summary>
        /// Gets or Sets NodeValueSchema
        /// </summary>
        [DataMember(Name="nodeValueSchema", EmitDefaultValue=false)]
        public Dictionary<string, FieldSchema> NodeValueSchema { get; set; }

        /// <summary>
        /// Gets or Sets PropertySchema
        /// </summary>
        [DataMember(Name="propertySchema", EmitDefaultValue=false)]
        public Dictionary<string, FieldSchema> PropertySchema { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ResultDataSchema {\n");
            sb.Append("  NodeValueSchema: ").Append(NodeValueSchema).Append("\n");
            sb.Append("  PropertySchema: ").Append(PropertySchema).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ResultDataSchema);
        }

        /// <summary>
        /// Returns true if ResultDataSchema instances are equal
        /// </summary>
        /// <param name="input">Instance of ResultDataSchema to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ResultDataSchema input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.NodeValueSchema == input.NodeValueSchema ||
                    this.NodeValueSchema != null &&
                    input.NodeValueSchema != null &&
                    this.NodeValueSchema.SequenceEqual(input.NodeValueSchema)
                ) && 
                (
                    this.PropertySchema == input.PropertySchema ||
                    this.PropertySchema != null &&
                    input.PropertySchema != null &&
                    this.PropertySchema.SequenceEqual(input.PropertySchema)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.NodeValueSchema != null)
                    hashCode = hashCode * 59 + this.NodeValueSchema.GetHashCode();
                if (this.PropertySchema != null)
                    hashCode = hashCode * 59 + this.PropertySchema.GetHashCode();
                return hashCode;
            }
        }
    }

}
