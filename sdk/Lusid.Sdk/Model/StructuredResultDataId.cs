/* 
 * LUSID API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.10.1387
 * Contact: info@finbourne.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using OpenAPIDateConverter = Lusid.Sdk.Client.OpenAPIDateConverter;

namespace Lusid.Sdk.Model
{
    /// <summary>
    /// An identifier that uniquely describes an item of structured result data such as the risk to an interest curve or a set of yields or analytics on an index.
    /// </summary>
    [DataContract]
    public partial class StructuredResultDataId :  IEquatable<StructuredResultDataId>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="StructuredResultDataId" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected StructuredResultDataId() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="StructuredResultDataId" /> class.
        /// </summary>
        /// <param name="source">The platform or vendor that provided the structured result data, e.g. &#39;client&#39;. This is primarily of interest when data could have been sourced from multiple sources (required).</param>
        /// <param name="code">The identifier for the entity that this id describes. It could be an index, instrument or other form of structured data.</param>
        /// <param name="effectiveAt">The effectiveAt or cut label that this item of structured market data is/was updated/inserted with..</param>
        /// <param name="resultType">An identifier that denotes the class of data that the id points to. This is not the same as the format, but a more generic identifier such as &#39;risk result&#39;, &#39;cashflow&#39;, &#39;index&#39; or similar..</param>
        public StructuredResultDataId(string source = default(string), string code = default(string), DateTimeOrCutLabel effectiveAt = default(DateTimeOrCutLabel), string resultType = default(string))
        {
            // to ensure "source" is required (not null)
            if (source == null)
            {
                throw new InvalidDataException("source is a required property for StructuredResultDataId and cannot be null");
            }
            else
            {
                this.Source = source;
            }
            
            this.Code = code;
            this.EffectiveAt = effectiveAt;
            this.ResultType = resultType;
        }
        
        /// <summary>
        /// The platform or vendor that provided the structured result data, e.g. &#39;client&#39;. This is primarily of interest when data could have been sourced from multiple sources
        /// </summary>
        /// <value>The platform or vendor that provided the structured result data, e.g. &#39;client&#39;. This is primarily of interest when data could have been sourced from multiple sources</value>
        [DataMember(Name="source", EmitDefaultValue=false)]
        public string Source { get; set; }

        /// <summary>
        /// The identifier for the entity that this id describes. It could be an index, instrument or other form of structured data
        /// </summary>
        /// <value>The identifier for the entity that this id describes. It could be an index, instrument or other form of structured data</value>
        [DataMember(Name="code", EmitDefaultValue=false)]
        public string Code { get; set; }

        /// <summary>
        /// The effectiveAt or cut label that this item of structured market data is/was updated/inserted with.
        /// </summary>
        /// <value>The effectiveAt or cut label that this item of structured market data is/was updated/inserted with.</value>
        [DataMember(Name="effectiveAt", EmitDefaultValue=false)]
        public DateTimeOrCutLabel EffectiveAt { get; set; }

        /// <summary>
        /// An identifier that denotes the class of data that the id points to. This is not the same as the format, but a more generic identifier such as &#39;risk result&#39;, &#39;cashflow&#39;, &#39;index&#39; or similar.
        /// </summary>
        /// <value>An identifier that denotes the class of data that the id points to. This is not the same as the format, but a more generic identifier such as &#39;risk result&#39;, &#39;cashflow&#39;, &#39;index&#39; or similar.</value>
        [DataMember(Name="resultType", EmitDefaultValue=false)]
        public string ResultType { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class StructuredResultDataId {\n");
            sb.Append("  Source: ").Append(Source).Append("\n");
            sb.Append("  Code: ").Append(Code).Append("\n");
            sb.Append("  EffectiveAt: ").Append(EffectiveAt).Append("\n");
            sb.Append("  ResultType: ").Append(ResultType).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as StructuredResultDataId);
        }

        /// <summary>
        /// Returns true if StructuredResultDataId instances are equal
        /// </summary>
        /// <param name="input">Instance of StructuredResultDataId to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(StructuredResultDataId input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Source == input.Source ||
                    (this.Source != null &&
                    this.Source.Equals(input.Source))
                ) && 
                (
                    this.Code == input.Code ||
                    (this.Code != null &&
                    this.Code.Equals(input.Code))
                ) && 
                (
                    this.EffectiveAt == input.EffectiveAt ||
                    (this.EffectiveAt != null &&
                    this.EffectiveAt.Equals(input.EffectiveAt))
                ) && 
                (
                    this.ResultType == input.ResultType ||
                    (this.ResultType != null &&
                    this.ResultType.Equals(input.ResultType))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Source != null)
                    hashCode = hashCode * 59 + this.Source.GetHashCode();
                if (this.Code != null)
                    hashCode = hashCode * 59 + this.Code.GetHashCode();
                if (this.EffectiveAt != null)
                    hashCode = hashCode * 59 + this.EffectiveAt.GetHashCode();
                if (this.ResultType != null)
                    hashCode = hashCode * 59 + this.ResultType.GetHashCode();
                return hashCode;
            }
        }
    }

}
