/* 
 * LUSID API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.10.1387
 * Contact: info@finbourne.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using OpenAPIDateConverter = Lusid.Sdk.Client.OpenAPIDateConverter;

namespace Lusid.Sdk.Model
{
    /// <summary>
    /// A swaption, an option to enter into an interest rate swap.
    /// </summary>
    [DataContract]
    public partial class Swaption : LusidInstrument,  IEquatable<Swaption>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Swaption" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected Swaption() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="Swaption" /> class.
        /// </summary>
        /// <param name="startDate">startDate (required).</param>
        /// <param name="isPayerNotReceiver">True if on exercise the holder of the option enters the swap paying fixed, false if floating. (required).</param>
        /// <param name="isDeliveryNotCash">True of the option is settled in cash false if by delivery of the swap. (required).</param>
        /// <param name="swap">swap (required).</param>
        public Swaption(DateTimeOffset? startDate = default(DateTimeOffset?), bool? isPayerNotReceiver = default(bool?), bool? isDeliveryNotCash = default(bool?), LusidInstrument swap = default(LusidInstrument), InstrumentTypeEnum instrumentType = default(InstrumentTypeEnum)) : base(instrumentType)
        {
            // to ensure "startDate" is required (not null)
            if (startDate == null)
            {
                throw new InvalidDataException("startDate is a required property for Swaption and cannot be null");
            }
            else
            {
                this.StartDate = startDate;
            }
            
            // to ensure "isPayerNotReceiver" is required (not null)
            if (isPayerNotReceiver == null)
            {
                throw new InvalidDataException("isPayerNotReceiver is a required property for Swaption and cannot be null");
            }
            else
            {
                this.IsPayerNotReceiver = isPayerNotReceiver;
            }
            
            // to ensure "isDeliveryNotCash" is required (not null)
            if (isDeliveryNotCash == null)
            {
                throw new InvalidDataException("isDeliveryNotCash is a required property for Swaption and cannot be null");
            }
            else
            {
                this.IsDeliveryNotCash = isDeliveryNotCash;
            }
            
            // to ensure "swap" is required (not null)
            if (swap == null)
            {
                throw new InvalidDataException("swap is a required property for Swaption and cannot be null");
            }
            else
            {
                this.Swap = swap;
            }
            
        }
        
        /// <summary>
        /// Gets or Sets StartDate
        /// </summary>
        [DataMember(Name="startDate", EmitDefaultValue=false)]
        public DateTimeOffset? StartDate { get; set; }

        /// <summary>
        /// True if on exercise the holder of the option enters the swap paying fixed, false if floating.
        /// </summary>
        /// <value>True if on exercise the holder of the option enters the swap paying fixed, false if floating.</value>
        [DataMember(Name="isPayerNotReceiver", EmitDefaultValue=false)]
        public bool? IsPayerNotReceiver { get; set; }

        /// <summary>
        /// True of the option is settled in cash false if by delivery of the swap.
        /// </summary>
        /// <value>True of the option is settled in cash false if by delivery of the swap.</value>
        [DataMember(Name="isDeliveryNotCash", EmitDefaultValue=false)]
        public bool? IsDeliveryNotCash { get; set; }

        /// <summary>
        /// Gets or Sets Swap
        /// </summary>
        [DataMember(Name="swap", EmitDefaultValue=false)]
        public LusidInstrument Swap { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Swaption {\n");
            sb.Append("  ").Append(base.ToString().Replace("\n", "\n  ")).Append("\n");
            sb.Append("  StartDate: ").Append(StartDate).Append("\n");
            sb.Append("  IsPayerNotReceiver: ").Append(IsPayerNotReceiver).Append("\n");
            sb.Append("  IsDeliveryNotCash: ").Append(IsDeliveryNotCash).Append("\n");
            sb.Append("  Swap: ").Append(Swap).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public override string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Swaption);
        }

        /// <summary>
        /// Returns true if Swaption instances are equal
        /// </summary>
        /// <param name="input">Instance of Swaption to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Swaption input)
        {
            if (input == null)
                return false;

            return base.Equals(input) && 
                (
                    this.StartDate == input.StartDate ||
                    (this.StartDate != null &&
                    this.StartDate.Equals(input.StartDate))
                ) && base.Equals(input) && 
                (
                    this.IsPayerNotReceiver == input.IsPayerNotReceiver ||
                    (this.IsPayerNotReceiver != null &&
                    this.IsPayerNotReceiver.Equals(input.IsPayerNotReceiver))
                ) && base.Equals(input) && 
                (
                    this.IsDeliveryNotCash == input.IsDeliveryNotCash ||
                    (this.IsDeliveryNotCash != null &&
                    this.IsDeliveryNotCash.Equals(input.IsDeliveryNotCash))
                ) && base.Equals(input) && 
                (
                    this.Swap == input.Swap ||
                    (this.Swap != null &&
                    this.Swap.Equals(input.Swap))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = base.GetHashCode();
                if (this.StartDate != null)
                    hashCode = hashCode * 59 + this.StartDate.GetHashCode();
                if (this.IsPayerNotReceiver != null)
                    hashCode = hashCode * 59 + this.IsPayerNotReceiver.GetHashCode();
                if (this.IsDeliveryNotCash != null)
                    hashCode = hashCode * 59 + this.IsDeliveryNotCash.GetHashCode();
                if (this.Swap != null)
                    hashCode = hashCode * 59 + this.Swap.GetHashCode();
                return hashCode;
            }
        }
    }

}
