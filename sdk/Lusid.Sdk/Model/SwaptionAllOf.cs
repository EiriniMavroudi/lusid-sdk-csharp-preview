/* 
 * LUSID API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.10.1390
 * Contact: info@finbourne.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using OpenAPIDateConverter = Lusid.Sdk.Client.OpenAPIDateConverter;

namespace Lusid.Sdk.Model
{
    /// <summary>
    /// SwaptionAllOf
    /// </summary>
    [DataContract]
    public partial class SwaptionAllOf :  IEquatable<SwaptionAllOf>
    {
        /// <summary>
        /// Instrument type, must be property for JSON.
        /// </summary>
        /// <value>Instrument type, must be property for JSON.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum InstrumentTypeEnum
        {
            /// <summary>
            /// Enum QuotedSecurity for value: QuotedSecurity
            /// </summary>
            [EnumMember(Value = "QuotedSecurity")]
            QuotedSecurity = 1,

            /// <summary>
            /// Enum InterestRateSwap for value: InterestRateSwap
            /// </summary>
            [EnumMember(Value = "InterestRateSwap")]
            InterestRateSwap = 2,

            /// <summary>
            /// Enum FxForward for value: FxForward
            /// </summary>
            [EnumMember(Value = "FxForward")]
            FxForward = 3,

            /// <summary>
            /// Enum Exotic for value: Exotic
            /// </summary>
            [EnumMember(Value = "Exotic")]
            Exotic = 4,

            /// <summary>
            /// Enum FxOption for value: FxOption
            /// </summary>
            [EnumMember(Value = "FxOption")]
            FxOption = 5,

            /// <summary>
            /// Enum CreditDefaultSwap for value: CreditDefaultSwap
            /// </summary>
            [EnumMember(Value = "CreditDefaultSwap")]
            CreditDefaultSwap = 6,

            /// <summary>
            /// Enum InterestRateSwaption for value: InterestRateSwaption
            /// </summary>
            [EnumMember(Value = "InterestRateSwaption")]
            InterestRateSwaption = 7,

            /// <summary>
            /// Enum Bond for value: Bond
            /// </summary>
            [EnumMember(Value = "Bond")]
            Bond = 8,

            /// <summary>
            /// Enum EquityOption for value: EquityOption
            /// </summary>
            [EnumMember(Value = "EquityOption")]
            EquityOption = 9,

            /// <summary>
            /// Enum Unknown for value: Unknown
            /// </summary>
            [EnumMember(Value = "Unknown")]
            Unknown = 10

        }

        /// <summary>
        /// Instrument type, must be property for JSON.
        /// </summary>
        /// <value>Instrument type, must be property for JSON.</value>
        [DataMember(Name="instrumentType", EmitDefaultValue=false)]
        public InstrumentTypeEnum InstrumentType { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="SwaptionAllOf" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected SwaptionAllOf() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="SwaptionAllOf" /> class.
        /// </summary>
        /// <param name="startDate">startDate (required).</param>
        /// <param name="isPayerNotReceiver">True if on exercise the holder of the option enters the swap paying fixed, false if floating. (required).</param>
        /// <param name="isDeliveryNotCash">True of the option is settled in cash false if by delivery of the swap. (required).</param>
        /// <param name="swap">swap (required).</param>
        /// <param name="instrumentType">Instrument type, must be property for JSON. (required).</param>
        public SwaptionAllOf(DateTimeOffset? startDate = default(DateTimeOffset?), bool? isPayerNotReceiver = default(bool?), bool? isDeliveryNotCash = default(bool?), LusidInstrument swap = default(LusidInstrument), InstrumentTypeEnum instrumentType = default(InstrumentTypeEnum))
        {
            // to ensure "startDate" is required (not null)
            if (startDate == null)
            {
                throw new InvalidDataException("startDate is a required property for SwaptionAllOf and cannot be null");
            }
            else
            {
                this.StartDate = startDate;
            }
            
            // to ensure "isPayerNotReceiver" is required (not null)
            if (isPayerNotReceiver == null)
            {
                throw new InvalidDataException("isPayerNotReceiver is a required property for SwaptionAllOf and cannot be null");
            }
            else
            {
                this.IsPayerNotReceiver = isPayerNotReceiver;
            }
            
            // to ensure "isDeliveryNotCash" is required (not null)
            if (isDeliveryNotCash == null)
            {
                throw new InvalidDataException("isDeliveryNotCash is a required property for SwaptionAllOf and cannot be null");
            }
            else
            {
                this.IsDeliveryNotCash = isDeliveryNotCash;
            }
            
            // to ensure "swap" is required (not null)
            if (swap == null)
            {
                throw new InvalidDataException("swap is a required property for SwaptionAllOf and cannot be null");
            }
            else
            {
                this.Swap = swap;
            }
            
            // to ensure "instrumentType" is required (not null)
            if (instrumentType == null)
            {
                throw new InvalidDataException("instrumentType is a required property for SwaptionAllOf and cannot be null");
            }
            else
            {
                this.InstrumentType = instrumentType;
            }
            
        }
        
        /// <summary>
        /// Gets or Sets StartDate
        /// </summary>
        [DataMember(Name="startDate", EmitDefaultValue=false)]
        public DateTimeOffset? StartDate { get; set; }

        /// <summary>
        /// True if on exercise the holder of the option enters the swap paying fixed, false if floating.
        /// </summary>
        /// <value>True if on exercise the holder of the option enters the swap paying fixed, false if floating.</value>
        [DataMember(Name="isPayerNotReceiver", EmitDefaultValue=false)]
        public bool? IsPayerNotReceiver { get; set; }

        /// <summary>
        /// True of the option is settled in cash false if by delivery of the swap.
        /// </summary>
        /// <value>True of the option is settled in cash false if by delivery of the swap.</value>
        [DataMember(Name="isDeliveryNotCash", EmitDefaultValue=false)]
        public bool? IsDeliveryNotCash { get; set; }

        /// <summary>
        /// Gets or Sets Swap
        /// </summary>
        [DataMember(Name="swap", EmitDefaultValue=false)]
        public LusidInstrument Swap { get; set; }


        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class SwaptionAllOf {\n");
            sb.Append("  StartDate: ").Append(StartDate).Append("\n");
            sb.Append("  IsPayerNotReceiver: ").Append(IsPayerNotReceiver).Append("\n");
            sb.Append("  IsDeliveryNotCash: ").Append(IsDeliveryNotCash).Append("\n");
            sb.Append("  Swap: ").Append(Swap).Append("\n");
            sb.Append("  InstrumentType: ").Append(InstrumentType).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as SwaptionAllOf);
        }

        /// <summary>
        /// Returns true if SwaptionAllOf instances are equal
        /// </summary>
        /// <param name="input">Instance of SwaptionAllOf to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SwaptionAllOf input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.StartDate == input.StartDate ||
                    (this.StartDate != null &&
                    this.StartDate.Equals(input.StartDate))
                ) && 
                (
                    this.IsPayerNotReceiver == input.IsPayerNotReceiver ||
                    (this.IsPayerNotReceiver != null &&
                    this.IsPayerNotReceiver.Equals(input.IsPayerNotReceiver))
                ) && 
                (
                    this.IsDeliveryNotCash == input.IsDeliveryNotCash ||
                    (this.IsDeliveryNotCash != null &&
                    this.IsDeliveryNotCash.Equals(input.IsDeliveryNotCash))
                ) && 
                (
                    this.Swap == input.Swap ||
                    (this.Swap != null &&
                    this.Swap.Equals(input.Swap))
                ) && 
                (
                    this.InstrumentType == input.InstrumentType ||
                    (this.InstrumentType != null &&
                    this.InstrumentType.Equals(input.InstrumentType))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.StartDate != null)
                    hashCode = hashCode * 59 + this.StartDate.GetHashCode();
                if (this.IsPayerNotReceiver != null)
                    hashCode = hashCode * 59 + this.IsPayerNotReceiver.GetHashCode();
                if (this.IsDeliveryNotCash != null)
                    hashCode = hashCode * 59 + this.IsDeliveryNotCash.GetHashCode();
                if (this.Swap != null)
                    hashCode = hashCode * 59 + this.Swap.GetHashCode();
                if (this.InstrumentType != null)
                    hashCode = hashCode * 59 + this.InstrumentType.GetHashCode();
                return hashCode;
            }
        }
    }

}
