/* 
 * LUSID API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.10.1391
 * Contact: info@finbourne.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using OpenAPIDateConverter = Lusid.Sdk.Client.OpenAPIDateConverter;

namespace Lusid.Sdk.Model
{
    /// <summary>
    /// UpsertCorporateActionRequest
    /// </summary>
    [DataContract]
    public partial class UpsertCorporateActionRequest :  IEquatable<UpsertCorporateActionRequest>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="UpsertCorporateActionRequest" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected UpsertCorporateActionRequest() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="UpsertCorporateActionRequest" /> class.
        /// </summary>
        /// <param name="corporateActionCode">corporateActionCode (required).</param>
        /// <param name="description">description.</param>
        /// <param name="announcementDate">announcementDate (required).</param>
        /// <param name="exDate">exDate (required).</param>
        /// <param name="recordDate">recordDate (required).</param>
        /// <param name="paymentDate">paymentDate (required).</param>
        /// <param name="transitions">transitions (required).</param>
        public UpsertCorporateActionRequest(string corporateActionCode = default(string), string description = default(string), DateTimeOffset? announcementDate = default(DateTimeOffset?), DateTimeOffset? exDate = default(DateTimeOffset?), DateTimeOffset? recordDate = default(DateTimeOffset?), DateTimeOffset? paymentDate = default(DateTimeOffset?), List<CorporateActionTransitionRequest> transitions = default(List<CorporateActionTransitionRequest>))
        {
            // to ensure "corporateActionCode" is required (not null)
            if (corporateActionCode == null)
            {
                throw new InvalidDataException("corporateActionCode is a required property for UpsertCorporateActionRequest and cannot be null");
            }
            else
            {
                this.CorporateActionCode = corporateActionCode;
            }
            
            // to ensure "announcementDate" is required (not null)
            if (announcementDate == null)
            {
                throw new InvalidDataException("announcementDate is a required property for UpsertCorporateActionRequest and cannot be null");
            }
            else
            {
                this.AnnouncementDate = announcementDate;
            }
            
            // to ensure "exDate" is required (not null)
            if (exDate == null)
            {
                throw new InvalidDataException("exDate is a required property for UpsertCorporateActionRequest and cannot be null");
            }
            else
            {
                this.ExDate = exDate;
            }
            
            // to ensure "recordDate" is required (not null)
            if (recordDate == null)
            {
                throw new InvalidDataException("recordDate is a required property for UpsertCorporateActionRequest and cannot be null");
            }
            else
            {
                this.RecordDate = recordDate;
            }
            
            // to ensure "paymentDate" is required (not null)
            if (paymentDate == null)
            {
                throw new InvalidDataException("paymentDate is a required property for UpsertCorporateActionRequest and cannot be null");
            }
            else
            {
                this.PaymentDate = paymentDate;
            }
            
            // to ensure "transitions" is required (not null)
            if (transitions == null)
            {
                throw new InvalidDataException("transitions is a required property for UpsertCorporateActionRequest and cannot be null");
            }
            else
            {
                this.Transitions = transitions;
            }
            
            this.Description = description;
        }
        
        /// <summary>
        /// Gets or Sets CorporateActionCode
        /// </summary>
        [DataMember(Name="corporateActionCode", EmitDefaultValue=false)]
        public string CorporateActionCode { get; set; }

        /// <summary>
        /// Gets or Sets Description
        /// </summary>
        [DataMember(Name="description", EmitDefaultValue=false)]
        public string Description { get; set; }

        /// <summary>
        /// Gets or Sets AnnouncementDate
        /// </summary>
        [DataMember(Name="announcementDate", EmitDefaultValue=false)]
        public DateTimeOffset? AnnouncementDate { get; set; }

        /// <summary>
        /// Gets or Sets ExDate
        /// </summary>
        [DataMember(Name="exDate", EmitDefaultValue=false)]
        public DateTimeOffset? ExDate { get; set; }

        /// <summary>
        /// Gets or Sets RecordDate
        /// </summary>
        [DataMember(Name="recordDate", EmitDefaultValue=false)]
        public DateTimeOffset? RecordDate { get; set; }

        /// <summary>
        /// Gets or Sets PaymentDate
        /// </summary>
        [DataMember(Name="paymentDate", EmitDefaultValue=false)]
        public DateTimeOffset? PaymentDate { get; set; }

        /// <summary>
        /// Gets or Sets Transitions
        /// </summary>
        [DataMember(Name="transitions", EmitDefaultValue=false)]
        public List<CorporateActionTransitionRequest> Transitions { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class UpsertCorporateActionRequest {\n");
            sb.Append("  CorporateActionCode: ").Append(CorporateActionCode).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  AnnouncementDate: ").Append(AnnouncementDate).Append("\n");
            sb.Append("  ExDate: ").Append(ExDate).Append("\n");
            sb.Append("  RecordDate: ").Append(RecordDate).Append("\n");
            sb.Append("  PaymentDate: ").Append(PaymentDate).Append("\n");
            sb.Append("  Transitions: ").Append(Transitions).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as UpsertCorporateActionRequest);
        }

        /// <summary>
        /// Returns true if UpsertCorporateActionRequest instances are equal
        /// </summary>
        /// <param name="input">Instance of UpsertCorporateActionRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(UpsertCorporateActionRequest input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.CorporateActionCode == input.CorporateActionCode ||
                    (this.CorporateActionCode != null &&
                    this.CorporateActionCode.Equals(input.CorporateActionCode))
                ) && 
                (
                    this.Description == input.Description ||
                    (this.Description != null &&
                    this.Description.Equals(input.Description))
                ) && 
                (
                    this.AnnouncementDate == input.AnnouncementDate ||
                    (this.AnnouncementDate != null &&
                    this.AnnouncementDate.Equals(input.AnnouncementDate))
                ) && 
                (
                    this.ExDate == input.ExDate ||
                    (this.ExDate != null &&
                    this.ExDate.Equals(input.ExDate))
                ) && 
                (
                    this.RecordDate == input.RecordDate ||
                    (this.RecordDate != null &&
                    this.RecordDate.Equals(input.RecordDate))
                ) && 
                (
                    this.PaymentDate == input.PaymentDate ||
                    (this.PaymentDate != null &&
                    this.PaymentDate.Equals(input.PaymentDate))
                ) && 
                (
                    this.Transitions == input.Transitions ||
                    this.Transitions != null &&
                    input.Transitions != null &&
                    this.Transitions.SequenceEqual(input.Transitions)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.CorporateActionCode != null)
                    hashCode = hashCode * 59 + this.CorporateActionCode.GetHashCode();
                if (this.Description != null)
                    hashCode = hashCode * 59 + this.Description.GetHashCode();
                if (this.AnnouncementDate != null)
                    hashCode = hashCode * 59 + this.AnnouncementDate.GetHashCode();
                if (this.ExDate != null)
                    hashCode = hashCode * 59 + this.ExDate.GetHashCode();
                if (this.RecordDate != null)
                    hashCode = hashCode * 59 + this.RecordDate.GetHashCode();
                if (this.PaymentDate != null)
                    hashCode = hashCode * 59 + this.PaymentDate.GetHashCode();
                if (this.Transitions != null)
                    hashCode = hashCode * 59 + this.Transitions.GetHashCode();
                return hashCode;
            }
        }
    }

}
