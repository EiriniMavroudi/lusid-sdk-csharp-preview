/* 
 * LUSID API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.10.1392
 * Contact: info@finbourne.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using OpenAPIDateConverter = Lusid.Sdk.Client.OpenAPIDateConverter;

namespace Lusid.Sdk.Model
{
    /// <summary>
    /// UpsertPersonRequest
    /// </summary>
    [DataContract]
    public partial class UpsertPersonRequest :  IEquatable<UpsertPersonRequest>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="UpsertPersonRequest" /> class.
        /// </summary>
        /// <param name="identifiers">The identifiers the person will be created with..</param>
        /// <param name="properties">A set of properties associated to the Person. There can be multiple properties associated with a property key..</param>
        public UpsertPersonRequest(Dictionary<string, Property> identifiers = default(Dictionary<string, Property>), Dictionary<string, List<Property>> properties = default(Dictionary<string, List<Property>>))
        {
            this.Identifiers = identifiers;
            this.Properties = properties;
        }
        
        /// <summary>
        /// The identifiers the person will be created with.
        /// </summary>
        /// <value>The identifiers the person will be created with.</value>
        [DataMember(Name="identifiers", EmitDefaultValue=false)]
        public Dictionary<string, Property> Identifiers { get; set; }

        /// <summary>
        /// A set of properties associated to the Person. There can be multiple properties associated with a property key.
        /// </summary>
        /// <value>A set of properties associated to the Person. There can be multiple properties associated with a property key.</value>
        [DataMember(Name="properties", EmitDefaultValue=false)]
        public Dictionary<string, List<Property>> Properties { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class UpsertPersonRequest {\n");
            sb.Append("  Identifiers: ").Append(Identifiers).Append("\n");
            sb.Append("  Properties: ").Append(Properties).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as UpsertPersonRequest);
        }

        /// <summary>
        /// Returns true if UpsertPersonRequest instances are equal
        /// </summary>
        /// <param name="input">Instance of UpsertPersonRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(UpsertPersonRequest input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Identifiers == input.Identifiers ||
                    this.Identifiers != null &&
                    input.Identifiers != null &&
                    this.Identifiers.SequenceEqual(input.Identifiers)
                ) && 
                (
                    this.Properties == input.Properties ||
                    this.Properties != null &&
                    input.Properties != null &&
                    this.Properties.SequenceEqual(input.Properties)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Identifiers != null)
                    hashCode = hashCode * 59 + this.Identifiers.GetHashCode();
                if (this.Properties != null)
                    hashCode = hashCode * 59 + this.Properties.GetHashCode();
                return hashCode;
            }
        }
    }

}
