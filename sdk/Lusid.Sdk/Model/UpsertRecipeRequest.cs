/* 
 * LUSID API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.10.1392
 * Contact: info@finbourne.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using OpenAPIDateConverter = Lusid.Sdk.Client.OpenAPIDateConverter;

namespace Lusid.Sdk.Model
{
    /// <summary>
    /// A recipe or recipe snippet that is to be stored in the recipe structured data store.  Only one of these must be present.
    /// </summary>
    [DataContract]
    public partial class UpsertRecipeRequest :  IEquatable<UpsertRecipeRequest>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="UpsertRecipeRequest" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected UpsertRecipeRequest() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="UpsertRecipeRequest" /> class.
        /// </summary>
        /// <param name="code">User given string name (code) to identify the recipe or snippet for storage in and retrieval from the data store.  Sensibly it would be expected to match the same code given inside the configuration recipe, if that is the element being stored,  though this is not enforced. In the case of a snippet for rules or options, again a sensible naming convention such as options_...  or marketrules_... is advocated to aid in ease of understanding when included elsewhere though not enforced. (required).</param>
        /// <param name="configurationRecipe">configurationRecipe.</param>
        /// <param name="configurationRecipeSnippet">configurationRecipeSnippet.</param>
        public UpsertRecipeRequest(string code = default(string), ConfigurationRecipe configurationRecipe = default(ConfigurationRecipe), ConfigurationRecipeSnippet configurationRecipeSnippet = default(ConfigurationRecipeSnippet))
        {
            // to ensure "code" is required (not null)
            if (code == null)
            {
                throw new InvalidDataException("code is a required property for UpsertRecipeRequest and cannot be null");
            }
            else
            {
                this.Code = code;
            }
            
            this.ConfigurationRecipe = configurationRecipe;
            this.ConfigurationRecipeSnippet = configurationRecipeSnippet;
        }
        
        /// <summary>
        /// User given string name (code) to identify the recipe or snippet for storage in and retrieval from the data store.  Sensibly it would be expected to match the same code given inside the configuration recipe, if that is the element being stored,  though this is not enforced. In the case of a snippet for rules or options, again a sensible naming convention such as options_...  or marketrules_... is advocated to aid in ease of understanding when included elsewhere though not enforced.
        /// </summary>
        /// <value>User given string name (code) to identify the recipe or snippet for storage in and retrieval from the data store.  Sensibly it would be expected to match the same code given inside the configuration recipe, if that is the element being stored,  though this is not enforced. In the case of a snippet for rules or options, again a sensible naming convention such as options_...  or marketrules_... is advocated to aid in ease of understanding when included elsewhere though not enforced.</value>
        [DataMember(Name="code", EmitDefaultValue=false)]
        public string Code { get; set; }

        /// <summary>
        /// Gets or Sets ConfigurationRecipe
        /// </summary>
        [DataMember(Name="configurationRecipe", EmitDefaultValue=false)]
        public ConfigurationRecipe ConfigurationRecipe { get; set; }

        /// <summary>
        /// Gets or Sets ConfigurationRecipeSnippet
        /// </summary>
        [DataMember(Name="configurationRecipeSnippet", EmitDefaultValue=false)]
        public ConfigurationRecipeSnippet ConfigurationRecipeSnippet { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class UpsertRecipeRequest {\n");
            sb.Append("  Code: ").Append(Code).Append("\n");
            sb.Append("  ConfigurationRecipe: ").Append(ConfigurationRecipe).Append("\n");
            sb.Append("  ConfigurationRecipeSnippet: ").Append(ConfigurationRecipeSnippet).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as UpsertRecipeRequest);
        }

        /// <summary>
        /// Returns true if UpsertRecipeRequest instances are equal
        /// </summary>
        /// <param name="input">Instance of UpsertRecipeRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(UpsertRecipeRequest input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Code == input.Code ||
                    (this.Code != null &&
                    this.Code.Equals(input.Code))
                ) && 
                (
                    this.ConfigurationRecipe == input.ConfigurationRecipe ||
                    (this.ConfigurationRecipe != null &&
                    this.ConfigurationRecipe.Equals(input.ConfigurationRecipe))
                ) && 
                (
                    this.ConfigurationRecipeSnippet == input.ConfigurationRecipeSnippet ||
                    (this.ConfigurationRecipeSnippet != null &&
                    this.ConfigurationRecipeSnippet.Equals(input.ConfigurationRecipeSnippet))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Code != null)
                    hashCode = hashCode * 59 + this.Code.GetHashCode();
                if (this.ConfigurationRecipe != null)
                    hashCode = hashCode * 59 + this.ConfigurationRecipe.GetHashCode();
                if (this.ConfigurationRecipeSnippet != null)
                    hashCode = hashCode * 59 + this.ConfigurationRecipeSnippet.GetHashCode();
                return hashCode;
            }
        }
    }

}
