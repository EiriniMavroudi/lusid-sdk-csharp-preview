/* 
 * LUSID API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.10.1387
 * Contact: info@finbourne.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using OpenAPIDateConverter = Lusid.Sdk.Client.OpenAPIDateConverter;

namespace Lusid.Sdk.Model
{
    /// <summary>
    /// The details of the structured market data item to upsert into Lusid.
    /// </summary>
    [DataContract]
    public partial class UpsertStructuredMarketDataRequest :  IEquatable<UpsertStructuredMarketDataRequest>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="UpsertStructuredMarketDataRequest" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected UpsertStructuredMarketDataRequest() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="UpsertStructuredMarketDataRequest" /> class.
        /// </summary>
        /// <param name="marketDataId">marketDataId (required).</param>
        /// <param name="marketData">marketData.</param>
        public UpsertStructuredMarketDataRequest(StructuredMarketDataId marketDataId = default(StructuredMarketDataId), StructuredMarketData marketData = default(StructuredMarketData))
        {
            // to ensure "marketDataId" is required (not null)
            if (marketDataId == null)
            {
                throw new InvalidDataException("marketDataId is a required property for UpsertStructuredMarketDataRequest and cannot be null");
            }
            else
            {
                this.MarketDataId = marketDataId;
            }
            
            this.MarketData = marketData;
        }
        
        /// <summary>
        /// Gets or Sets MarketDataId
        /// </summary>
        [DataMember(Name="marketDataId", EmitDefaultValue=false)]
        public StructuredMarketDataId MarketDataId { get; set; }

        /// <summary>
        /// Gets or Sets MarketData
        /// </summary>
        [DataMember(Name="marketData", EmitDefaultValue=false)]
        public StructuredMarketData MarketData { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class UpsertStructuredMarketDataRequest {\n");
            sb.Append("  MarketDataId: ").Append(MarketDataId).Append("\n");
            sb.Append("  MarketData: ").Append(MarketData).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as UpsertStructuredMarketDataRequest);
        }

        /// <summary>
        /// Returns true if UpsertStructuredMarketDataRequest instances are equal
        /// </summary>
        /// <param name="input">Instance of UpsertStructuredMarketDataRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(UpsertStructuredMarketDataRequest input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.MarketDataId == input.MarketDataId ||
                    (this.MarketDataId != null &&
                    this.MarketDataId.Equals(input.MarketDataId))
                ) && 
                (
                    this.MarketData == input.MarketData ||
                    (this.MarketData != null &&
                    this.MarketData.Equals(input.MarketData))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.MarketDataId != null)
                    hashCode = hashCode * 59 + this.MarketDataId.GetHashCode();
                if (this.MarketData != null)
                    hashCode = hashCode * 59 + this.MarketData.GetHashCode();
                return hashCode;
            }
        }
    }

}
