/* 
 * LUSID API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.10.1389
 * Contact: info@finbourne.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using OpenAPIDateConverter = Lusid.Sdk.Client.OpenAPIDateConverter;

namespace Lusid.Sdk.Model
{
    /// <summary>
    /// A rule that identifies the set of preferences to be used for a given library, model and instrument type.  There can be many such rules, though only the first found for a given combination would be used.
    /// </summary>
    [DataContract]
    public partial class VendorModelRule :  IEquatable<VendorModelRule>
    {
        /// <summary>
        /// The vendor library supplier
        /// </summary>
        /// <value>The vendor library supplier</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum SupplierEnum
        {
            /// <summary>
            /// Enum Lusid for value: Lusid
            /// </summary>
            [EnumMember(Value = "Lusid")]
            Lusid = 1,

            /// <summary>
            /// Enum RefinitivQps for value: RefinitivQps
            /// </summary>
            [EnumMember(Value = "RefinitivQps")]
            RefinitivQps = 2,

            /// <summary>
            /// Enum RefinitivTracsWeb for value: RefinitivTracsWeb
            /// </summary>
            [EnumMember(Value = "RefinitivTracsWeb")]
            RefinitivTracsWeb = 3,

            /// <summary>
            /// Enum VolMaster for value: VolMaster
            /// </summary>
            [EnumMember(Value = "VolMaster")]
            VolMaster = 4,

            /// <summary>
            /// Enum IsdaCds for value: IsdaCds
            /// </summary>
            [EnumMember(Value = "IsdaCds")]
            IsdaCds = 5

        }

        /// <summary>
        /// The vendor library supplier
        /// </summary>
        /// <value>The vendor library supplier</value>
        [DataMember(Name="supplier", EmitDefaultValue=false)]
        public SupplierEnum Supplier { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="VendorModelRule" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected VendorModelRule() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="VendorModelRule" /> class.
        /// </summary>
        /// <param name="supplier">The vendor library supplier (required).</param>
        /// <param name="modelName">The vendor library model name (required).</param>
        /// <param name="instrumentType">The vendor library instrument type (required).</param>
        /// <param name="parameters">The set of opaque model parameters, provided as a Json object, that is a string object which will internally be converted to a dictionary of string to object.  Note that this is not intended as the final form of this object. It will be replaced with a more structured object as the set of parameters that are possible is  better understood. (required).</param>
        public VendorModelRule(SupplierEnum supplier = default(SupplierEnum), string modelName = default(string), string instrumentType = default(string), string parameters = default(string))
        {
            // to ensure "supplier" is required (not null)
            if (supplier == null)
            {
                throw new InvalidDataException("supplier is a required property for VendorModelRule and cannot be null");
            }
            else
            {
                this.Supplier = supplier;
            }
            
            // to ensure "modelName" is required (not null)
            if (modelName == null)
            {
                throw new InvalidDataException("modelName is a required property for VendorModelRule and cannot be null");
            }
            else
            {
                this.ModelName = modelName;
            }
            
            // to ensure "instrumentType" is required (not null)
            if (instrumentType == null)
            {
                throw new InvalidDataException("instrumentType is a required property for VendorModelRule and cannot be null");
            }
            else
            {
                this.InstrumentType = instrumentType;
            }
            
            // to ensure "parameters" is required (not null)
            if (parameters == null)
            {
                throw new InvalidDataException("parameters is a required property for VendorModelRule and cannot be null");
            }
            else
            {
                this.Parameters = parameters;
            }
            
        }
        

        /// <summary>
        /// The vendor library model name
        /// </summary>
        /// <value>The vendor library model name</value>
        [DataMember(Name="modelName", EmitDefaultValue=false)]
        public string ModelName { get; set; }

        /// <summary>
        /// The vendor library instrument type
        /// </summary>
        /// <value>The vendor library instrument type</value>
        [DataMember(Name="instrumentType", EmitDefaultValue=false)]
        public string InstrumentType { get; set; }

        /// <summary>
        /// The set of opaque model parameters, provided as a Json object, that is a string object which will internally be converted to a dictionary of string to object.  Note that this is not intended as the final form of this object. It will be replaced with a more structured object as the set of parameters that are possible is  better understood.
        /// </summary>
        /// <value>The set of opaque model parameters, provided as a Json object, that is a string object which will internally be converted to a dictionary of string to object.  Note that this is not intended as the final form of this object. It will be replaced with a more structured object as the set of parameters that are possible is  better understood.</value>
        [DataMember(Name="parameters", EmitDefaultValue=false)]
        public string Parameters { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class VendorModelRule {\n");
            sb.Append("  Supplier: ").Append(Supplier).Append("\n");
            sb.Append("  ModelName: ").Append(ModelName).Append("\n");
            sb.Append("  InstrumentType: ").Append(InstrumentType).Append("\n");
            sb.Append("  Parameters: ").Append(Parameters).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as VendorModelRule);
        }

        /// <summary>
        /// Returns true if VendorModelRule instances are equal
        /// </summary>
        /// <param name="input">Instance of VendorModelRule to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(VendorModelRule input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Supplier == input.Supplier ||
                    (this.Supplier != null &&
                    this.Supplier.Equals(input.Supplier))
                ) && 
                (
                    this.ModelName == input.ModelName ||
                    (this.ModelName != null &&
                    this.ModelName.Equals(input.ModelName))
                ) && 
                (
                    this.InstrumentType == input.InstrumentType ||
                    (this.InstrumentType != null &&
                    this.InstrumentType.Equals(input.InstrumentType))
                ) && 
                (
                    this.Parameters == input.Parameters ||
                    (this.Parameters != null &&
                    this.Parameters.Equals(input.Parameters))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Supplier != null)
                    hashCode = hashCode * 59 + this.Supplier.GetHashCode();
                if (this.ModelName != null)
                    hashCode = hashCode * 59 + this.ModelName.GetHashCode();
                if (this.InstrumentType != null)
                    hashCode = hashCode * 59 + this.InstrumentType.GetHashCode();
                if (this.Parameters != null)
                    hashCode = hashCode * 59 + this.Parameters.GetHashCode();
                return hashCode;
            }
        }
    }

}
